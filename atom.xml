<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弘毅 の blog</title>
  
  
  <link href="https://luyicui.github.io/atom.xml" rel="self"/>
  
  <link href="https://luyicui.github.io/"/>
  <updated>2024-12-18T05:47:46.139Z</updated>
  <id>https://luyicui.github.io/</id>
  
  <author>
    <name>弘毅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/18/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90huggingface%E3%80%91/Tokenizer%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>https://luyicui.github.io/2024/12/18/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90huggingface%E3%80%91/Tokenizer%E5%88%86%E8%AF%8D%E5%99%A8/</id>
    <published>2024-12-18T03:04:01.556Z</published>
    <updated>2024-12-18T05:47:46.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tokenizer分词器">Tokenizer分词器</h1><p>今天要做的这个任务其实就是一个调包的过程，但是我们需要了解一下这个流程。这个流程熟悉了，NLP领域的很多问题都可以按照这个流程去做了，比如对话生成、机器翻译、文本摘要等任务，你脑海中就会浮现出一个通用模板了，你不需要在做所有的子任务之前都需要再熟悉一遍了。你只需要知道，到了今天在NLP领域的所有任务，都可以用Transformer结合HuggingFace去玩就行了。 </p><h2 id="相关背景">相关背景</h2><p>NLP要解决的任务：</p><ol type="1"><li>处理文本数据，首先对文本数据进行分词操作(分词的方法可能会不同，中文常见的就是分词或者分字)</li><li>分完的词它不还是字符嘛，计算机还不认识，最终我们希望把这些字符映射成实际的特征（向量）</li><li>输入搞定好了之后，接下来咱们要构建模型了（一般都用预训练模型，例如BERT,GPT系列等）</li><li>怎么去完成我们自己的任务呢，基本上就是在预训练模型的基础上进行微调（训练我们自己数据的过程）</li></ol><p>2012年的word2vec到现在除了科研机构，已经完全不需要使用了。绝大多数的算法工程师和科研人员都没有机会去参与词向量的制作。词向量的制作，这个数据量已经不仅仅是用G或者T来衡量的单位，这个数据量是非常惊人的。</p><p>国内一般使用哈工大的或者清华的词向量库，我们调现成的就行，别觉得调现成的很low，这是最方便的做法。（你自己做，先不说你有没有这种级别的计算资源，你存都没地方存，真做起来电费你都交不起）。我们需要做的就是在别人的模型和词库基础上，对模型进行微调来解决自己的任务。</p><p>NLP任务，主要分成两个方向来学习：一个是谷歌的bert，一个是openAI的gpt，二者都是2018年所出的模型基本同一时间，谁抄谁还不一定呢。</p><h2 id="安装测试">安装测试</h2><p>首先看看怎么使用Hugging Face给我们提供的包，首先安装：</p><p>安装就是很简单，打开命令行，执行这个命令就是装，只需要这一步操作！（没有什么CPU、GPU版本，没有一大串恶心人的操作，可能之前装Pytorch、TF还有一些商汤做的一些包，已经把我们算法工程给装怕了。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install transformers</span><br></pre></td></tr></table></figure><p>但是在此之前，你最起码要把深度学习的环境配置好，可以参考我这篇文章：<ahref="https://blog.csdn.net/weixin_50592077/article/details/129845386?spm=1001.2014.3001.5502"title="PyTorch深度学习开发环境搭建全教程">PyTorch深度学习开发环境搭建全教程</a></p><p>先来瞅瞅多简单就干了一个大活</p><p>Huggingface这个包基本上就是调用即可，开箱即用的过程</p><p>对刚刚安装的包进行Hello Word级别任务测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> pipeline<span class="comment">#用人家设计好的流程完成一些简单的任务</span></span><br><span class="line">classifier = pipeline(<span class="string">&quot;sentiment-analysis&quot;</span>)</span><br><span class="line">classifier(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;I hate this so much!&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;POSITIVE&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">0.9598050713539124</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;NEGATIVE&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">0.9994558691978455</span>&#125;]</span><br></pre></td></tr></table></figure><p>这就是从transformers调出一个pipeline模块，这个模块可以给你提供很多接口，比如<strong>sentiment-analysis</strong>就是情感分析接口，第一次执行这个代码的时候，会给你下载一些已经训练好的模型。（你跑这个可能不需要梯子，但是你玩HuggingFace没有梯子可能还真不行）</p><p>下载的模型一般在这个位置：</p><p><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/da4d01bc4397a95b61470d653410799c.png" /></p><h2 id="基本流程概述分析">基本流程概述分析</h2><ol type="1"><li>首先就是第一步Raw text输入文本（This course is amazing）</li><li>不管是中文还是英文都会将文本转化为ID，（This course isamazing）是四个词为什么会有6个ID呢？后面解释。</li><li>ID直接输入到模型中（Bert、GPT），生成一个Logits结果</li><li>在经过一个后处理词操作，把前面的结果转换成概率</li></ol><p><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/c7e7c35d22f18026a9416df4ca9a5193.png" /></p><p>NLP的流程比CV简单的多，在CV领域的任务流程处理方式百花齐放，但是在NLP领域就是Transformer一统天下的格局。NLP的流程非常非常固定，没有任何区别。人类学会人类语言需要两年，这两年过程中的每天可能需要听到上万个词，所以让计算机学会人类语言也是需要一个过程的。NLP任务基本上都是大同小小小异。</p><h2 id="tokenizer需要做的事情">Tokenizer需要做的事情</h2><ul><li>分词，分字以及特殊字符（起始，终止，间隔，分类等特殊字符可以自己设计的）</li><li>对每一个token映射得到一个ID（每个词都会对应一个唯一的ID）</li><li>还有一些辅助信息也可以得到，比如当前词属于哪个句子（还有一些MASK，表示是否事原来的词还是特殊字符等）</li></ul><p>上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer<span class="comment">#自动判断</span></span><br><span class="line"> </span><br><span class="line">checkpoint = <span class="string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span><span class="comment">#根据这个模型所对应的来加载</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(checkpoint)</span><br></pre></td></tr></table></figure><p>（HuggingFace一个特别牛逼的地方就是一个API玩儿所有东西，就不用在多个地方调分词器）</p><p>从Transformers中调出一个自动分词器，这个“自动”分词器AutoTokenizer可以根据你选择的模型自动选择分词器，这就太省事儿，但是我们应该怎么选择模型呢？你去HuggingFace上去下载，不知道选哪个，按照销量（下载量）来呗。（现在NLP领域研究的论文，全都得根据HuggingFace去做，为什么？你得做对比试验啊，在HuggingFace就很方便去和别人作对比）</p><p>一个小例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">raw_inputs = [</span><br><span class="line">    <span class="string">&quot;I&#x27;ve been waiting for a this course my whole life.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;I hate this so much!&quot;</span>,</span><br><span class="line">]</span><br><span class="line">inputs = tokenizer(raw_inputs, padding=<span class="literal">True</span>, truncation=<span class="literal">True</span>, return_tensors=<span class="string">&quot;pt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure><p>解释一下tokenizer的参数：</p><ul><li><strong>raw_inputs</strong>：你选择的语言文本</li><li><strong>padding</strong>：默认为True，你输入的句子长度不一样，不管你输入多少句子，按照最长的那个进行补齐，补得就是0，padding这个词，我们在卷积神经网络就已经见过了</li><li><strong>truncation</strong>：截断操作，这里没用上，其实任务中需要制定一个max_longs参数，指定一个最大长度的句子，事实上所有的模型都指定来512个词为最大长度，谷歌、openAI亦是如此，在深度学习中科学家也很喜欢512个词。也就是说，一个句子最大长度就是512个词</li><li><strong>return_tensors</strong>：在HuggingFace中支持多种框架，默认的是PyTorch，PyTorch的数据格式就是tensor，指定为pt</li></ul><p>这段代码的输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;input_ids&#x27;: tensor([[ 101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 2023, 2607, 2026, 2878,</span><br><span class="line">         2166, 1012,  102],</span><br><span class="line">        [ 101, 1045, 5223, 2023, 2061, 2172,  999,  102,    0,    0,    0,    0,</span><br><span class="line">            0,    0,    0]]), &#x27;attention_mask&#x27;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],</span><br><span class="line">        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]])&#125;</span><br></pre></td></tr></table></figure><p>你需要记住这个input_ids，input_ids这个名字是自动生成的，它是将每一个词都生成一个对应的索引。</p><p>比如看第二句话 I hate this so much!一共有5个单词，但是还得加上标点符号，就是6个，但是在上面的结果中可以看到有8个编号后面再加上一下补长的0，其中101表示一个句子的开头，102表示一个句子的结束，所以有8个编号。（不同分词器的编号规则和内容不一定相同）</p><p>也就是说当前的id可以转化为tensor，也可以转化为文本，可以做编码解码的工作</p><p>使用这个编号，将句子解码出来，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tokenizer.decode([ <span class="number">101</span>, <span class="number">1045</span>, <span class="number">1005</span>, <span class="number">2310</span>, <span class="number">2042</span>, <span class="number">3403</span>, <span class="number">2005</span>, <span class="number">1037</span>, <span class="number">2023</span>, <span class="number">2607</span>, <span class="number">2026</span>, <span class="number">2878</span>,<span class="number">2166</span>, <span class="number">1012</span>,  <span class="number">102</span>])</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[CLS] i&#x27;ve been waiting for a this course my whole life. [SEP]&quot;</span></span><br></pre></td></tr></table></figure><p>这里的CLS表示的是分类的字符，SEP表示终止的字符，也就是说101和102表示特殊字符。</p><p>那后面0是什么？前面提到为来保证长度一致，做了padding补齐的操作，通过SEP做来分隔，SEP之前是实际内容，SEP之后是补0的内容，但是我们注意到了一个叫做attention_mask的东西。我们在做Transformer在做Self-Attention的时候，每一个词都需要跟所有的词计算关系（还不知道什么是Transformer去看<ahref="https://blog.csdn.net/weixin_50592077/article/details/131204351?spm=1001.2014.3001.5502"title="我的这篇文章">我的这篇文章</a>），那我后面补了0，需要前面的词需要和0计算关系吗？是不是不用啊。attention_mask表示的意思就是SEP后面的0，是不用计算的，全都是占位符而已。</p><p> 下篇内容：</p><p><ahref="https://blog.csdn.net/weixin_50592077/article/details/131656563"title="Hugging Face实战-系列教程2：AutoModel模型自动选择工具_机器学习杨卓越的博客-CSDN博客">HuggingFace实战-系列教程2：AutoModel模型自动选择工具_机器学习杨卓越的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tokenizer分词器&quot;&gt;Tokenizer分词器&lt;/h1&gt;
&lt;p&gt;今天要做的这个任务其实就是一个调包的过程，但是我们需要了解一下这个流程。这个流程熟悉了，NLP领域的很多问题都可以按照这个流程去做了，比如对话生成、机器翻译、文本摘要等任务，你脑海中就会浮现出</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/16/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/python%E7%B1%BB%E7%9A%84%20%60__call__()%60%E6%96%B9%E6%B3%95/"/>
    <id>https://luyicui.github.io/2024/12/16/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/python%E7%B1%BB%E7%9A%84%20%60__call__()%60%E6%96%B9%E6%B3%95/</id>
    <published>2024-12-16T15:19:59.129Z</published>
    <updated>2024-12-18T12:38:26.612Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/16/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/Errors/"/>
    <id>https://luyicui.github.io/2024/12/16/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/Errors/</id>
    <published>2024-12-16T15:18:24.979Z</published>
    <updated>2024-12-17T12:23:49.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="errors">Errors</h1><h2 id="modulenotfounderror">ModuleNotFoundError</h2><p><a href="./ModuleNotFoundError.md">ModuleNotFoundError</a></p><h2 id="valueerror-not-enough-values-to-unpack">ValueError: not enoughvalues to unpack</h2><p>好的，以下是一个简单的示例，展示了在 <code>for</code>循环中无法正确解包导致出错的情况。</p><h3 id="示例代码">示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们有一个列表，其中包含元组和非元组的元素</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="string">&quot;x&quot;</span>),  <span class="comment"># 正常的元组，能够解包</span></span><br><span class="line">    (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>),       <span class="comment"># 错误的元组，少了一个元素</span></span><br><span class="line">    (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>, <span class="string">&quot;y&quot;</span>),  <span class="comment"># 正常的元组，能够解包</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>,            <span class="comment"># 错误的元素，不是元组</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试在for循环中解包每个元素</span></span><br><span class="line"><span class="keyword">for</span> i, (letter, num, value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Index <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;letter&#125;</span>, <span class="subst">&#123;num&#125;</span>, <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面错误的元素通常意味着处理的时候出现了问题</p><h3 id="错误输出">错误输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Index 0: a, 1, x</span><br><span class="line">Index 1: b, 2, Traceback (most recent call last):</span><br><span class="line">  File &quot;example.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    for i, (letter, num, value) in enumerate(data):</span><br><span class="line">ValueError: not enough values to unpack (expected 3, got 2)</span><br></pre></td></tr></table></figure><h3 id="说明">说明</h3><ul><li>第 1 个和第 3 个元素是正常的元组，包含 3 个元素，可以成功解包。</li><li>第 2 个元素是一个只包含 2 个元素的元组 (<code>("b", 2)</code>)，这时<code>for</code> 循环解包时会报错，因为期望解包 3 个元素，但实际上只有 2个。</li><li>第 4 个元素是一个字符串 <code>"d"</code>，它不是元组，也无法解包成<code>letter, num, value</code>，同样会引发错误。</li></ul><h3 id="错误的原因">错误的原因</h3><ul><li><p>当 <code>for</code> 循环尝试解包时，它期望每个元素都包含 3个值，但在某些元素中缺少或不符合这个格式，导致解包失败。</p><p>在这个例子中，代码尝试将每个元素解包为 3 个变量(<code>letter, num, value</code>)，但第二个元素是一个只有 2个值的元组，而第四个元素根本不是一个元组，因此会报错。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;errors&quot;&gt;Errors&lt;/h1&gt;
&lt;h2 id=&quot;modulenotfounderror&quot;&gt;ModuleNotFoundError&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;./ModuleNotFoundError.md&quot;&gt;ModuleNotFoundErro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/16/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90Linux%E3%80%91/git/%E8%A7%A3%E5%86%B3%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E7%94%9F%E6%88%90%E4%B8%A4%E4%BB%BD%E6%88%96%E5%A4%9A%E4%BB%BDssh%E5%AF%86%E9%92%A5%E3%80%81%E5%85%AC%E9%92%A5%E6%98%A0%E5%B0%84%E4%B8%A4%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AAGitHub%E8%B4%A6%E5%8F%B7/"/>
    <id>https://luyicui.github.io/2024/12/16/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90Linux%E3%80%91/git/%E8%A7%A3%E5%86%B3%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E7%94%9F%E6%88%90%E4%B8%A4%E4%BB%BD%E6%88%96%E5%A4%9A%E4%BB%BDssh%E5%AF%86%E9%92%A5%E3%80%81%E5%85%AC%E9%92%A5%E6%98%A0%E5%B0%84%E4%B8%A4%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AAGitHub%E8%B4%A6%E5%8F%B7/</id>
    <published>2024-12-16T03:14:07.090Z</published>
    <updated>2024-12-16T04:25:29.432Z</updated>
    
    <content type="html"><![CDATA[<h1id="解决同一台电脑生成两份或多份ssh密钥公钥映射两个或多个github账号">解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号</h1><h2 id="需求描述">需求描述</h2><p>本人注册一个GitHub账户，用来分享本人自己的开源项目或者代码，同时，公司注册了一个GitHub账户，用来分享公司的开源项目。<strong>如果按照单个ssh公钥生成的方法则会把之前的公钥覆盖掉</strong>，这样将导致其中一方在下一次上传代码，本机和GitHub无法映射成功。</p><h2 id="需求分析">需求分析</h2><p>解决这个问题首先要明确如何生成单个ssh公钥。</p><p>ssh生成单个公钥命令：<code>ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</code>。<ahref="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成ssh公钥</a></p><p>上述命令会在当前<code>~/.ssh</code>目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。其中<code>id_rsa</code>是私钥文件，<code>id_rsa_.pub</code>是公钥文件。</p><p><code>id_rsa</code>和<code>id_rsa_.pub</code>文件都是通过一个邮箱号生成的，<strong>同一个公钥文件不可以配置两个不同GitHub账户（已测试）。</strong></p><p>那么两个GitHub账户就需要两个不同的邮箱号，来生成两组不同的公钥文件。</p><h2 id="解决方案">解决方案</h2><h3id="分别指定ssh公钥文件的名称即可">分别指定ssh公钥文件的名称即可。</h3><p>命令：<code>ssh-keygen -t rsa -C "your_email@example.com" -f ~/.ssh/id_rsa_example</code></p><p>示例：分别以791815567@qq.com和galaxysoft@sina.cn两个邮箱在<code>~/.ssh</code>目录下生成两级不同的公钥文件。791815567@qq.com邮箱：<code>ssh-keygen -t rsa -C "791815567@qq.com" -f ~/.ssh/id_rsa_me</code>galaxysoft@sina.cn邮箱：<code>ssh-keygen -t rsa -C "galaxysoft@sina.cn" -f ~/.ssh/id_rsa_galaxysoft</code>生成过程可参考<ahref="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成单个ssh公钥</a>这篇文章。</p><p>执行完成后，会以<code>~/.ssh</code>目录下看791815567@qq.com邮箱对应的私钥文件<code>id_rsa_me</code>、公钥文件<code>id_rsa_me.pub</code>和galaxysoft@sina.cn邮箱对应的私钥文件<code>id_rsa_galaxysoft</code>、公钥文件<code>id_rsa_galaxysoft.pub</code></p><p>分别在两个GitHub账户中添加对应的公钥信息即可，可参考<ahref="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成单个ssh公钥</a>这篇文章</p><h3id="通过ssh-add添加密钥至ssh-agent中">通过ssh-add添加密钥至ssh-agent中</h3><p>首先使用命令：<code>eval "$(ssh-agent -s)"</code> 确保 ssh-agent运行</p><p>然后使用命令：<code>ssh-add ~/.ssh/id_rsa_example;</code></p><p>示例：添加本文中的两个密钥：<code>ssh-add ~/.ssh/id_rsa_me; ssh-add ~/.ssh/id_rsa_galaxysoft;</code></p><h3id="添加config配置文件分别映射不同的github账户">添加config配置文件分别映射不同的GitHub账户</h3><p>进入<code>~/.ssh</code>目录，新建<code>config</code>文件，并添加相应的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">个人的 GitHub</span></span><br><span class="line">Host github-personal</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_me</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BitMan 的 GitHub</span></span><br><span class="line">Host github-galaxysoft</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_galaxysoft</span><br></pre></td></tr></table></figure><h3 id="测试配置是否成功">测试配置是否成功</h3><p>测试命令：<code>ssh -T git@github-galaxysoft</code></p><p>如果出现如下信息，表示配置成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`Hi myNameIssls!` You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>小提示：由于配置了两个GitHub的公、私钥映射信息，测试结果并不会把两个GitHub的信息都显示出来，只会显示第一个配置的映射成功信息。例如本例中只显示了<code>Hi myNameIssls!</code>账户信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;解决同一台电脑生成两份或多份ssh密钥公钥映射两个或多个github账号&quot;&gt;解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号&lt;/h1&gt;
&lt;h2 id=&quot;需求描述&quot;&gt;需求描述&lt;/h2&gt;
&lt;p&gt;本人注册一个GitHub账户，用来分享本人</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/13/[object%20Object]/LLM/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%95%B0%E5%AD%A6%E8%A7%A3%E9%A2%98%E8%83%BD%E5%8A%9B%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://luyicui.github.io/2024/12/13/[object%20Object]/LLM/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%95%B0%E5%AD%A6%E8%A7%A3%E9%A2%98%E8%83%BD%E5%8A%9B%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2024-12-13T15:27:30.796Z</published>
    <updated>2024-12-13T15:42:54.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大模型数学解题能力数据集">大模型数学解题能力—数据集</h1><blockquote><p>本文将会介绍笔者近段时间来在大模型数学解题能力方面的调研工作，包括数据集、论文、实践项目、开源平台等。</p></blockquote><p>笔者从今年五一开始从事大模型数学解题能力方面的工作，到7月初已完成了数据收集及合成，模型微调，模型部署推理，模型测评，模型开源等各阶段任务。这期间，笔者就大模型数学解题能力方面的工作形成了一系列文章，如下：</p><ol type="1"><li><ahref="https://mp.weixin.qq.com/s?__biz=MzU2NTYyMDk5MQ==&amp;mid=2247486824&amp;idx=1&amp;sn=fd6b36cf78aead227359606a7270516d&amp;chksm=fcb9b4f8cbce3dee332335092f576c703ccdc55598cf45cb7f483f822ba5c72590019384d12a&amp;token=910217935&amp;lang=zh_CN#rd">NLP（九十七）大模型数学解题能力的初步探索</a></li><li><ahref="https://mp.weixin.qq.com/s?__biz=MzU2NTYyMDk5MQ==&amp;mid=2247486889&amp;idx=1&amp;sn=27c1a40d3af462f43a80a1ed401843f6&amp;chksm=fcb9b439cbce3d2fd73e753618e0b32027314648eb13dc8b48bb9e713ad5313777c1ef27ce46&amp;token=910217935&amp;lang=zh_CN#rd">NLP（九十九）大模型的数学能力微调及测评</a></li><li><ahref="https://mp.weixin.qq.com/s?__biz=MzU2NTYyMDk5MQ==&amp;mid=2247486909&amp;idx=1&amp;sn=31b01bd4155b2c9ca15e2a7ae9f4de15&amp;chksm=fcb9b42dcbce3d3bb473cf138f0f0f9a71addeff934900d155b6b90fb2a5857c1926b8aa0e9d&amp;token=910217935&amp;lang=zh_CN&amp;poc_token=HCThiGajFt5ytgfZvK8pB0u2ZgTr-k_OD29zlsJj">NLP（一百）大模型数学能力测评</a></li><li><ahref="https://mp.weixin.qq.com/s?__biz=MzU2NTYyMDk5MQ==&amp;mid=2247487013&amp;idx=1&amp;sn=6a6786ba8c8c7cfdbc02ef558adefe71&amp;chksm=fcb9b7b5cbce3ea37f8fb61e743d0ea0a7d4f5d6b8e8b2c7a80171a5c8c217524d8f307c0146&amp;token=910217935&amp;lang=zh_CN#rd">OpenWebUI的Pipelines学习之使用大模型解数学题</a></li><li><ahref="https://mp.weixin.qq.com/s?__biz=MzU2NTYyMDk5MQ==&amp;mid=2247487025&amp;idx=1&amp;sn=368b349152f5c3e31de961cf2e9572c1&amp;chksm=fcb9b7a1cbce3eb78d7406a7b089b7175fa1691d10209645238b4da4edc0af3b2f5549dd249f&amp;token=910217935&amp;lang=zh_CN#rd">个人的数学解题大模型已开源至HuggingFace平台！</a></li></ol><p>当然，在研究过程中，笔者也进行了大量的调研工作，形成了一系列笔记，经过整理现在予以公开，以飨读者。笔记内容包括数据集、论文、实践项目、开源平台等。</p><p>该笔记内容在Notion平台上已经公开，有兴趣的读者可以访问：<ahref="https://local-dugout-3c9.notion.site/Math-for-LLM-d631565f4c0f42d8bf4dcfe87a384ece">Mathfor LLM</a></p><h2 id="数据集">数据集</h2><h3 id="gsm8k">GSM8K</h3><blockquote><p>访问网址：<ahref="https://huggingface.co/datasets/openai/gsm8k">https://huggingface.co/datasets/openai/gsm8k</a></p></blockquote><p>GSM8K数据集为大模型数学能力评测常见的benchmark之一，题目类型为小学数学题，共8.5k样本。</p><p>GSM8K是大小为8.5K的小学数学数据集，涉及基本算术运算，需要2-8个步骤才能解决，包含7.5K训练集和1K测试集。GSM8K每道题的答案包含完整的解题过程，有助于CoT训练。在GSM8K数据集中，测试数据的正确答案在#### 后面，而且一般为整数。GSM8K数据集的测试集共1319条。</p><h3 id="math">MATH</h3><blockquote><p>访问网址：<ahref="https://huggingface.co/datasets/lighteval/MATH/viewer">https://huggingface.co/datasets/lighteval/MATH/viewer</a></p></blockquote><p>MATH数据集为大模型数学能力评测常见的benchmark之一，是一个包含12500个高中数学竞赛的问题（7500个用于训练，5000个用于测试）的数据集，以文本模式的Latex格式呈现。MATH中的每个问题都有一个完整的逐步解决方案，有助于CoT训练。</p><p>MATH数据集的最终答案用包围起来，答案表述一般比较多变，形式多样，有分数，根式，多项式，整数，小数等等。在其官网Github项目hendrycks/math 中，提供了用于判断两个最终答案是否相等的代码脚本math_equivalence.py ，网址为：<ahref="https://github.com/hendrycks/math/blob/main/modeling/math_equivalence.py">https://github.com/hendrycks/math/blob/main/modeling/math_equivalence.py</a>.</p><h3 id="ape210k">Ape210K</h3><blockquote><p>访问网址：<ahref="https://github.com/Chenny0808/ape210k">https://github.com/Chenny0808/ape210k</a></p></blockquote><p>Ape210K数据集由猿辅导开源共享，它是一个新的大规模和模板丰富的MathWordProblem（MWP）数据集，包含210,488个（约210K）中国小学水平的数学问题。每个问题都包含最佳答案和得出答案所需的方程式。</p><p>数据集分布如下：</p><div style="text-align: center;"><pre><code>&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132342339.png&quot;&gt;&lt;br&gt;Ape210K数据集分布</code></pre></div><p>样例数据如下：</p><div style="text-align: center;"><pre><code>&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132342822.png&quot;&gt;&lt;br&gt;样例数据</code></pre></div><h3 id="tal-scq5k">TAL-SCQ5K</h3><blockquote><p>访问网址：<ahref="https://huggingface.co/datasets/math-eval/TAL-SCQ5K">https://huggingface.co/datasets/math-eval/TAL-SCQ5K</a></p></blockquote><p>TAL-SCQ5K-EN/TAL-SCQ5K-CN是好未来教育集团打造的高质量中英文数学竞赛数据集，每个数据集包含 5K道题目（3K 道训练题和 2K道测试题），题目为多项选择题，涵盖小学、初中、高中阶段的数学主题。此外，数据集还提供了详细的解答步骤以方便CoT 训练，题目中的所有数学表达式均以标准文本模式 Latex 呈现。</p><p>样例数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dataset_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prime_math_competition_en_single_choice_8K_dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dataset_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-07-07&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;qid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;244&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;queId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8afc802a8c304199b1040f11ffa2e92a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;competition_source_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;qtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;single_choice&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;problem&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A $14$-digit. number $666666 XY 444444$ is a multiple of $26$. If $X$ and $Y$ are both positive, what is the smallest vaue of $X+ Y$? &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;answer_option_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;aoVal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$3$$ &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;aoVal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$4$$ &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;aoVal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$9$$ &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;aoVal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$14$$ &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;aoVal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None of the above &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;knowledge_point_routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Overseas Competition-&gt;Knowledge Point-&gt;Number Theory Modules-&gt;Division without Remainders-&gt;Divisibility Rules&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;answer_analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Since $1001$ is a multiple of $13$, $111111 = 111 \\times 1001$ is also a multiple of $13$.  It follows that both $666666$ and $444444$ are both multiples of $26$.  $666666XY 444444 = 66666600000000 + XY 000000 + 444444$  $\\Rightarrow XY$ must be divisible by $13$.  Smallest $X+Y=1+3=4$. &quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;answer_value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="math23k">Math23K</h3><blockquote><p>访问网址：<ahref="https://paperswithcode.com/dataset/math23k">https://paperswithcode.com/dataset/math23k</a></p></blockquote><p>Math23K数据集是一个为解决数学应用题而创建的数据集，包含从互联网上爬取的23,162 道中文数学问题。</p><p>该数据集最初是在论文 <strong>Deep Neural Solver for Math WordProblems</strong>中引入的。原始文件最初分为训练/测试数据集，而其它研究工作（https://github.com/2003pro/Graph2Tree）执行训练/验证/测试数据集分割。</p><p>样例数据：</p><div style="text-align: center;"><pre><code>&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412131110629.jpeg&quot;&gt;&lt;br&gt;Math23K数据集样例数据</code></pre></div><h3 id="chinese_aaai_math">chinese_AAAI_Math</h3><blockquote><p>访问网址: <ahref="https://huggingface.co/datasets/YaHi/chinese_AAAI_Math">https://huggingface.co/datasets/YaHi/chinese_AAAI_Math</a></p></blockquote><p>与之相关的网站：https://ai4ed.cc/competitions/aaai2024competition，关于该竞赛的描述，可以参考上述给出的官网。该竞赛将给我们带来全新的体验，让我们在领略数学的乐趣的同时，领略人工智能的强大威力，共同见证人工智能（AI）如何以新的方式解决挑战性问题，为未来开辟新道路。</p><h3 id="mathpile">MathPile</h3><blockquote><p>访问网址：<ahref="https://gair-nlp.github.io/MathPile/">https://gair-nlp.github.io/MathPile/</a></p></blockquote><p>上海交通大学的人工智能实验室（GAIR）发布了一项重要的贡献，推出了名为"MathPile"的专门预训练语料库，旨在增强大规模模型在数学推理方面的能力。这个庞大的数据集包含95亿个标记，来源于各种数学内容，包括教科书、学术论文和在线资源如StackExchange。MathPile的独特之处在于其对数据质量的精心筛选，确保输入到人工智能模型中的数据具有高质量，以促进更准确和复杂的数学问题解决能力。MathPile的开源性质以及商业可用性标志着人工智能社区的一个显著进展，可能会导致更智能的系统，能够协助处理复杂的数学任务。</p><p>MathPile 具备以下几个特点：</p><div style="text-align: center;"><pre><code>&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132339846.png&quot;&gt;&lt;br&gt;Ape210K数据集分布</code></pre></div><h3 id="superclue-math6">SuperCLUE-Math6</h3><blockquote><p>访问网址：<ahref="https://github.com/CLUEbenchmark/SuperCLUE-Math6">https://github.com/CLUEbenchmark/SuperCLUE-Math6</a></p></blockquote><p>SuperCLUE-Math6数据集是一个GSM8K的中文升级版，专门设计来测试中文大模型在数学推理方面的核心能力。SuperCLUE-Math6不仅延续了GSM8K的高质量和多样性，更在难度和应用广度上进行了适当的扩充。它的推出，旨在解决中文模型评估中的关键问题，并提供一个全面的测试平台。</p><h2 id="测评">测评</h2><h3 id="gsm8k数据集测评">GSM8K数据集测评</h3><p>测评项目如下：</p><ol type="1"><li>gsm8k_eval.ipynb: <ahref="https://colab.research.google.com/github/google-deepmind/gemma/blob/main/colabs/gsm8k_eval.ipynb#scrollTo=kRShUtLfEXiq">https://colab.research.google.com/github/google-deepmind/gemma/blob/main/colabs/gsm8k_eval.ipynb#scrollTo=kRShUtLfEXiq</a></li><li>GSM8K-eval: <ahref="https://github.com/Guangxuan-Xiao/GSM8K-eval">https://github.com/Guangxuan-Xiao/GSM8K-eval</a></li></ol><h3 id="math数据集测评">MATH数据集测评</h3><p>测评项目如下：</p><ol type="1"><li>hendrycks/math: <ahref="https://github.com/hendrycks/math?tab=readme-ov-file">https://github.com/hendrycks/math?tab=readme-ov-file</a></li></ol><h3 id="opencompass司南">OpenCompass（司南）</h3><p>OpenCompass（思南）是由上海人工智能实验室提供的一个大模型评估平台，提供了全面、丰富、便利的大模型评估工具，包含了各个主体、各个维度的模型评估，是国内比较权威可信的大模型评估平台。</p><p>OpenCompass提供了数学主题评估，访问网址为：<ahref="https://hub.opencompass.org.cn/topic/12">https://hub.opencompass.org.cn/topic/12</a>.</p><h3 id="matheval">MathEval</h3><blockquote><p>访问网址：<a href="https://matheval.ai/">https://matheval.ai/</a></p></blockquote><p>MathEval是一个专注于全面评估大模型数学能力的测评基准。共包含20个数学领域测评集和近30K道数学题目，旨在全面评估大模型在包含算术，小初高竞赛和部分高等数学分支在内的各阶段、难度和数学子领域的解题能力表现，既可以作为现阶段大模型之间数学能力横向对比的一站式参考，也可以为后续如何进一步提高大模型数学能力指引方向。</p><p>MathEval平台由智慧教育、北京师范大学、暨南大学、华东师范大学、西安交通大学、香港城市大学等单位共同开发。</p><h2 id="模型">模型</h2><h3 id="llemma">Llemma</h3><blockquote><p>访问网址：<ahref="https://blog.eleuther.ai/llemma/">https://blog.eleuther.ai/llemma/</a></p></blockquote><p>LLEMMA模型是专门解决数学问题的开源大语言模型。它由多个大学和EleutherAI公司共同研发，模型能够理解和生成数学表达式、解决数学问题，并与其他计算工具（如Python解释器和形式定理证明器）进行交互。</p><p>该模型基于CodeLlama进行构建，在多个数学问题解决基准测试上，LLEMMA都表现出色，超过了所有已知的开放基础模型。</p><p>LLEMMA模型是在Proof-Pile-2（一个包含550亿标记的数学和科学文档数据集）上进行预训练的，该数据集包括科学论文、与数学相关的网页数据和数学代码。</p><p>LLEMMA训练并发布了两个模型：Llemma 34B和Llemma 7B。LLEMMA7B模型在200B个令牌上进行了训练，而LLEMMA34B模型在50B个令牌上进行了训练。</p><h3 id="internlm2-math">InternLM2-Math</h3><blockquote><p>访问网址：<ahref="https://github.com/InternLM/InternLM-Math">https://github.com/InternLM/InternLM-Math</a></p></blockquote><p>2024年1月23日，上海人工智能实验室（上海AI实验室）开源发布新一代数学模型书生·浦语数学（InternLM2-Math）。基于书生·浦语2.0（InternLM2）强大的基础能力，InternLM2-Math仅以中轻量级参数规模，即在多项数学评测中刷新开源模型数学能力上限；此外，InternLM2-Math不仅会“解题”，更会“判题”，突破了传统数学大模型应用局限，将为数学基础研究和教学提供优质应用基座。</p><p>InternLM2-Math为首个同时支持形式化数学语言及解题过程评价的开源模型，以强大内生计算和推理能力，为技术社区提供强大数学工具和模型范式。秉持“以高质量开源赋能创新”的理念，InternLM2-Math代码和模型完全开源，并支持免费商用。</p><p><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132337484.png" /></p><h3 id="deepseek-coder-v2">DeepSeek-Coder-V2</h3><blockquote><p>访问网址：<ahref="https://github.com/deepseek-ai/DeepSeek-Coder-V2">https://github.com/deepseek-ai/DeepSeek-Coder-V2</a></p></blockquote><p>DeepSeek-Coder-V2模型是一个开源的代码语言模型，专为代码生成、代码补全、代码修复以及数学推理等任务而设计。该模型通过在大量高质量的多源语料库上进一步训练，显著提升了其在代码生成和数学推理方面的能力，同时在一般语言任务中的表现也保持在同等水平。DeepSeek-Coder-V2支持 338 种编程语言并将上下文长度从 16K 扩展到 128K。该模型分为 16B 和236B 参数版本，且在多项基准测试中表现优越，甚至在某些任务上超越了如GPT4-Turbo 等闭源模型。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132341321.png"alt="image-20241213234133177" /><figcaption aria-hidden="true">image-20241213234133177</figcaption></figure><h3 id="step-dpo">Step-DPO</h3><blockquote><p>访问网址：<ahref="https://github.com/dvlab-research/Step-DPO">https://github.com/dvlab-research/Step-DPO</a></p></blockquote><p>Step-DPO是一种用于增强大规模语言模型（LLMs）长链推理能力的简单、有效且数据高效的方法。它通过构建包含10K步骤偏好对的高质量数据集来实现这一目的。在有限的数据和训练步骤下，Step-DPO显著提升了模型在MATH和GSM8K上的表现。</p><p>Step-DPO模型由香港中文大学的贾佳亚团队提出。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412132339508.png"alt="image-20241213233910698" /><figcaption aria-hidden="true">image-20241213233910698</figcaption></figure><p>在线Demo网址：<ahref="http://103.170.5.190:7870/">http://103.170.5.190:7870/</a></p><h3 id="其它模型">其它模型</h3><p>其它专门为解决数学问题的大模型还有：</p><ul><li>九章大模型（MathGPT）：由<code>好未来</code>开发</li><li>WizardMath：由<code>微软</code>开发</li><li>GAIRMath-Abel：由<code>上海交大生成式人工智能研究组 (GAIR)</code>开发</li><li>...</li></ul><h2 id="论文及工具">论文及工具</h2><ol type="1"><li>论文：<strong>Large Language Models for Mathematical Reasoning:Progresses andChallenges</strong>，大模型数学推理能力的进展及挑战调研，网址为：<ahref="https://arxiv.org/abs/2402.00157">https://arxiv.org/abs/2402.00157</a></li><li>论文：<strong>構建一個中文國小數學文字問題語料庫(Building a Corpusfor Developing the Chinese Elementary School Math Word ProblemSolver)</strong>，台湾地区一篇关于中小学数学问题（Math WordProblem）语料库构建的论文，数据集未公开，网址为：<ahref="https://aclanthology.org/O16-1031.pdf">https://aclanthology.org/O16-1031.pdf</a></li><li>工具：<strong>Metamath Home Page</strong>，Metamath是一种简单、灵活的计算机可处理语言，支持严格验证、存档和呈现数学证明。网址为：<ahref="https://us.metamath.org/">https://us.metamath.org/</a></li><li>工具：<strong>Interpretable Geometry Problem Solving with FormalLanguage and Symbolic Reasoning</strong>，使用符号语言（InterpretableGeometry Problem Solver,Inter-GPS）进行几何问题推理，共3,002个几何问题。网址为：<ahref="https://lupantech.github.io/inter-gps/">https://lupantech.github.io/inter-gps/</a></li><li>工具：<strong>SigmaDolphin</strong>，Automated Math Word ProblemSolving，网址为：<ahref="https://www.microsoft.com/en-us/research/project/sigmadolphin/overview/">https://www.microsoft.com/en-us/research/project/sigmadolphin/overview/</a></li><li>工具：<strong>Asymptote</strong>，一种用于描述几何问题的编程语言，网址为：<ahref="https://artofproblemsolving.com/wiki/index.php/Asymptote:_Basics">https://artofproblemsolving.com/wiki/index.php/Asymptote:_Basics</a></li><li>工具：<strong>Algebra Homework Help -- People'sMath!</strong>，代数学习题网站，网址为：<ahref="https://www.algebra.com/">https://www.algebra.com/</a></li><li>工具：<strong>WolframAlphaMathematics</strong>，WolframAlpha开发的解决特定类型的数学问题的网站，网址为：<ahref="https://www.wolframalpha.com/examples/mathematics">https://www.wolframalpha.com/examples/mathematics</a></li><li>工具:<strong>autogen_agentchat_MathChat.ipynb</strong>，微软开发的Agent框架Autogen，给出的一个用于解决数学习题的Agent例子，网址为：<ahref="https://github.com/microsoft/FLAML/blob/main/notebook/autogen_agentchat_MathChat.ipynb">https://github.com/microsoft/FLAML/blob/main/notebook/autogen_agentchat_MathChat.ipynb</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大模型数学解题能力数据集&quot;&gt;大模型数学解题能力—数据集&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文将会介绍笔者近段时间来在大模型数学解题能力方面的调研工作，包括数据集、论文、实践项目、开源平台等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者从今年五</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/13/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/Fastchat%EF%BC%9A%E5%9F%BA%E4%BA%8Efastapi%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1/"/>
    <id>https://luyicui.github.io/2024/12/13/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/Fastchat%EF%BC%9A%E5%9F%BA%E4%BA%8Efastapi%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1/</id>
    <published>2024-12-13T08:24:29.282Z</published>
    <updated>2024-12-13T09:25:07.874Z</updated>
    
    <content type="html"><![CDATA[<h1id="fastchat基于fastapi构建大模型加载服务">Fastchat：基于fastapi构建大模型加载服务</h1><h2 id="fastchat-服务架构">FastChat 服务架构</h2><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/6aa99a6914e7bd37b4e75666fc4cb44d.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><h2 id="安装">安装</h2><h3 id="方法一pip">方法一：pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install &quot;fschat[model_worker,webui]&quot;</span><br></pre></td></tr></table></figure><h3 id="方法二源文件">方法二：源文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lm-sys/FastChat.git</span><br><span class="line">cd FastChat</span><br></pre></td></tr></table></figure><p><strong>Mac 上运行：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rust cmake</span><br></pre></td></tr></table></figure><p><strong>从源文件安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip  # enable PEP 660 support</span><br><span class="line">pip3 install -e &quot;.[model_worker,webui]&quot;</span><br></pre></td></tr></table></figure><h2 id="加载大模型推理">加载大模型推理</h2><h3 id="命令行">命令行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.3</span><br></pre></td></tr></table></figure><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/23a8e8349495a2d3566c0de38c12a479.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><p><strong>关键参数汇总:</strong></p><table><colgroup><col style="width: 50%" /><col style="width: 50%" /></colgroup><thead><tr class="header"><th>参数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>–model-path</td><td>模型路径,可以是本地文件夹或HuggingFace的repo ID</td></tr><tr class="even"><td>–revision</td><td>HuggingFace Hub模型修订版本标识</td></tr><tr class="odd"><td>–device</td><td>设备类型,可选择cpu/cuda/mps/xpu</td></tr><tr class="even"><td>–gpus</td><td>指定单个或多个GPU,如1或0,2</td></tr><tr class="odd"><td>–num-gpus</td><td>GPU数量</td></tr><tr class="even"><td>–max-gpu-memory</td><td>每个GPU用于存储模型权重的最大内存,使用字符串表示如’13Gib’</td></tr><tr class="odd"><td>–load-8bit</td><td>使用8位量化</td></tr><tr class="even"><td>–cpu-offloading</td><td>仅用于8位量化:将超出GPU容量的权重卸载到CPU</td></tr><tr class="odd"><td>–gptq-ckpt</td><td>GPTQ检查点路径,用于GPTQ量化</td></tr><tr class="even"><td>–gptq-wbits</td><td>GPTQ量化比特数,可选择2/3/4/8/16</td></tr><tr class="odd"><td>–gptq-groupsize</td><td>GPTQ量化分组大小,默认为整行</td></tr><tr class="even"><td>–gptq-act-order</td><td>是否应用GPTQ激活顺序启发式方法</td></tr><tr class="odd"><td>–awq-ckpt</td><td>AWQ检查点路径,用于AWQ量化</td></tr><tr class="even"><td>–awq-wbits</td><td>AWQ量化比特数,可选择4/16</td></tr><tr class="odd"><td>–awq-groupsize</td><td>AWQ量化分组大小,默认为整行</td></tr><tr class="even"><td>–conv-template</td><td>对话提示模板</td></tr><tr class="odd"><td>–conv-system-msg</td><td>对话系统消息</td></tr><tr class="even"><td>–temperature</td><td>温度参数</td></tr><tr class="odd"><td>–repetition_penalty</td><td>重复惩罚参数</td></tr><tr class="even"><td>–max-new-tokens</td><td>最大新生成词元数量</td></tr><tr class="odd"><td>–no-history</td><td>不保留历史记录</td></tr><tr class="even"><td>–style</td><td>显示样式,可选择simple/rich/programmatic</td></tr><tr class="odd"><td>–multiline</td><td>启用多行输入</td></tr><tr class="even"><td>–mouse</td><td>启用鼠标支持光标定位(仅限rich样式)</td></tr><tr class="odd"><td>–judge-sent-end</td><td>是否启用识别句子结束的逻辑纠正</td></tr><tr class="even"><td>–debug</td><td>打印调试信息(如prompt)</td></tr></tbody></table><h3 id="web">Web</h3><blockquote><p>要使用 Web UI 提供服务，您需要三个主要<ahref="https://edu.csdn.net/cloud/houjie?utm_source=highword&amp;spm=1001.2101.3001.7020">组件</a>：</p><ol type="1"><li><p>与用户交互的 <ahref="https://so.csdn.net/so/search?q=Web%20%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;spm=1001.2101.3001.7020">Web服务器</a></p></li><li><p>托管一个或多个<ahref="https://edu.csdn.net/cloud/ml_summit?utm_source=glcblog&amp;spm=1001.2101.3001.7020">模型</a>的模型工作人员</p></li><li><p>协调网络<ahref="https://so.csdn.net/so/search?q=%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;spm=1001.2101.3001.7020">服务器</a>和模型工作人员的控制器。</p></li></ol></blockquote><h4 id="启动控制器">启动控制器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.controller</span><br></pre></td></tr></table></figure><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/de590aa83fa44e2431bdc330629d81fc.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><h4 id="启动模型工作">启动模型工作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.model_worker --model-path lmsys/vicuna-7b-v1.3</span><br></pre></td></tr></table></figure><p>等到进程完成加载模型，您会看到“Uvicorn running on…”。模型工作者将自己注册到控制器。</p><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/0a0ee7fb08927755da11b07669b2e105.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><blockquote><p>测试模型是否注册到控制器，成功会有一个简短的输出</p><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/baac83a7d40cc96410f7e8c0d3319922.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure></blockquote><h4 id="启动-gradio-web-服务器">启动 Gradio Web 服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.gradio_web_server</span><br></pre></td></tr></table></figure><blockquote><p>这是用户将与之交互的<ahref="https://edu.csdn.net/cloud/pm_summit?utm_source=blogglc&amp;spm=1001.2101.3001.7020">用户界面</a>。</p></blockquote><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/087b935e629a2f6a2863b05970223c19.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><blockquote><p>打开 http://0.0.0.0:7860 ，可以看到交互界面</p></blockquote><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/9f8ff489dd005c991cfd6350bdc888dd.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><h4 id="注册多个模型">注册多个模型</h4><blockquote><p>您可以将多个模型工作人员注册到单个控制器，该控制器可用于为具有更高吞吐量的单个模型提供服务或同时为多个模型提供服务。执行此操作时，请为不同的模型工作人员分配不同的GPU 和端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker 0</span></span><br><span class="line">CUDA_VISIBLE_DEVICES=0 python3 -m fastchat.serve.model_worker --model-path lmsys/vicuna-7b-v1.3 --controller http://localhost:21001 --port 31000 --worker http://localhost:31000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker 1</span></span><br><span class="line">CUDA_VISIBLE_DEVICES=1 python3 -m fastchat.serve.model_worker --model-path lmsys/fastchat-t5-3b-v1.0 --controller http://localhost:21001 --port 31001 --worker http://localhost:31001</span><br></pre></td></tr></table></figure><blockquote><ul><li>您还可以启动多选项卡 gradio 服务器，其中包括 Chatbot Arena选项卡。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.gradio_web_server_multi</span><br></pre></td></tr></table></figure><h3 id="兼容-openai-的-restful-api">3.兼容 OpenAI 的 RESTful API</h3><h2 id="restful-api-服务器">RESTful API 服务器</h2><ol type="1"><li>启动控制器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.controller</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>启动模型加载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.model_worker --model-path /mnt/code/LLM_Service/model/Baichuan-13b-Chat </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多卡运行</span></span><br><span class="line">python3 -m fastchat.serve.model_worker --model-path my_model_path --num-gpus 4 --max-gpu-memory &quot;20GiB&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CUDA_VISIBLE_DEVICES=0,1,2,3 --gpus <span class="string">&quot;0,1,2,3&quot;</span>这几个参数多卡没有效果，必须加--max-gpu-memory</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>启动 RESTful API 服务器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.openai_api_server --host localhost --port 8000</span><br></pre></td></tr></table></figure><ul><li>安装openai-python：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade openai</span><br></pre></td></tr></table></figure><p>通过ChatOpenAI接口调用模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> LLMChain</span><br><span class="line"><span class="keyword">from</span> langchain.prompts.chat <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    HumanMessagePromptTemplate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">api_base_url = <span class="string">&quot;http://192.168.175.6:8000/v1&quot;</span> </span><br><span class="line">api_key= <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">LLM_MODEL = <span class="string">&quot;Baichuan-13b-Chat&quot;</span></span><br><span class="line">model = ChatOpenAI(</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># callbacks=[callback],</span></span><br><span class="line">    openai_api_key=api_key,</span><br><span class="line">    openai_api_base=api_base_url,</span><br><span class="line">    model_name=LLM_MODEL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">human_prompt = <span class="string">&quot;&#123;input&#125;&quot;</span></span><br><span class="line">human_message_template = HumanMessagePromptTemplate.from_template(human_prompt)</span><br><span class="line"></span><br><span class="line">chat_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;我们来玩成语接龙，我先来，生龙活虎&quot;</span>),</span><br><span class="line">     (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;虎头虎脑&quot;</span>),</span><br><span class="line">     (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chain = LLMChain(prompt=chat_prompt, llm=model, verbose=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(chain(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;恼羞成怒&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/8189e1873a1c14001a34e0a907d0c248.png"alt="请添加图片描述" /><figcaption aria-hidden="true">请添加图片描述</figcaption></figure><blockquote><p>如果您想在同一台机器上、同一进程中运行多个模型，可以将<code>model_worker</code>上述步骤替换为多模型变体：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.multi_model_worker \</span><br><span class="line">    --model-path lmsys/vicuna-7b-v1.3 \</span><br><span class="line">    --model-names vicuna-7b-v1.3 \</span><br><span class="line">    --model-path lmsys/longchat-7b-16k \</span><br><span class="line">    --model-names longchat-7b-16k</span><br></pre></td></tr></table></figure><h2 id="本地gpu微调">本地GPU微调</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -e &quot;.[train]&quot;</span><br></pre></td></tr></table></figure><h3 id="微调">微调</h3><blockquote><p>您可以使用以下命令使用 4 x A100 (40GB) 训练Vicuna-7B。<code>--model_name_or_path</code>使用 LLaMA权重的实际路径和<code>--data_path</code>数据的实际路径进行更新。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">torchrun --nproc_per_node=4 --master_port=20001 fastchat/train/train_mem.py \</span><br><span class="line">    --model_name_or_path ~/model_weights/llama-7b  \</span><br><span class="line">    --data_path data/dummy_conversation.json \</span><br><span class="line">    --bf16 True \</span><br><span class="line">    --output_dir output_vicuna \</span><br><span class="line">    --num_train_epochs 3 \</span><br><span class="line">    --per_device_train_batch_size 2 \</span><br><span class="line">    --per_device_eval_batch_size 2 \</span><br><span class="line">    --gradient_accumulation_steps 16 \</span><br><span class="line">    --evaluation_strategy &quot;no&quot; \</span><br><span class="line">    --save_strategy &quot;steps&quot; \</span><br><span class="line">    --save_steps 1200 \</span><br><span class="line">    --save_total_limit 10 \</span><br><span class="line">    --learning_rate 2e-5 \</span><br><span class="line">    --weight_decay 0. \</span><br><span class="line">    --warmup_ratio 0.03 \</span><br><span class="line">    --lr_scheduler_type &quot;cosine&quot; \</span><br><span class="line">    --logging_steps 1 \</span><br><span class="line">    --fsdp &quot;full_shard auto_wrap&quot; \</span><br><span class="line">    --fsdp_transformer_layer_cls_to_wrap &#x27;LlamaDecoderLayer&#x27; \</span><br><span class="line">    --tf32 True \</span><br><span class="line">    --model_max_length 2048 \</span><br><span class="line">    --gradient_checkpointing True \</span><br><span class="line">    --lazy_preprocess True</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;fastchat基于fastapi构建大模型加载服务&quot;&gt;Fastchat：基于fastapi构建大模型加载服务&lt;/h1&gt;
&lt;h2 id=&quot;fastchat-服务架构&quot;&gt;FastChat 服务架构&lt;/h2&gt;
&lt;figure&gt;
&lt;img
src=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/</id>
    <published>2024-12-06T14:39:44.085Z</published>
    <updated>2024-12-06T14:39:44.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="获取json-web-tokenjwt">1. 获取Json Web Token（JWT）</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>: 密码</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li><li><code>refresh</code>: 刷新令牌，有效期14天</li></ul></li></ul><h2 id="刷新jwt令牌">2. 刷新JWT令牌</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/refresh/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>refresh</code>: 刷新令牌</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li></ul></li></ul><h2 id="获取用户列表">3. 获取用户列表</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/userlist/</li><li>方法：<code>GET</code></li><li>是否验证jwt：否</li><li>输入参数：无</li><li>返回结果：返回10个用户的信息</li></ul><h2 id="获取某个用户的信息">4. 获取某个用户的信息</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/getinfo/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的信息</li></ul><h2 id="获取某个用户的所有帖子">5. 获取某个用户的所有帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的所有帖子</li></ul><h2 id="创建一个帖子">6. 创建一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>content</code>：帖子的内容</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="删除一个帖子">7. 删除一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>DELETE</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>post_id</code>：被删除帖子的ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="更改关注状态">8. 更改关注状态</h2><p>如果未关注，则关注；如果已关注，则取消关注。</p><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/follow/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>target_id</code>: 被关注的用户ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="注册账号">9. 注册账号</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/user/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>：密码</li><li><code>password_confirm</code>：确认密码</li></ul></li><li>返回结果：<ul><li><code>result: success</code></li><li><code>result: 用户名和密码不能为空</code></li><li><code>result: 两个密码不一致</code></li><li><code>result: 用户名已存在</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;获取json-web-tokenjwt&quot;&gt;1. 获取Json Web Token（JWT）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;地址：h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2024-12-06T14:39:44.071Z</published>
    <updated>2024-12-06T14:39:44.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="script部分">script部分</h2><p><code>export default</code>对象的属性：</p><ul><li><code>name</code>：组件的名称</li><li><code>components</code>：存储<code>&lt;template&gt;</code>中用到的所有组件</li><li><code>props</code>：存储父组件传递给子组件的数据</li><li><code>watch()</code>：当某个数据发生变化时触发</li><li><code>computed</code>：动态计算某个数据</li><li><code>setup(props, context)</code>：初始化变量、函数<ul><li><code>ref</code>定义变量，可以用<code>.value</code>属性重新赋值</li><li><code>reactive</code>定义对象，不可重新赋值</li><li><code>props</code>存储父组件传递过来的数据</li><li><code>context.emit()</code>：触发父组件绑定的函数</li></ul></li></ul><h2 id="template部分">template部分</h2><ul><li><code>&lt;slot&gt;&lt;/slot&gt;</code>：存放父组件传过来的<code>children</code>。</li><li><code>v-on:click</code>或<code>@click</code>属性：绑定事件</li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>属性：判断</li><li><code>v-for</code>属性：循环，<code>:key</code>循环的每个元素需要有唯一的<code>key</code></li><li><code>v-bind:</code>或<code>:</code>：绑定属性</li></ul><h2 id="style部分">style部分</h2><ul><li><code>&lt;style&gt;</code>标签添加`属性后，不同组件间的css不会相互影响。</li></ul><h2 id="第三方组件">第三方组件</h2><ul><li><code>view-router</code>包：实现路由功能。</li><li><code>vuex</code>：存储全局状态，全局唯一。<ul><li><code>state</code>:存储所有数据，可以用<code>modules</code>属性划分成若干模块</li><li><code>getters</code>：根据<code>state</code>中的值计算新的值</li><li><code>mutations</code>：所有对<code>state</code>的修改操作都需要定义在这里，不支持异步，可以通过<code>$store.commit()</code>触发</li><li><code>actions</code>：定义对<code>state</code>的复杂修改操作，支持异步，可以通过<code>$store.dispatch()</code>触发。注意不能直接修改<code>state</code>，只能通过<code>mutations</code>修改<code>state</code>。</li><li><code>modules</code>：定义<code>state</code>的子模块</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;script部分&quot;&gt;script部分&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;export default&lt;/code&gt;对象的属性：&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2024-12-06T14:39:44.059Z</published>
    <updated>2024-12-06T14:39:44.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><p><a href="https://vuejs.org/">Vue官网</a></p><h2 id="终端">终端</h2><p><code>Linux</code>和<code>Mac</code>上可以用自带的终端。</p><p><code>Windows</code>上推荐用<code>powershell</code>或者<code>cmd</code>。<code>Git Bash</code>有些指令不兼容。</p><h2 id="安装nodejs">安装<code>Nodejs</code></h2><p><a href="https://nodejs.org/en/">安装地址</a></p><h2 id="安装vuecli">安装<code>@vue/cli</code></h2><p>打开<code>Git Bash</code>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>如果执行后面的操作有bug，可能是最新版有问题，可以尝试安装早期版本，比如：<code>npm i -g @vue/cli@4</code></p><h2id="启动vue自带的图形化项目管理界面">启动<code>vue</code>自带的图形化项目管理界面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>常见问题1：Windows上运行<code>vue</code>，提示无法加载文件，表示用户权限不足。</p><p>解决方案：用管理员身份打开终端，输入<code>set-ExecutionPolicy RemoteSigned</code>，然后输入<code>y</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;终端&quot;&gt;终端&lt;/h2&gt;
&lt;p&gt;&lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.7%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.7%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2024-12-06T14:39:32.353Z</published>
    <updated>2024-12-06T14:39:32.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="apilogin">API——login</h2><p>登录</p><p><code>https://app165.acapp.acwing.com.cn/calculator/login/</code></p><ul><li>输入参数：<code>username</code>、<code>password</code></li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示登录成功</li><li><code>result = "用户名或密码不正确"</code>：表示错误信息</li></ul></li></ul><h2 id="apilogout">API——logout</h2><p>退出</p><p><code>https://app165.acapp.acwing.com.cn/calculator/logout/</code></p><ul><li>输入参数：无</li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示退出成功</li></ul></li></ul><h2 id="apiregister">API——register</h2><p>注册</p><p><code>https://app165.acapp.acwing.com.cn/calculator/register/</code></p><ul><li>输入参数：<code>username</code>、<code>password</code>、<code>password_confirm</code></li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示注册成功</li><li><code>result = "用户名和密码不能为空"</code>：表示错误信息</li><li><code>result = "两个密码不一致"</code>：表示错误信息</li><li><code>result = "用户名已存在"</code>：表示错误信息</li></ul></li></ul><h2 id="apiget_status">API——get_status</h2><p>查询登录状态，如果已登录，则返回用户名</p><p><code>https://app165.acapp.acwing.com.cn/calculator/get_status/</code></p><ul><li>输入参数：无</li><li>输出参数：<code>result</code>、<code>username</code><ul><li><code>result = "login"</code>，此时有返回值<code>useranme</code>，表示已登录的用户名</li><li><code>result = "logout"</code>，此时<code>username</code>不存在，表示未登录</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;apilogin&quot;&gt;API——login&lt;/h2&gt;
&lt;p&gt;登录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://app165.a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.6%20Redux/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.6%20Redux/</id>
    <published>2024-12-06T14:39:32.341Z</published>
    <updated>2024-12-06T14:39:32.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><p>redux将所有数据存储到树中，且树是唯一的。</p><h2 id="redux基本概念">Redux基本概念</h2><ul><li><code>store</code>：存储树结构。</li><li><code>state</code>：维护的数据，一般维护成树的结构。</li><li><code>reducer</code>：对<code>state</code>进行更新的函数，每个<code>state</code>绑定一个<code>reducer</code>。传入两个参数：当前<code>state</code>和<code>action</code>，返回新<code>state</code>。</li><li><code>action</code>：一个普通对象，存储<code>reducer</code>的传入参数，一般描述对<code>state</code>的更新类型。</li><li><code>dispatch</code>：传入一个参数<code>action</code>，对整棵<code>state</code>树操作一遍。</li></ul><h2 id="react-redux基本概念">React-Redux基本概念</h2><ul><li><code>Provider</code>组件：用来包裹整个项目，其<code>store</code>属性用来存储<code>redux</code>的<code>store</code>对象。</li><li><code>connect(mapStateToProps, mapDispatchToProps)</code>函数：用来将<code>store</code>与组件关联起来。<ul><li><code>mapStateToProps</code>：每次<code>store</code>中的状态更新后调用一次，用来更新组件中的值。</li><li><code>mapDispatchToProps</code>：组件创建时调用一次，用来将<code>store</code>的<code>dispatch</code>函数传入组件。</li></ul></li></ul><h2 id="安装">安装</h2><ul><li><code>npm i redux react-redux @reduxjs/toolkit</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;redux将所有数据存储到树中，且树是唯一的。&lt;/p&gt;
&lt;h2 id=&quot;redux基本概念&quot;&gt;Redux基本概念&lt;/h2&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.5%20%E8%B7%AF%E7%94%B1/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.5%20%E8%B7%AF%E7%94%B1/</id>
    <published>2024-12-06T14:39:30.872Z</published>
    <updated>2024-12-06T14:39:31.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="web分类">Web分类</h2><ul><li>静态页面：页面里的数据是写死的</li><li>动态页面：页面里的数据是动态填充的<ul><li>后端渲染：数据在后端填充</li><li>前端渲染：数据在前端填充</li></ul></li></ul><h2 id="安装环境">安装环境</h2><ul><li>VSCODE安装插件：<code>Auto Import - ES6, TS, JSX, TSX</code></li><li>安装<code>Route</code>组件：<code>npm i react-router-dom</code></li></ul><h2 id="route组件介绍">Route组件介绍</h2><ul><li><code>BrowserRouter</code>：所有需要路由的组件，都要包裹在<code>BrowserRouter</code>组件内</li><li><code>Link</code>：跳转到某个链接，<code>to</code>属性表示跳转到的链接</li><li><code>Routes</code>：类似于C++中的<code>switch</code>，匹配第一个路径</li><li><code>Route</code>：路由，<code>path</code>属性表示路径，<code>element</code>属性表示路由到的内容</li></ul><h2 id="url中传递参数">URL中传递参数</h2><p>解析URL：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/linux/:chapter_id/:section_id/&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Linux</span> /&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>获取参数，类组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linux</span> extends Component &#123;</span><br><span class="line">    state = &#123;  &#125; </span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this.props.params);</span><br><span class="line">        <span class="keyword">return</span> &lt;h1&gt;Linux&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default (props) =&gt; (</span><br><span class="line">    &lt;Linux</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        params=&#123;useParams()&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>函数组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const Linux = () =&gt; &#123;</span><br><span class="line">    console.log(useParams());</span><br><span class="line">    <span class="keyword">return</span> (&lt;h1&gt;Linux&lt;/h1&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Linux;</span><br></pre></td></tr></table></figure><h2 id="search-params传递参数">Search Params传递参数</h2><p>类组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Django</span> extends Component &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        searchParams: this.props.params[<span class="number">0</span>],  // 获取某个参数</span><br><span class="line">        setSearchParams: this.props.params[<span class="number">1</span>],  // 设置链接中的参数，然后重新渲染当前页面</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleClick = () =&gt; &#123;</span><br><span class="line">        this.state.setSearchParams(&#123;</span><br><span class="line">            name: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">            age: <span class="number">20</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this.state.searchParams.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> &lt;h1 onClick=&#123;this.handleClick&#125;&gt;Django&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default (props) =&gt; (</span><br><span class="line">    &lt;Django</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        params=&#123;useSearchParams()&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>函数组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const Django = () =&gt; &#123;</span><br><span class="line">    let [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line">    console.log(searchParams.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> (&lt;h1&gt;Django&lt;/h1&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Django;</span><br></pre></td></tr></table></figure><h2 id="重定向">重定向</h2><p>使用<code>Navigate</code>组件可以重定向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123; &lt;Navigate replace to=<span class="string">&quot;/404&quot;</span> /&gt; &#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="嵌套路由">嵌套路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/web&quot;</span> element=&#123;&lt;Web /&gt;&#125;&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;a&quot;</span> element=&#123;&lt;h1&gt;a&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;b&quot;</span> element=&#123;&lt;h1&gt;b&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;c&quot;</span> element=&#123;&lt;h1&gt;c&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p>注意：需要在父组件中添加<code>&lt;Outlet /&gt;</code>组件，用来填充子组件的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;web分类&quot;&gt;Web分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;静态页面：页面里的数据是写死的&lt;/li&gt;
&lt;li&gt;动态页面：页面里</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.4%20%E7%BB%84%E5%90%88Components/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.4%20%E7%BB%84%E5%90%88Components/</id>
    <published>2024-12-06T14:39:30.858Z</published>
    <updated>2024-12-06T14:39:31.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="创建boxes组件">5.4.1 创建<code>Boxes</code>组件</h2><p><code>Boxes</code>组件中包含一系列<code>Box</code>组件。</p><h2 id="从上往下传递数据">5.4.2 从上往下传递数据</h2><p>通过<code>this.props</code>属性可以从上到下传递数据。</p><h2 id="传递子节点">5.4.3 传递子节点</h2><p>通过<code>this.props.children</code>属性传递子节点</p><h2 id="从下往上调用函数">5.4.4 从下往上调用函数</h2><p>注意：每个组件的<code>this.state</code>只能在组件内部修改，不能在其他组件内修改。</p><h2 id="每个维护的数据仅能保存在一个this.state中">5.4.5每个维护的数据仅能保存在一个<code>this.state</code>中</h2><ul><li>不要直接修改<code>this.state</code>的值，因为<code>setState</code>函数可能会将修改覆盖掉。</li></ul><h2 id="创建app组件">5.4.6 创建App组件</h2><p>包含：</p><ul><li>导航栏组件</li><li><code>Boxes</code>组件</li></ul><p>注意：</p><ul><li>要将多个组件共用的数据存放到最近公共祖先的<code>this.state</code>中。</li></ul><h2 id="无状态函数组件">5.4.7 无状态函数组件</h2><ul><li>当组件中没有用到<code>this.state</code>时，可以简写为无状态的函数组件。</li><li>函数的传入参数为<code>props</code>对象</li></ul><h2 id="组件的生命周期">5.4.8 组件的生命周期</h2><ul><li><code>Mount</code>周期，执行顺序：<code>constructor() -&gt; render() -&gt; componentDidMount()</code></li><li><code>Update</code>周期，执行顺序：<code>render() -&gt; componentDidUpdate()</code></li><li><code>Unmount</code>周期，执行顺序：<code>componentWillUnmount()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;创建boxes组件&quot;&gt;5.4.1 创建&lt;code&gt;Boxes&lt;/code&gt;组件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Boxes&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.3%20Components/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.3%20Components/</id>
    <published>2024-12-06T14:39:30.845Z</published>
    <updated>2024-12-06T14:39:31.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="创建项目">5.3.1 创建项目</h2><p>创建项目<code>box-app</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-react-app box-app</span><br><span class="line"><span class="built_in">cd</span> box-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>安装<code>bootstrap</code>库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap</span><br></pre></td></tr></table></figure><p><code>bootstrap</code>的引入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="创建component">5.3.2 创建Component</h2><h2 id="创建按钮">5.3.3 创建按钮</h2><p>当子节点数量大于1时，可以用<code>&lt;div&gt;</code>或<code>&lt;React.Fragment&gt;</code>将其括起来。</p><h2 id="内嵌表达式">5.3.4 内嵌表达式</h2><p>JSX中使用<code>&#123;&#125;</code>嵌入表达式。</p><h2 id="设置属性">5.3.5 设置属性</h2><ul><li><code>class -&gt; className</code></li><li>CSS属性：<code>background-color -&gt; backgroundColor</code>，其它属性类似</li></ul><h2 id="数据驱动改变style">5.3.6 数据驱动改变Style</h2><h2 id="渲染列表">5.3.7 渲染列表</h2><ul><li>使用map函数</li><li>每个元素需要具有唯一的<code>key</code>属性，用来帮助React快速找到被修改的DOM元素。</li></ul><h2 id="conditional-rendering">5.3.8 Conditional Rendering</h2><p>利用逻辑表达式的短路原则。</p><ul><li>与表达式中<code>expr1 &amp;&amp; expr2</code>，当<code>expr1</code>为假时返回<code>expr1</code>的值，否则返回<code>expr2</code>的值</li><li>或表达式中<code>expr1 || expr2</code>，当<code>expr1</code>为真时返回<code>expr1</code>的值，否则返回<code>expr2</code>的值</li></ul><h2 id="绑定事件">5.3.9 绑定事件</h2><ul><li>注意妥善处理好绑定事件函数的<code>this</code></li></ul><h2 id="修改state">5.3.10 修改state</h2><ul><li>需要使用<code>this.setState()</code>函数</li><li>每次调用<code>this.setState()</code>函数后，会重新调用<code>this.render()</code>函数，用来修改虚拟DOM树。React只会修改不同步的实际DOM树节点。</li></ul><h2 id="给事件函数添加参数">1.3.11 给事件函数添加参数</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;5.3.1 创建项目&lt;/h2&gt;
&lt;p&gt;创建项目&lt;code&gt;box-app&lt;/code&gt;：&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.2%20ES6%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.2%20ES6%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/</id>
    <published>2024-12-06T14:39:30.830Z</published>
    <updated>2024-12-06T14:39:31.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2id="使用bind函数绑定this取值">使用<code>bind()</code>函数绑定<code>this</code>取值</h2><p>在JavaScript中，函数里的<code>this</code>指向的是执行时的调用者，而非定义时所在的对象。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>,</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> talk = person.<span class="property">talk</span>;</span><br><span class="line"><span class="title function_">talk</span>();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;yxc&#x27;</span>, <span class="attr">talk</span>: ƒ&#125;</span><br><span class="line"><span class="title class_">Window</span></span><br></pre></td></tr></table></figure><p><code>bind()</code>函数，可以绑定<code>this</code>的取值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> talk = person.<span class="property">talk</span>.<span class="title function_">bind</span>(person);</span><br></pre></td></tr></table></figure><h2 id="箭头函数的简写方式">箭头函数的简写方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = x =&gt; x * x;</span><br></pre></td></tr></table></figure><p><strong>箭头函数不重新绑定<code>this</code>的取值</strong></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();  <span class="comment">// 输出Window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();  <span class="comment">// 输出 &#123;talk: f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="对象的解构">对象的解构</h2><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name : nm, age&#125; = person;  <span class="comment">// nm是name的别名</span></span><br></pre></td></tr></table></figure><h2 id="数组和对象的展开">数组和对象的展开</h2><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [...a];  <span class="comment">// b是a的复制</span></span><br><span class="line"><span class="keyword">let</span> c = [...a, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123;...a, ...b, <span class="attr">height</span>: <span class="number">180</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="named-与-default-exports">Named 与 Default exports</h2><ul><li>NamedExport：可以export多个，import的时候需要加大括号，名称需要匹配</li><li>DefaultExport：最多export一个，import的时候不需要加大括号，可以直接定义别名</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2
id=&quot;使用bind函数绑定this取值&quot;&gt;使用&lt;code&gt;bind()&lt;/code&gt;函数绑定&lt;code&gt;this&lt;/code&gt;取值</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2024-12-06T14:39:30.814Z</published>
    <updated>2024-12-06T14:39:32.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><p><a href="https://zh-hans.reactjs.org/">React官网</a></p><p>安装<code>Git Bash</code>（仅限使用Windows的同学，使用Mac和Linux的同学无需安装）</p><p><a href="https://gitforwindows.org/">安装地址</a></p><h2 id="安装nodejs">安装<code>Nodejs</code></h2><p><a href="https://nodejs.org/en/">安装地址</a></p><h2 id="安装create-react-app">安装<code>create-react-app</code></h2><p>打开<code>Git Bash</code>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="安装vscode的插件">安装<code>VSCode</code>的插件</h2><ul><li><code>Simple React Snippets</code></li><li><code>Prettier - Code formatter</code></li></ul><h2 id="创建react-app">创建<code>React App</code></h2><p>在目标目录下打开<code>Git Bash</code>，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app react-app  <span class="comment"># 可以替换为其他app名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> react-app</span><br><span class="line">npm start  <span class="comment"># 启动应用</span></span><br></pre></td></tr></table></figure><h2 id="jsx">JSX</h2><p><code>React</code>中的一种语言，会被<ahref="https://babeljs.io/repl/">Babel</a>编译成标准JavaScript。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/&quot;&gt;React官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;G</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.10%20canvas/"/>
    <id>https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.10%20canvas/</id>
    <published>2024-12-05T01:59:07.023Z</published>
    <updated>2024-12-06T15:41:45.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas">11.10 canvas</h1><p><ahref="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">canvas教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;canvas&quot;&gt;11.10 canvas&lt;/h1&gt;
&lt;p&gt;&lt;a
href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial&quot;&gt;canvas教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.9%20window/"/>
    <id>https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.9%20window/</id>
    <published>2024-12-05T01:59:05.531Z</published>
    <updated>2024-12-06T15:41:38.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window">11.9 window</h1><ul><li><code>window.open("https://www.acwing.com")</code>在新标签栏中打开页面。</li><li><code>location.reload()</code>刷新页面。</li><li><code>location.href = "https://www.acwing.com"</code>：在当前标签栏中打开页面。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;window&quot;&gt;11.9 window&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.open(&quot;https://www.acwing.com&quot;)&lt;/code&gt;在新标签栏中打开页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.reload()&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.8%20WebSocket/"/>
    <id>https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.8%20WebSocket/</id>
    <published>2024-12-05T01:59:05.515Z</published>
    <updated>2024-12-06T15:41:30.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket">11.8 WebSocket</h1><p>与服务器建立全双工连接。</p><p>常用API：</p><ul><li><code>new WebSocket('ws://localhost:8080');</code>：建立ws连接。</li><li><code>send()</code>：向服务器端发送一个字符串。一般用JSON将传入的对象序列化为字符串。</li><li><code>onopen</code>：类似于<code>onclick</code>，当连接建立时触发。</li><li><code>onmessage</code>：当从服务器端接收到消息时触发。</li><li><code>close()</code>：关闭连接。</li><li><code>onclose</code>：当连接关闭后触发。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket&quot;&gt;11.8 WebSocket&lt;/h1&gt;
&lt;p&gt;与服务器建立全双工连接。&lt;/p&gt;
&lt;p&gt;常用API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new WebSocket(&#39;ws://localhost:8080&#39;);&lt;/code&gt;：建立w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.7%20%E6%97%A5%E6%9C%9F/"/>
    <id>https://luyicui.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.7%20%E6%97%A5%E6%9C%9F/</id>
    <published>2024-12-05T01:59:05.500Z</published>
    <updated>2024-12-06T15:41:22.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期">11.7 日期</h1><p>返回值为整数的API，数值为1970-1-1 00:00:00UTC（世界标准时间）到某个时刻所经过的毫秒数：</p><ul><li><code>Date.now()</code>：返回现在时刻。</li><li><code>Date.parse("2022-04-15T15:30:00.000+08:00")</code>：返回北京时间2022年4月15日15:30:00的时刻。</li></ul><p>与<code>Date</code>对象的实例相关的<code>API</code>：</p><ul><li><code>new Date()</code>：返回现在时刻。</li><li><code>new Date("2022-04-15T15:30:00.000+08:00")</code>：返回北京时间2022年4月15日15:30:00的时刻。</li><li>两个<code>Date</code>对象实例的差值为毫秒数</li><li><code>getDay()</code>：返回星期，0表示星期日，1-6表示星期一至星期六</li><li><code>getDate()</code>：返回日，数值为1-31</li><li><code>getMonth()</code>：返回月，数值为0-11</li><li><code>getFullYear()</code>：返回年份</li><li><code>getHours()</code>：返回小时</li><li><code>getMinutes()</code>：返回分钟</li><li><code>getSeconds()</code>：返回秒</li><li><code>getMilliseconds()</code>：返回毫秒</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日期&quot;&gt;11.7 日期&lt;/h1&gt;
&lt;p&gt;返回值为整数的API，数值为1970-1-1 00:00:00
UTC（世界标准时间）到某个时刻所经过的毫秒数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;：返回现在时刻。&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
