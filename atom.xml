<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天道酬勤，厚德载物</title>
  
  
  <link href="https://cuiluyi.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://cuiluyi.gitee.io/"/>
  <updated>2024-01-27T09:02:01.877Z</updated>
  <id>https://cuiluyi.gitee.io/</id>
  
  <author>
    <name>tianchou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>希腊字母表</title>
    <link href="https://cuiluyi.gitee.io/2024/01/27/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%A1%A8/"/>
    <id>https://cuiluyi.gitee.io/2024/01/27/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%A1%A8/</id>
    <published>2024-01-27T09:02:26.000Z</published>
    <updated>2024-01-27T09:02:01.877Z</updated>
    
    <content type="html"><![CDATA[<h1>希腊字母表</h1><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202401271612976.png" alt="GreekAlphabet"></p><p>💝读音：<a href="https://www.bilibili.com/video/BV11b411t7Fn/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=783e918d3ef4b11b94236a4cd8a51f23">50秒完全学会希腊字母读法~高中理科生的福音_哔哩哔哩_bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;希腊字母表&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202401271612976.png&quot; alt=&quot;GreekAlphabet&quot;&gt;&lt;/p&gt;
&lt;p&gt;💝读音：&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="others" scheme="https://cuiluyi.gitee.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://cuiluyi.gitee.io/2024/01/06/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://cuiluyi.gitee.io/2024/01/06/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2024-01-06T10:36:45.000Z</published>
    <updated>2024-01-27T09:00:42.501Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux基础命令</h1><h2 id="windows与linux的区分">windows与linux的区分</h2><ol><li class="lvl-3"><p>linux下<strong>文件名区分大小写</strong>，而windows下<strong>文件名不区分大小写</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">ABC</span><br><span class="line">aBc</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>linux下<strong>路径分隔符</strong>为<code>/</code>，而windows下<strong>路径分隔符</strong>为<code>\</code></p></li></ol><h2 id="Linux的目录结构">Linux的目录结构</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309122142813.png" alt="20221027214128_clear_compress"></p><ul class="lvl-0"><li class="lvl-2"><p><code>/</code>，根目录是最顶级的目录了</p></li><li class="lvl-2"><p>Linux只有一个顶级目录：<code>/</code></p></li><li class="lvl-2"><p>路径描述的层次关系同样适用<code>/</code>来表示</p></li><li class="lvl-2"><p>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</p></li></ul><blockquote><p>/：     根目录，操作系统的启示路径跟路径</p><p>/bin：  可执行二进制文件的目录</p><p>/etc：   系统配置文件存放的目录</p><p>/home：普通用户的家目录</p><p>/root：  管理员家目录</p><p>/dev：  device设备 设备文件存放目录</p><p>/boot： 引导 主引导目录 独立的分区 启动菜单 内核</p><p>/media：光驱的挂载目录</p><p>/mnt：  临时设备挂载目录</p><p>/proc： 里面的数据都在内存中，进程的所有目录</p><p>/tmp：  临时文件存放目录</p><p>/usr：  软件的安装目录</p><p>/var：  常变文件存放目录，如日志文件，邮件文件</p></blockquote><h2 id="lsb-release命令">lsb_release命令</h2><p>功能：查看linux的发行版本信息</p><p>语法：<code> lsb_release -a</code></p><h2 id="ls命令">ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</p></li><li class="lvl-2"><p>-l，以列表形式查看</p></li><li class="lvl-2"><p>-h，配合-l，以更加人性化的方式显示文件大小</p></li><li class="lvl-2"><p>-a，显示隐藏文件</p></li></ul><blockquote><p><strong>隐藏文件/文件夹</strong></p><ul class="lvl-1"><li class="lvl-2"><p>在Linux中以<code>.</code>开头的，均是隐藏的文件/文件夹</p></li><li class="lvl-2"><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p></li></ul></blockquote><h2 id="pwd命令">pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令">cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录">HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul class="lvl-0"><li class="lvl-2"><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li class="lvl-2"><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径">相对路径、绝对路径</h2><ul class="lvl-0"><li class="lvl-2"><p>相对路径，<mark>非</mark><code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li class="lvl-2"><p>绝对路径，<mark>以</mark><code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符">特殊路径符</h2><ul class="lvl-0"><li class="lvl-2"><p><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</p></li><li class="lvl-2"><p><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</p></li><li class="lvl-2"><p><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</p></li></ul><h2 id="mkdir命令">mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被创建文件夹的路径</p></li><li class="lvl-2"><p>选项：-p，可选，表示创建前置路径</p></li></ul><h2 id="touch命令">touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被创建的文件路径</p></li></ul><h2 id="cat命令">cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的文件路径</p></li></ul><h2 id="more命令">more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的文件路径</p></li><li class="lvl-2"><p>在查看过程中：</p><ul class="lvl-2"><li class="lvl-4"><code>空格</code>键翻页</li><li class="lvl-4"><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令">cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数1，被复制的</p></li><li class="lvl-2"><p>参数2，要复制去的地方</p></li><li class="lvl-2"><p>选项：-r，可选，复制文件夹使用</p></li></ul><p>示例：</p><ul class="lvl-0"><li class="lvl-2"><p>cp a.txt b.txt，复制当前目录下a.txt为b.txt</p></li><li class="lvl-2"><p>cp a.txt test/，复制当前目录a.txt到test文件夹内</p></li><li class="lvl-2"><p>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</p></li></ul><h2 id="mv命令">mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数1：被移动的</p></li><li class="lvl-2"><p>参数2：要移动去的地方，参数2如果不存在，则会进行改名</p></li></ul><h2 id="rm命令">rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：支持多个，每一个表示被删除的，空格进行分隔</p></li><li class="lvl-2"><p>选项：-r，删除文件夹使用</p></li><li class="lvl-2"><p>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</p></li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令">which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的命令</p></li></ul><h2 id="find命令">find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>路径，搜索的起始路径</p></li><li class="lvl-2"><p>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</p></li></ul><h2 id="grep命令">grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul class="lvl-0"><li class="lvl-2"><p>选项-n，可选，表示在结果中显示匹配的行的行号。</p></li><li class="lvl-2"><p>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</p></li><li class="lvl-2"><p>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</p></li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令">wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul class="lvl-0"><li class="lvl-2"><p>选项，-c，统计bytes数量</p></li><li class="lvl-2"><p>选项，-m，统计字符数量</p></li><li class="lvl-2"><p>选项，-l，统计行数</p></li><li class="lvl-2"><p>选项，-w，统计单词数量</p></li><li class="lvl-2"><p>参数，文件路径，被统计的文件，可作为内容输入端口</p></li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符">管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令">echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被输出的内容</p></li></ul><h2 id="反引号">`反引号</h2><p>功能：<strong>被两个反引号包围的内容，会作为命令执行</strong></p><p>示例：</p><ul class="lvl-0"><li class="lvl-2"><p>echo `pwd`，会输出当前工作目录</p></li></ul><h2 id="tail命令">tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f -n] 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的文件路径</p></li><li class="lvl-2"><p>选项：-f，持续跟踪文件修改</p></li><li class="lvl-2"><p>选项：-n，表示查看尾部多少行，不填默认10行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 100 filename</span><br></pre></td></tr></table></figure><h2 id="head命令">head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数：被查看的文件</p></li><li class="lvl-2"><p>选项：-n，查看的行数</p></li></ul><h2 id="重定向符">重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul class="lvl-0"><li class="lvl-2"><p><code>&gt;</code>，表示覆盖输出</p></li><li class="lvl-2"><p><code>&gt;&gt;</code>，表示追加输出</p></li></ul><h2 id="nano编辑器">nano编辑器</h2><p><a href="https://blog.csdn.net/fuzhang_android/article/details/87873661?spm=1001.2014.3001.5506">nano简单使用介绍_nano的用法_fuzhang_android的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/WalterBrien/article/details/125836576?spm=1001.2014.3001.5506">nano编辑器的使用_SudekiMing的博客-CSDN博客</a></p><h2 id="vi编辑器">vi编辑器</h2><h3 id="命令模式快捷键">命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键">底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项">命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助">查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册">查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1>Linux常用操作</h1><h2 id="软件安装">软件安装</h2><ul class="lvl-0"><li class="lvl-2"><p>CentOS系统使用：</p><ul class="lvl-2"><li class="lvl-4">yum [install remove search] [-y] 软件名称<ul class="lvl-4"><li class="lvl-6">install 安装</li><li class="lvl-6">remove 卸载</li><li class="lvl-6">search 搜索</li><li class="lvl-6">-y，自动确认</li></ul></li></ul></li><li class="lvl-2"><p>Ubuntu系统使用</p><ul class="lvl-2"><li class="lvl-4">apt [install remove search] [-y] 软件名称<ul class="lvl-4"><li class="lvl-6">install 安装</li><li class="lvl-6">remove 卸载</li><li class="lvl-6">search 搜索</li><li class="lvl-6">-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl">systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul class="lvl-0"><li class="lvl-2"><p>start，启动</p></li><li class="lvl-2"><p>stop，停止</p></li><li class="lvl-2"><p>status，查看状态</p></li><li class="lvl-2"><p>disable，关闭开机自启</p></li><li class="lvl-2"><p>enable，开启开机自启</p></li><li class="lvl-2"><p>restart，重启</p></li></ul><h2 id="软链接">软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul class="lvl-0"><li class="lvl-2"><p>参数1：被链接的</p></li><li class="lvl-2"><p>参数2：要链接去的地方（快捷方式的名称和存放位置）</p></li></ul><h2 id="日期">日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul class="lvl-0"><li class="lvl-2"><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li class="lvl-2"><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul class="lvl-2"><li class="lvl-4">%Y   年%y   年份后两位数字 (00…99)</li><li class="lvl-4">%m   月份 (01…12)</li><li class="lvl-4">%d   日 (01…31)</li><li class="lvl-4">%H   小时 (00…23)</li><li class="lvl-4">%M   分钟 (00…59)</li><li class="lvl-4">%S   秒 (00…60)</li><li class="lvl-4">%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul class="lvl-0"><li class="lvl-2"><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li class="lvl-2"><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li class="lvl-2"><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul class="lvl-2"><li class="lvl-4"><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区">时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp">ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址">ip地址</h2><p>格式：a.b.c.d</p><ul class="lvl-0"><li class="lvl-2"><p>abcd为0~255的数字</p></li></ul><p>特殊IP：</p><ul class="lvl-0"><li class="lvl-2"><p>127.0.0.1，表示本机</p></li><li class="lvl-2"><p>0.0.0.0</p><ul class="lvl-2"><li class="lvl-4">可以表示本机</li><li class="lvl-4">也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名">主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP">配置VMware固定IP</h2><ol><li class="lvl-3"><p>修改VMware网络，参阅PPT，图太多</p></li><li class="lvl-3"><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令">ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><p><strong>举例</strong>：在Linux上，我想查看：用户为ycxie，执行命令为python3的所有进程信息，应使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep <span class="string">&#x27;ycxie.*python3&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="kill命令">kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令">nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令">netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令">ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令">wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309122143891.png" alt="image-20230830233213202"></p><h2 id="curl命令">curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令">top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令">df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令">iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令">sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量">环境变量</h2><ul class="lvl-0"><li class="lvl-2"><p>临时设置：export 变量名=变量值</p></li><li class="lvl-2"><p>永久设置：</p><ul class="lvl-2"><li class="lvl-4">针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li class="lvl-4">针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量">PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号">$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压">压缩解压</h2><h3 id="压缩">压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul class="lvl-0"><li class="lvl-2"><p>-z表示使用gzip，可以不写</p></li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压">解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul class="lvl-0"><li class="lvl-2"><p>-z表示使用gzip，可以省略</p></li><li class="lvl-2"><p>-C，可以省略，指定要解压去的地方，不写解压到当前目录</p></li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="BGP-dump">BGP-dump</h2><ul class="lvl-0"><li class="lvl-4"><p>打开任意终端，输入bgpdump，可查看参数。</p></li><li class="lvl-4"><p>MRT格式的RIB可从route view project官网下载：<a href="http://archive.routeviews.org/">route view project archive</a>。</p></li><li class="lvl-4"><p>常用指令：bgpdump -m xxx.bz2 &gt; output.txt</p></li></ul><h2 id="su命令">su命令</h2><p>切换用户</p><p>语法：<input type="checkbox" id="checkbox0"><label for="checkbox0">[用户]</label></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令">sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令">chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul class="lvl-0"><li class="lvl-2"><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li class="lvl-2"><p>参数，被修改的文件、文件夹</p></li><li class="lvl-2"><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令">chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理">用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理">用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令">genenv命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li class="lvl-2"><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令">env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p><h2 id="python3命令">python3命令</h2><h2 id="nano命令">nano命令</h2><p><a href="https://blog.csdn.net/WalterBrien/article/details/125836576?ops_request_misc=%7B%22request%5Fid%22%3A%22169508811116777224443235%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169508811116777224443235&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125836576-null-null.142%5Ev94%5EchatsearchT3_1&amp;utm_term=nano&amp;spm=1018.2226.3001.4187">nano编辑器的使用_SudekiMing的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/carefree2005/article/details/129042788?ops_request_misc=%7B%22request%5Fid%22%3A%22169508802416800182147582%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=169508802416800182147582&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-3-129042788-null-null.142%5Ev94%5EchatsearchT3_1&amp;utm_term=nano%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187">Linux命令之nano命令_恒悦sunsite的博客-CSDN博客</a></p><h2 id="nohup命令">nohup命令</h2><p><code>nohup python3 -u test.py &gt; nohup.out 2&gt;&amp;1 &amp;</code></p><p><a href="https://blog.csdn.net/jiangyu1013/article/details/81476184?ops_request_misc=%7B%22request%5Fid%22%3A%22169018276616800184180892%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=169018276616800184180892&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-81476184-null-null.142%5Ev90%5Econtrol_2,239%5Ev3%5Einsert_chatgpt&amp;utm_term=nohup%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187">(139条消息) linux 中的 nohup 命令（设置后台进程）： nohup: ignoring input and appending output to ‘nohup.out’_nohup: ignoring input and appending output to 'noh_微风–轻许–的博客-CSDN博客</a></p><h2 id="ping命令-2">ping命令</h2><h2 id="traceroute命令">traceroute命令</h2><ul class="lvl-0"><li class="lvl-4"><p>traceroute的用法为: <code>Traceroute [options] [data size]</code></p></li><li class="lvl-4"><p><code>[options]</code>的内容有:</p></li></ul><p><code>[-n]</code>：显示的地址是用数字表示而不是符号<code>[-v]</code>：长输出<code>[-p]</code>：UDP端口设置（缺省为33434）<code>[-q]</code>：设置TTL测试数目（缺省为3）<code>[-t]</code>：设置测包的服务类型<code>[data size]</code>：每次测试包的数据字节长度（缺省为38）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Linux基础命令&lt;/h1&gt;
&lt;h2 id=&quot;windows与linux的区分&quot;&gt;windows与linux的区分&lt;/h2&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;linux下&lt;strong&gt;文件名区分大小写&lt;/strong&gt;，而windows下&lt;stro</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://cuiluyi.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://cuiluyi.gitee.io/2023/11/26/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://cuiluyi.gitee.io/2023/11/26/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2023-11-26T12:19:27.000Z</published>
    <updated>2024-02-21T11:57:24.900Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><span id="more"></span><h1>Markdown语法</h1><p><strong><mark>参考视频：<a href="https://www.bilibili.com/video/BV1hG411p7fX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=783e918d3ef4b11b94236a4cd8a51f23">Markdown语法讲解</a></mark></strong></p><h2 id="😂-简要介绍">😂 简要介绍</h2><p><strong>Markdown</strong> 是一种轻量型标记语言, 是一种语法. 以 <code>.md</code> 结尾的文本文件就是 Markdown 文件. 相较于 <strong>Word</strong>, 它更加像是 <strong>HTML</strong> 语言或是 $\LaTeX$, 并不是最淳朴的那种&quot;所见即所得&quot;. 它处处透露着一种极简主义. 高效简洁清晰的同时, 又很简单. 看起来舒服, 语法简单, 尤其在处理纯文本上有很大的优势.</p><p>它相较于 <strong>Word</strong>, 兼容性非常高, 可以跨平台使用, 不用担心奇奇怪怪的版本兼容问题. 同时, 有许多网站都支持或正在使用 <strong>Markdown</strong> 语法. 如 <strong>Github</strong> (等一系列代码托管平台), StackOverflow(等答疑平台), 简书, 语雀 (等一系列笔记平台).</p><h2 id="📐-实际应用">📐 实际应用</h2><p>所有要写文本的时候都可以用上 <strong>Markdown</strong>!</p><p>它可以让你不再纠结什么字体, 什么样式, 什么排版. 而且逻辑清晰, 层次分明.</p><p>像我大一的时候就用 Markdown 来写各种笔记, 演讲稿, 课程论文, 实验报告, 代码的 <code>README.md</code> … 包括本教程文档.</p><h2 id="🍴-工具">🍴 工具</h2><p>Markdown 只是一种语法. 那么用来写 Markdown 的文本编辑器呢? 我推荐的是 <strong>Typora</strong> 或者 <strong>VS Code</strong></p><h3 id="Typora">Typora</h3><p>Typora 应该是被广泛用于写 Markdown 的文本软件, 就和 Markdown 语法一样高效. 而且它还有很实用的扩展语法与自定义样式的功能. 其能将 <code>.md</code> 导出成多种文件, 如 <code>.pdf</code>, <code>.html</code>, <code>.docx</code> (没想到吧, 能导出到 Word)</p><p>但是现在 Typora 已经发布正式版并且变为收费软件. 中文官网在此 <a href="https://typoraio.cn/">Typora 官方中文站 </a>.</p><p>我当然是推荐大家都用正版啦. 不过价格是永久版￥89, 好在可以用在3台设备上. 如果和你的两位同学/舍友均摊一下, 每人就只要￥30, 和一张游戏月卡差不多.</p><p>至于盗版以及破解方法<a href="https://www.only4.work/blog/?id=379">在此随便找一种改注册表时间方法的</a><s>不介绍(还挺多的其实)</s>.</p><p><s>还有一种免费白嫖的方法就是安装测试版/Beta版. 官网有历史版本的下载链接 <a href="https://typoraio.cn/windows/dev_release.html">Typora 历史版本下载页</a></s></p><p>白嫖Beta版已经寄了, 要么支持正版要么去学习一下破解方法吧 (还是忍不住啦, 看上面的链接👆)</p><h3 id="VS-Code">VS Code</h3><p>这是微软家的开源文本编辑器, 理论上来说所有代码, 语言, 都可以用 VS Code 来写, 同样是非常的简洁好用. 在下载插件 <strong>Markdown All in One</strong> 后对 Markdown 的基础支持也是非常的好. 若在 VS Code 下载 Markdown 各种附加扩展, 就能获得比 Typora 更加丰富的扩展语法与操作.</p><h3 id="其他">其他</h3><p>大部分IDE, 像 Jetbrain 的全家桶里应该每一款, 都支持 Markdown 语法, 在此不多赘述.</p><p>本文档主要使用 Typora 进行演示, 同时会介绍许多 Typora 所包含的扩展语法.</p><h2 id="🍭-基础教程">🍭 基础教程</h2><p>当有多种标记方法时我会倾向其中一种.</p><p>标题有 <code>*</code> 表示该为扩展语法, 仅在 Typora 或 添加了扩展的 VS Code <strong>本地生效</strong>, 在大多数平台上<strong>并不认可</strong>.</p><h3 id="写-Markdown-的第零步">写 Markdown 的第零步</h3><p>我们写文本的时候大多写的是中文, 可是输入法在输中文时使用的标点为全角标点, 如 <code>，。？！（）【】：；“”</code>. 这些标点是不被 Markdown 所认可的, 也是无法转义的.</p><p>我建议大家写 Markdown 的时候都用半角标点, 即英文标点, 如 <code>,.?!()[]:;&quot;&quot;</code>. 且每个半角标点在文本使用时加上后置空格, 符合英文标点的书写规范, 也更加美观.</p><p>以微软自带输入法举例, 在使用中文输入法时按下 <code>Ctrl</code> + <code>.(这是个句号)</code>, 切换标点的全角与半角. 这样即可中文输入+半角标点.</p><h3 id="标题-数个-“-”-空格-前置">标题 [数个 “#” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>标题会在目录与大纲分级显示, 可以跳转.</p><p>在 Typora 中建议开启 <code>严格模式</code>, 即不应为 <code>#标题</code>, 应为 <code># 标题</code>.</p><p>应该要手动补上空格, 使得 Markdown 语法在其他文本编辑器上兼容.</p><h3 id="强调-用-“-”-或-“-”-包围">强调 [用 “**” 或 “__” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**欢迎报考南京大学!** (我喜欢用这种)</span><br><span class="line">__欢迎报考南京大学!__</span><br></pre></td></tr></table></figure><p>或者选中想要强调的文字按下 <code>Ctrl</code> + <code>B</code>.</p><p>E.G.</p><p><strong>欢迎报考南京大学!</strong></p><h3 id="斜体-用-“-”-或-“-”-包围">斜体 [用 “*” 或 “_” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*欢迎大佬来浇浇我各种知识* (我喜欢用这种)</span><br><span class="line">_欢迎大佬来浇浇我各种知识_</span><br></pre></td></tr></table></figure><p>或者选中想要强调的文字按下 <code>Ctrl</code> + <code>I</code>.</p><p>E.G.</p><p><em>欢迎大佬来浇浇我各种知识</em></p><p>(P.S. <em><strong>斜体并强调</strong></em> [用 “***” 或 “___” 包围])</p><h3 id="删除线-用-“-”-包围">删除线 [用 “~~” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~我宣布个事儿, 我是Sabiyary!~~</span><br></pre></td></tr></table></figure><p>E.G.</p><p><s>我宣布个事儿, 我是Sabiyary!</s></p><h3 id="高亮-用-“-”-包围">*高亮 [用 “==” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==我喜欢黄色, 也喜欢绿色==</span><br></pre></td></tr></table></figure><p>E.G.</p><p><mark>我喜欢黄色, 也喜欢绿色</mark></p><h3 id="代码-用-“-”-包围">代码 [用 “`” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo rm -rf /*`</span><br></pre></td></tr></table></figure><p>E.G.</p><p><code>sudo rm -rf /*</code> (没事别乱敲这个! )</p><p><s>“请输入管理员密码: (闪烁的光标)”</s></p><h3 id="代码块-按三个-“-”-并敲回车">代码块 [按三个 “`” 并敲回车]</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="comment">// 这里就可以开始输入你要的代码了</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span> &#123;</span><br><span class="line">    print（“Hello, world!\n<span class="string">&quot;）;</span></span><br><span class="line"><span class="string">    retrun O;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">``` // (这三个&quot;</span>`<span class="string">&quot;文本编辑器会帮你自动补全 一般不用手动输)</span></span><br></pre></td></tr></table></figure><p>(我之前都是用这个来展示各种语法的, 应该不用举例了吧)</p><p>要想显示行数的话, 一般要在 Typora 的设置里勾上这个显示行数的选项.</p><p>代码块里可以选择语言, 其会根据语言来自动高亮各个语句. 在选择语言后, <code>```</code> 会变为 <code>````</code> + <code>对应语言</code>.</p><h3 id="引用-“-”-空格-前置">引用 [“&gt;” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 24岁, 是学生.</span><br><span class="line">&gt; &gt; 学生特有的无处不在(恼)</span><br></pre></td></tr></table></figure><p>引用是可以嵌套的!</p><p>E.G.</p><blockquote><p>24岁, 是学生.</p><blockquote><p>学生特有的无处不在(恼)</p></blockquote></blockquote><h3 id="无序列表-“-”-或-“-”-空格-前置">无序列表 [“-” 或  “+” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 一颗是枣树 (我喜欢用这种)</span><br><span class="line">+ 另一颗还是枣树</span><br><span class="line">* (其实这种也可以, 不过由于在 Typora 中很难单个输入, 故不常用)</span><br></pre></td></tr></table></figure><p>三种前置符都可以, 敲回车会自动补全, 可在 Typora 设置中调整补全的符号, 敲回车后按下 <code>Tab</code> 会缩进一级.</p><p>E.G.</p><ul class="lvl-0"><li class="lvl-2"><p>一颗是枣树</p></li><li class="lvl-2"><p>另一颗还是枣树</p></li></ul><h3 id="有序列表-数字-“-”-空格-前置">有序列表 [数字 + “.” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我来这里就为了三件事:</span><br><span class="line">1. 公平</span><br><span class="line">2. 公平</span><br><span class="line">3. 还是tm的公平!</span><br></pre></td></tr></table></figure><p>敲回车会自动补全, 敲回车后按下 <code>Tab</code> 会缩进一级.</p><p>E.G.</p><p>我来这里就为了三件事:</p><ol><li class="lvl-3"><p>公平</p></li><li class="lvl-3"><p>公平</p></li><li class="lvl-3"><p>还是tm的公平!</p></li></ol><h3 id="上标-用-“-”-包围">*上标 [用 “^” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C语言中int的上限是 2^31^ - 1 = 2147483647</span><br></pre></td></tr></table></figure><p>E.G.</p><p>C语言中 <code>int</code> 的上限是 2<sup>31</sup> - 1 = 2147483647</p><h3 id="下标-用-“-”-包围">*下标 [用 “~” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H~2~O 是剧毒的!</span><br></pre></td></tr></table></figure><p>E.G.</p><p>H<sub>2</sub>O 是剧毒的!</p><h3 id="注释-“-”-后置">*注释 [“[^]” 后置]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励![^1]</span><br><span class="line"></span><br><span class="line">[^1]: 沃兹·基·硕德 改编自「公鸡」普契涅拉.</span><br></pre></td></tr></table></figure><p>需要在文末写上注释对应的内容</p><p>E.G.</p><blockquote><p>今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励!<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><h3 id="链接-常用-“-”-“-”-分别包围文本与链接">链接 [常用 “[ ]” + “( )” 分别包围文本与链接]</h3><p><strong>(注意: 文内跳转为扩展用法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[来看看我贫瘠的仓库罢](https://github.com/Sakiyary)</span><br><span class="line">[基础教程: 12. 下标](#12. 下标 [用 &quot;~&quot; 包围])</span><br></pre></td></tr></table></figure><p>支持网页链接与文内跳转, 按住 <code>Ctrl</code> 并 <code>单击鼠标左键</code> 即可跳转.</p><p>E.G.</p><p><a href="https://github.com/Sakiyary">来看看我贫瘠的仓库罢</a></p><p>[基础教程: 12. 下标](#12. 下标 [用 “~” 包围])</p><h3 id="任务列表-“-”-空格-前置">任务列表 [“- [ ]” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TodoList:</span><br><span class="line">- [ ] 刷B站</span><br><span class="line">- [ ] 写代码</span><br><span class="line">- [x] 起床</span><br></pre></td></tr></table></figure><p>用 <code>x</code> 代替 <code>[ ]</code> 中的空格来勾选任务列表. 在 Typora 中可以直接用鼠标左键单击勾选框.</p><p>E.G. TodoList:</p><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox1"><label for="checkbox1">刷B站</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox2"><label for="checkbox2">写代码</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">起床</label></p></li></ul><h3 id="表格-用-“-”-绘制表格边框">表格 [用 “|” 绘制表格边框]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 学号 | 姓名  | 年龄 |</span><br><span class="line">| :--- | :---: | ---: | (引号的位置代表着 左对齐, 居中, 右对齐)</span><br><span class="line">|114514|田所|24|</span><br><span class="line">|1919810|浩三|25|</span><br></pre></td></tr></table></figure><p>第一行为表头, 并由第二行分割线决定对齐方式与长度, 第三行及之后即表格数据</p><p>E.G.</p><table><thead><tr><th style="text-align:left">学号</th><th style="text-align:center">姓名</th><th style="text-align:right">年龄</th></tr></thead><tbody><tr><td style="text-align:left">114514</td><td style="text-align:center">田所</td><td style="text-align:right">24</td></tr><tr><td style="text-align:left">1919810</td><td style="text-align:center">浩三</td><td style="text-align:right">25</td></tr></tbody></table><h3 id="图片-直接拖进来或者复制粘贴">图片 [直接拖进来或者复制粘贴]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](图片的位置)</span><br></pre></td></tr></table></figure><p>我还是会选择拖进来或者复制粘贴啦~ 在 Typora 的设置里也可以改图片的储存方式.</p><h3 id="分割线-按三个-“-”-或-“-”-或-“-”-并敲回车">分割线 [按三个 “*” 或 “-” 或 “_” 并敲回车]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">--- (我喜欢用这种)</span><br><span class="line">___</span><br><span class="line">// (其实按三个及以上都可以)</span><br></pre></td></tr></table></figure><p>由于 <code>*</code> 与 <code>_</code> 均会自动补全, 所以我觉得 <code>-</code> 最为方便.</p><p>E.G.</p><hr><hr><hr><h3 id="Emoji表情-“-”-前置">Emoji表情 [“:” 前置]</h3><p><strong>(注意: 英文输入为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:sweat_smile: </span><br><span class="line">:drooling_face:</span><br><span class="line">:clown_face:</span><br><span class="line">// (敲回车或者鼠标点击, 后置的&quot;:&quot;一般不需要手动输)</span><br></pre></td></tr></table></figure><p>这个功能唯一的要求就是英语水平要高, 或者大概记得各个 Emoji 的英文名.</p><p>E.G.</p><p>😅<br>🤤<br>🤡</p><p>对于其余普通的 Markdown 文本编辑器, 可以直接将 Emoji 表情复制进来, 这是直接<strong>硬编码</strong>的 (<s>刻进DNA里</s>)</p><p>E.G.</p><p>😅🤤🤡</p><p>用好这个功能可以让你的文本非常的可爱! <s>太抽象了</s></p><p>这里分享一个可以复制<a href="https://emojipedia.org/apple/">全Emoji的网站</a>, 非常好用! 我之前的C语言大作业也是从这里下载的资源!</p><h2 id="🔥-进阶教程">🔥 进阶教程</h2><h3 id="目录-自动生成">目录 [自动生成]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC] (此为 Typora 特有的, 如本文档开头)</span><br></pre></td></tr></table></figure><p>若使用 VS Code 搭配 Markdown All in One 扩展, 可在 VS Code 的<code>命令面板</code> (即 <a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette">VS Code Command Palette</a>) 输入 <code>Create Table of Contents</code> 自动生成目录, 且可在扩展设置中细调目录参数.</p><h3 id="内联-HTML-代码-用-“-”-包围">内联 HTML 代码 [用 “&lt;&gt; &lt;/&gt;” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">  &lt;font style=&quot;color:red&quot;&gt;我不会 HTML 呜呜呜... 浇浇我&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;简单的文字居中也可以这样&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;u&gt;我差点忘了还有下划线这东西...&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>只要你会写, 你完全可以把 Markdown 当作 <strong>HTML</strong> 来写.</p><p>同时, <code>.md</code> 文件可以直接导出成一个网页.</p><p>下划线可以选中想要下划的文字按下 <code>Ctrl</code> + <code>U</code>.</p><p>E.G.</p><div style="text-align:center">  <font style="color:red">我不会 HTML 呜呜呜... 浇浇我</font></div><center>简单的文字居中也可以这样</center><p><u>我差点忘了还有下划线这东西…</u></p><h3 id="内联-LaTeX-公式-用-“-”-包围">内联 $\LaTeX$ 公式 [用 “$” 包围]</h3><p><strong>(注意: 部分编译器会不识别部分符号)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$\LaTeX$ 是最好用的论文排版语言! 不信你看!</span><br><span class="line"></span><br><span class="line">$a^n+b^n=c^n$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">%\usepackage&#123;unicode-math&#125;</span><br><span class="line">\displaystyle \ointctrclockwise\mathcal&#123;D&#125;[x(t)]</span><br><span class="line">\sqrt&#123;\frac&#123;\displaystyle3\uppi^2-\sum_&#123;q=0&#125;^&#123;\infty&#125;(z+\hat L)^&#123;q&#125;</span><br><span class="line">\exp(\symrm&#123;i&#125;q^2 \hbar x)&#125;&#123;\displaystyle (\symsfup&#123;Tr&#125;\symbfcal&#123;A&#125;)</span><br><span class="line">\left(\symbf\Lambda_&#123;j_1j_2&#125;^&#123;i_1i_2&#125;\Gamma_&#123;i_1i_2&#125;^&#123;j_1j_2&#125;</span><br><span class="line">\hookrightarrow\vec D\cdot \symbf P \right)&#125;&#125;</span><br><span class="line">=\underbrace&#123;\widetilde&#123;\left\langle \frac&#123;\notin \emptyset&#125;</span><br><span class="line">&#123;\varpi\alpha_&#123;k\uparrow&#125;&#125;\middle\vert</span><br><span class="line">\frac&#123;\partial_\mu T_&#123;\mu\nu&#125;&#125;&#123;2&#125;\right\rangle&#125;&#125;_&#123;\mathrm&#123;K&#125;_3</span><br><span class="line">\mathrm&#123;Fe&#125;(\mathrm&#123;CN&#125;)_6&#125; ,\forall z \in \mathbb&#123;R&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>用 <code>$</code> 包围为单条公式, 按下两个 <code>$</code> 并敲回车即生成公式块.</p><p>E.G.</p><p>$\LaTeX$ 是最好用的论文排版语言! 不信你看!</p><p>$a<sup>n+b</sup>n=c^n$</p><p>$$<br>%\usepackage{unicode-math}<br>\displaystyle \ointctrclockwise\mathcal{D}[x(t)]<br>\sqrt{\frac{\displaystyle3\uppi<sup>2-\sum_{q=0}</sup>{\infty}(z+\hat L)^{q}<br>\exp(\symrm{i}q^2 \hbar x)}{\displaystyle (\symsfup{Tr}\symbfcal{A})<br>\left(\symbf\Lambda_{j_1j_2}<sup>{i_1i_2}\Gamma_{i_1i_2}</sup>{j_1j_2}<br>\hookrightarrow\vec D\cdot \symbf P \right)}}<br>=\underbrace{\widetilde{\left\langle \frac{\notin \emptyset}<br>{\varpi\alpha_{k\uparrow}}\middle\vert<br>\frac{\partial_\mu T_{\mu\nu}}{2}\right\rangle}}_{\mathrm{K}_3<br>\mathrm{Fe}(\mathrm{CN})_6} ,\forall z \in \mathbb{R}<br>$$</p><h3 id="网络图床">*网络图床</h3><p>(这是学长给我的网络图床教程, 我并未实践过…)</p><p>分享一个 Typora 搭配腾讯云COS/阿里云OSS图床的<a href="https://blog.csdn.net/guo_ridgepole/article/details/108257277">例子</a>. 新用户免费试用6个月, 另外还可选择七牛云或者路过图床.</p><h3 id="Typora-的常用快捷键">*Typora 的常用快捷键</h3><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">效果</th><th style="text-align:center">按键</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl</code> + <code>D</code></td><td style="text-align:center">选中当前词</td><td style="text-align:center"><code>Ctrl</code> + <code>L</code></td><td style="text-align:center">选中当前句/行</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>E</code></td><td style="text-align:center">选中当前区块</td><td style="text-align:center"><code>Ctrl</code> + <code>F</code></td><td style="text-align:center">搜索当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>B</code></td><td style="text-align:center">加粗当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>H</code></td><td style="text-align:center">替换当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>I</code></td><td style="text-align:center">倾斜当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>U</code></td><td style="text-align:center">下划当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>K</code></td><td style="text-align:center">将当前选中生成链接</td><td style="text-align:center"><code>Ctrl</code> + <code>J</code></td><td style="text-align:center">滚动屏幕将选中滚至顶部</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>W</code></td><td style="text-align:center">关闭当前窗口</td><td style="text-align:center"><code>Ctrl</code> + <code>N</code></td><td style="text-align:center">打开新窗口</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>O</code></td><td style="text-align:center">打开文件</td><td style="text-align:center"><code>Ctrl</code> + <code>P</code></td><td style="text-align:center">搜索文件并打开</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>回车</code></td><td style="text-align:center">表格下方插入行</td><td style="text-align:center"><code>Ctrl</code> + <code>,</code></td><td style="text-align:center">打开偏好设置</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>.</code></td><td style="text-align:center">切换全角/半角标点</td><td style="text-align:center"><code>Ctrl</code> + <code>/</code></td><td style="text-align:center">切换正常/源代码视图</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>-</code></td><td style="text-align:center">缩小视图缩放</td><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>+</code></td><td style="text-align:center">放大视图缩放</td></tr></tbody></table><p>还有一些不常用的/三键的快捷键不在此列出.</p><h3 id="Typora-的主题样式与检查元素">*Typora 的主题样式与检查元素</h3><p>Markdown 在编译后约等于 HTML. 而 Typora 的正常视图就是编译后的 Markdown, 故Typora的主题样式本质就是 CSS 文件.</p><p>可以下载各种好看的主题给 Typora换上, 同时也可以自己调整对应的 CSS 文件, 或者自己手搓.</p><p>在 Typora 设置中开启 <code>调试模式</code> 后即可在正常视图右击打开 <code>检查元素</code>, 在其中就可以完全将 Markdown 文件当成 HTML 来编辑.</p><h2 id="💯-总结">💯 总结</h2><p>至此, <strong>Markdown + Typora / VSCode</strong> 的手册教程也告一段落.</p><p>不知你看完这么长的教程/手册, 是否能体会到 Markdown 的精妙简洁之处呢?</p><p>其实 Markdown 只是标记语言的最开始, 我的感受是会了 Markdown 之后对于理解 HTML 也有帮助, 对于用 $\LaTeX$ 来写论文也有帮助. 标记语言正是为了摆脱 Word 那种虽然&quot;所见即所得&quot;, 但又过于花哨浮华, 很差的兼容性与闭源的编码的缺陷. 当你能掌握这样的&quot;所写即所得&quot;时, 你肯定会感受到用 Markdown 这类语言来处理文本的妙处!</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>沃兹·基·硕德 改编自「公鸡」普契涅拉. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    
    <category term="others" scheme="https://cuiluyi.gitee.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>LaTex公式</title>
    <link href="https://cuiluyi.gitee.io/2023/11/26/LaTeX%E5%85%AC%E5%BC%8F/"/>
    <id>https://cuiluyi.gitee.io/2023/11/26/LaTeX%E5%85%AC%E5%BC%8F/</id>
    <published>2023-11-26T12:15:27.000Z</published>
    <updated>2024-01-24T14:52:03.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="希腊字母">希腊字母</h2><p>$$<br>\delta,\lambda\<br>\Delta,\Lambda\<br>\Alpha\Beta\<br>\phi,\varphi\<br>\epsilon,\varepsilon\<br>π<br>$$</p><h2 id="上下标">上下标</h2><p>$$<br>a^2,a_1\<br>x^{y+z},p_{ij},p_ij\<br>x_i,x_{\text i}\<br>\text{A B},\rm{A B}\<br>\text A B,\rm A B\<br>{\rm A} B\<br>\text{e},\text{i}<br>$$</p><span id="more"></span><h2 id="分式与根式">分式与根式</h2><p>$$<br>\frac{1}{2},\frac 1 2,\<br>\frac 1 {x+y}\<br>\frac {\dfrac 1 x + 1}{y + 1}<br>$$</p><p>$$<br>\sqrt 2,\sqrt{x+y},\sqrt[3]x<br>$$</p><h2 id="普通运算符">普通运算符</h2><p>$$<br>±\<br>\times,\cdot,\div\<br>\pm,\mp\</p><blockquote><p>&lt;,\ge,\le,\gg,\ll,\ne,\approx,\equiv\<br>\cap,\cup,\in,\notin,\subseteq,\subsetneqq,\varnothing\<br>\forall,\exists,\nexists\<br>\because,\therefore\<br>\mathbb R,\R,\Q,\N,\Z_+\<br>\mathcal F,\mathscr F<br>$$</p></blockquote><p>$$<br>\cdots,\vdots,\ddots<br>$$</p><p>$$<br>\infty,\partial,∂,\nabla,\propto,\degree<br>$$</p><p>$$<br>\sin x,\sec x,\cosh x\<br>\log_2 x, \ln x,\lg x\<br>\lim\limits_{x \to 0} \frac { x}{\sin x}\<br>\max x<br>$$</p><p>$$<br>\text{MSE}(x)<br>$$</p><h2 id="大型运算符">大型运算符</h2><p>$$<br>\sum,\prod\<br>\sum_i,\sum_{i=0}^N\<br>\frac{\sum\limits_{i=1}^n x_i}{\prod\limits_{i=1}^n x_i}<br>$$</p><p>$$<br>\int,\iint,\iiint,\oint,\oiint\<br>\int_{-\infty}^0 f(x),\text d x<br>$$</p><p>$$<br>a, a\<br>a\ a\<br>a\quad a\<br>a\qquad a<br>$$</p><h2 id="标注符号">标注符号</h2><p>$$<br>\vec x,\overrightarrow {AB}\<br>\bar x,\overline{AB}<br>$$</p><h2 id="箭头">箭头</h2><p>$$<br>\leftarrow,\Rightarrow,\Leftrightarrow,\longleftarrow<br>$$</p><h2 id="括号与定界符">括号与定界符</h2><p>$$<br>([]){ }\<br>\lceil,\rceil,\lfloor,\rfloor,||\<br>\left(0,\frac 1 a\right]\<br>\left.\frac {∂f}{∂x}\right|_{x=0}<br>$$</p><h2 id="多行公式">多行公式</h2><p>$$<br>\begin{align}</p><p>a&amp;=b+c+d\<br>&amp;=e+f</p><p>\end{align}<br>$$</p><h2 id="大括号">大括号</h2><p>$$<br>f(x)=</p><p>\begin{cases}</p><p>\sin x, &amp; -π\le x \le π\<br>0,&amp; \text{其他}</p><p>\end{cases}<br>$$</p><h2 id="矩阵">矩阵</h2><p>$$<br>\begin{matrix}</p><p>a &amp; b &amp; \cdots &amp; c \<br>\vdots&amp; \vdots &amp; \ddots &amp; \vdots \<br>e &amp; f&amp; \cdots &amp; g</p><p>\end{matrix}<br>$$</p><p>$$<br>\begin{bmatrix}</p><p>a &amp; b &amp; \cdots &amp; c \<br>\vdots&amp; \vdots &amp; \ddots &amp; \vdots \<br>e &amp; f&amp; \cdots &amp; g</p><p>\end{bmatrix}</p><p>\begin{pmatrix}</p><p>a &amp; b &amp; \cdots &amp; c \<br>\vdots&amp; \vdots &amp; \ddots &amp; \vdots \<br>e &amp; f&amp; \cdots &amp; g</p><p>\end{pmatrix}</p><p>\begin{vmatrix}</p><p>a &amp; b &amp; \cdots &amp; c \<br>\vdots&amp; \vdots &amp; \ddots &amp; \vdots \<br>e &amp; f&amp; \cdots &amp; g</p><p>\end{vmatrix}<br>$$</p><p>$$<br>\bf A,\bf B^{\rm T}<br>$$</p><h2 id="实战演练">实战演练</h2><p>$$<br>f(x) = \frac 1 {\sqrt{2\pi} \sigma} {\rm e} ^ {-\frac {(x-\mu)^2}{2\sigma ^ 2}}\<br>f(x) = \frac 1 {\sqrt{2\pi} \sigma} \exp \left[ {-\frac {(x-\mu)^2}{2\sigma ^ 2}}\right]<br>$$</p><p>$$<br>\lim\limits_{N\to \infty} P \left{ \left| \frac {I\left( \alpha_i \right)}{N} - H(s) \right| &lt; \varepsilon  \right} = 1<br>$$</p><p>$$<br>x(n) = \frac 1 {2\pi} \int _{-π} ^ π X\left( {\rm e} ^</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;希腊字母&quot;&gt;希腊字母&lt;/h2&gt;
&lt;p&gt;$$&lt;br&gt;
&#92;delta,&#92;lambda&#92;&lt;br&gt;
&#92;Delta,&#92;Lambda&#92;&lt;br&gt;
&#92;Alpha&#92;Beta&#92;&lt;br&gt;
&#92;phi,&#92;varphi&#92;&lt;br&gt;
&#92;epsilon,&#92;varepsilon&#92;&lt;br&gt;
π&lt;br&gt;
$$&lt;/p&gt;
&lt;h2 id=&quot;上下标&quot;&gt;上下标&lt;/h2&gt;
&lt;p&gt;$$&lt;br&gt;
a^2,a_1&#92;&lt;br&gt;
x^{y+z},p_{ij},p_ij&#92;&lt;br&gt;
x_i,x_{&#92;text i}&#92;&lt;br&gt;
&#92;text{A B},&#92;rm{A B}&#92;&lt;br&gt;
&#92;text A B,&#92;rm A B&#92;&lt;br&gt;
{&#92;rm A} B&#92;&lt;br&gt;
&#92;text{e},&#92;text{i}&lt;br&gt;
$$&lt;/p&gt;</summary>
    
    
    
    
    <category term="others" scheme="https://cuiluyi.gitee.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码表</title>
    <link href="https://cuiluyi.gitee.io/2023/11/11/ASCII%E7%A0%81%E8%A1%A8/"/>
    <id>https://cuiluyi.gitee.io/2023/11/11/ASCII%E7%A0%81%E8%A1%A8/</id>
    <published>2023-11-11T09:29:49.000Z</published>
    <updated>2023-11-11T09:28:03.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ASCII码表"><strong>ASCII码表</strong></h2><table><thead><tr><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">NUL</td><td style="text-align:center">32</td><td style="text-align:center">(space)</td><td style="text-align:center">64</td><td style="text-align:center">@</td><td style="text-align:center">96</td><td style="text-align:center">、</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">SOH</td><td style="text-align:center">33</td><td style="text-align:center">！</td><td style="text-align:center">65</td><td style="text-align:center">A</td><td style="text-align:center">97</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">STX</td><td style="text-align:center">34</td><td style="text-align:center">”</td><td style="text-align:center">66</td><td style="text-align:center">B</td><td style="text-align:center">98</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">ETX</td><td style="text-align:center">35</td><td style="text-align:center">#</td><td style="text-align:center">67</td><td style="text-align:center">C</td><td style="text-align:center">99</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">EOT</td><td style="text-align:center">36</td><td style="text-align:center">$</td><td style="text-align:center">68</td><td style="text-align:center">D</td><td style="text-align:center">100</td><td style="text-align:center">d</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">ENQ</td><td style="text-align:center">37</td><td style="text-align:center">%</td><td style="text-align:center">69</td><td style="text-align:center">E</td><td style="text-align:center">101</td><td style="text-align:center">e</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">ACK</td><td style="text-align:center">38</td><td style="text-align:center">&amp;</td><td style="text-align:center">70</td><td style="text-align:center">F</td><td style="text-align:center">102</td><td style="text-align:center">f</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">BEL</td><td style="text-align:center">39</td><td style="text-align:center">’</td><td style="text-align:center">71</td><td style="text-align:center">G</td><td style="text-align:center">103</td><td style="text-align:center">g</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">BS</td><td style="text-align:center">40</td><td style="text-align:center">(</td><td style="text-align:center">72</td><td style="text-align:center">H</td><td style="text-align:center">104</td><td style="text-align:center">h</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">HT</td><td style="text-align:center">41</td><td style="text-align:center">)</td><td style="text-align:center">73</td><td style="text-align:center">I</td><td style="text-align:center">105</td><td style="text-align:center">i</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">LF</td><td style="text-align:center">42</td><td style="text-align:center">*</td><td style="text-align:center">74</td><td style="text-align:center">J</td><td style="text-align:center">106</td><td style="text-align:center">j</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">VT</td><td style="text-align:center">43</td><td style="text-align:center">+</td><td style="text-align:center">75</td><td style="text-align:center">K</td><td style="text-align:center">107</td><td style="text-align:center">k</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">FF</td><td style="text-align:center">44</td><td style="text-align:center">,</td><td style="text-align:center">76</td><td style="text-align:center">L</td><td style="text-align:center">108</td><td style="text-align:center">l</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">CR</td><td style="text-align:center">45</td><td style="text-align:center">-</td><td style="text-align:center">77</td><td style="text-align:center">M</td><td style="text-align:center">109</td><td style="text-align:center">m</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">SO</td><td style="text-align:center">46</td><td style="text-align:center">.</td><td style="text-align:center">78</td><td style="text-align:center">N</td><td style="text-align:center">110</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">SI</td><td style="text-align:center">47</td><td style="text-align:center">/</td><td style="text-align:center">79</td><td style="text-align:center">O</td><td style="text-align:center">111</td><td style="text-align:center">o</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">DLE</td><td style="text-align:center">48</td><td style="text-align:center">0</td><td style="text-align:center">80</td><td style="text-align:center">P</td><td style="text-align:center">112</td><td style="text-align:center">p</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">DCI</td><td style="text-align:center">49</td><td style="text-align:center">1</td><td style="text-align:center">81</td><td style="text-align:center">Q</td><td style="text-align:center">113</td><td style="text-align:center">q</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">DC2</td><td style="text-align:center">50</td><td style="text-align:center">2</td><td style="text-align:center">82</td><td style="text-align:center">R</td><td style="text-align:center">114</td><td style="text-align:center">r</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">DC3</td><td style="text-align:center">51</td><td style="text-align:center">3</td><td style="text-align:center">83</td><td style="text-align:center">X</td><td style="text-align:center">115</td><td style="text-align:center">s</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">DC4</td><td style="text-align:center">52</td><td style="text-align:center">4</td><td style="text-align:center">84</td><td style="text-align:center">T</td><td style="text-align:center">116</td><td style="text-align:center">t</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">NAK</td><td style="text-align:center">53</td><td style="text-align:center">5</td><td style="text-align:center">85</td><td style="text-align:center">U</td><td style="text-align:center">117</td><td style="text-align:center">u</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">SYN</td><td style="text-align:center">54</td><td style="text-align:center">6</td><td style="text-align:center">86</td><td style="text-align:center">V</td><td style="text-align:center">118</td><td style="text-align:center">v</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">TB</td><td style="text-align:center">55</td><td style="text-align:center">7</td><td style="text-align:center">87</td><td style="text-align:center">W</td><td style="text-align:center">119</td><td style="text-align:center">w</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">CAN</td><td style="text-align:center">56</td><td style="text-align:center">8</td><td style="text-align:center">88</td><td style="text-align:center">X</td><td style="text-align:center">120</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">EM</td><td style="text-align:center">57</td><td style="text-align:center">9</td><td style="text-align:center">89</td><td style="text-align:center">Y</td><td style="text-align:center">121</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">SUB</td><td style="text-align:center">58</td><td style="text-align:center">:</td><td style="text-align:center">90</td><td style="text-align:center">Z</td><td style="text-align:center">122</td><td style="text-align:center">z</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">ESC</td><td style="text-align:center">59</td><td style="text-align:center">;</td><td style="text-align:center">91</td><td style="text-align:center">[</td><td style="text-align:center">123</td><td style="text-align:center">{</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">FS</td><td style="text-align:center">60</td><td style="text-align:center">&lt;</td><td style="text-align:center">92</td><td style="text-align:center">\</td><td style="text-align:center">124</td><td style="text-align:center">|</td></tr><tr><td style="text-align:center">29</td><td style="text-align:center">GS</td><td style="text-align:center">61</td><td style="text-align:center">=</td><td style="text-align:center">93</td><td style="text-align:center">]</td><td style="text-align:center">125</td><td style="text-align:center">}</td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">RS</td><td style="text-align:center">62</td><td style="text-align:center">&gt;</td><td style="text-align:center">94</td><td style="text-align:center">^</td><td style="text-align:center">126</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">31</td><td style="text-align:center">US</td><td style="text-align:center">63</td><td style="text-align:center">?</td><td style="text-align:center">95</td><td style="text-align:center">—</td><td style="text-align:center">127</td><td style="text-align:center">DEL</td></tr></tbody></table><span id="more"></span><p><strong>注意</strong></p><blockquote><ol><li class="lvl-7"><p><strong>ASCII中的<code>0</code>~<code>31</code>为控制字符；<code>32</code>~<code>126</code>为打印字符；<code>127</code>为Delete(删除)命令</strong>，下表为控制字符释义</p></li></ol><table><thead><tr><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">00</td><td style="text-align:center">空</td><td style="text-align:center">16</td><td style="text-align:center">10</td><td style="text-align:center">数据链路转意</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">01</td><td style="text-align:center">头标开始</td><td style="text-align:center">17</td><td style="text-align:center">11</td><td style="text-align:center">设备控制 1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">02</td><td style="text-align:center">正文开始</td><td style="text-align:center">18</td><td style="text-align:center">12</td><td style="text-align:center">设备控制 2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">03</td><td style="text-align:center">正文结束</td><td style="text-align:center">19</td><td style="text-align:center">13</td><td style="text-align:center">设备控制 3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">04</td><td style="text-align:center">传输结束</td><td style="text-align:center">20</td><td style="text-align:center">14</td><td style="text-align:center">设备控制 4</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">05</td><td style="text-align:center">查询</td><td style="text-align:center">21</td><td style="text-align:center">15</td><td style="text-align:center">反确认</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">06</td><td style="text-align:center">确认</td><td style="text-align:center">22</td><td style="text-align:center">16</td><td style="text-align:center">同步空闲</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">07</td><td style="text-align:center">震铃</td><td style="text-align:center">23</td><td style="text-align:center">17</td><td style="text-align:center">传输块结束</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">08</td><td style="text-align:center">backspace</td><td style="text-align:center">24</td><td style="text-align:center">18</td><td style="text-align:center">取消</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">09</td><td style="text-align:center">水平制表符</td><td style="text-align:center">25</td><td style="text-align:center">19</td><td style="text-align:center">媒体结束</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">0A</td><td style="text-align:center">换行/新行</td><td style="text-align:center">26</td><td style="text-align:center">1A</td><td style="text-align:center">替换</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">0B</td><td style="text-align:center">竖直制表符</td><td style="text-align:center">27</td><td style="text-align:center">1B</td><td style="text-align:center">转意</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">0C</td><td style="text-align:center">换页/新页</td><td style="text-align:center">28</td><td style="text-align:center">1C</td><td style="text-align:center">文件分隔符</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">0D</td><td style="text-align:center">回车</td><td style="text-align:center">29</td><td style="text-align:center">1D</td><td style="text-align:center">组分隔符</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">0E</td><td style="text-align:center">移出</td><td style="text-align:center">30</td><td style="text-align:center">1E</td><td style="text-align:center">记录分隔符</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">0F</td><td style="text-align:center">移入</td><td style="text-align:center">31</td><td style="text-align:center">1F</td><td style="text-align:center">单元分隔符</td></tr></tbody></table></blockquote><h2 id="ASCII扩展字符">ASCII扩展字符</h2><p>​<strong>ASCII扩展字符——（为了适应更多字符）<code>128</code>~<code>255</code>/<code>-128</code>~<code>-1</code>，其中，<code>-128</code>对应<code>128</code>，依次递增对应</strong></p><table><thead><tr><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">128</td><td style="text-align:center">80</td><td style="text-align:center">Ç</td><td style="text-align:center">192</td><td style="text-align:center">C0</td><td style="text-align:center">└</td></tr><tr><td style="text-align:center">129</td><td style="text-align:center">81</td><td style="text-align:center">ü</td><td style="text-align:center">193</td><td style="text-align:center">C1</td><td style="text-align:center">┴</td></tr><tr><td style="text-align:center">130</td><td style="text-align:center">82</td><td style="text-align:center">é</td><td style="text-align:center">194</td><td style="text-align:center">C2</td><td style="text-align:center">┬</td></tr><tr><td style="text-align:center">131</td><td style="text-align:center">83</td><td style="text-align:center">â</td><td style="text-align:center">195</td><td style="text-align:center">C3</td><td style="text-align:center">├</td></tr><tr><td style="text-align:center">132</td><td style="text-align:center">84</td><td style="text-align:center">ä</td><td style="text-align:center">196</td><td style="text-align:center">C4</td><td style="text-align:center">─</td></tr><tr><td style="text-align:center">133</td><td style="text-align:center">85</td><td style="text-align:center">à</td><td style="text-align:center">197</td><td style="text-align:center">C5</td><td style="text-align:center">┼</td></tr><tr><td style="text-align:center">134</td><td style="text-align:center">86</td><td style="text-align:center">å</td><td style="text-align:center">198</td><td style="text-align:center">C6</td><td style="text-align:center">╞</td></tr><tr><td style="text-align:center">135</td><td style="text-align:center">87</td><td style="text-align:center">ç</td><td style="text-align:center">199</td><td style="text-align:center">C7</td><td style="text-align:center">╟</td></tr><tr><td style="text-align:center">136</td><td style="text-align:center">88</td><td style="text-align:center">ê</td><td style="text-align:center">200</td><td style="text-align:center">C8</td><td style="text-align:center">╚</td></tr><tr><td style="text-align:center">137</td><td style="text-align:center">89</td><td style="text-align:center">ë</td><td style="text-align:center">201</td><td style="text-align:center">C9</td><td style="text-align:center">╔</td></tr><tr><td style="text-align:center">138</td><td style="text-align:center">8A</td><td style="text-align:center">è</td><td style="text-align:center">202</td><td style="text-align:center">CA</td><td style="text-align:center">╩</td></tr><tr><td style="text-align:center">139</td><td style="text-align:center">8B</td><td style="text-align:center">ï</td><td style="text-align:center">203</td><td style="text-align:center">CB</td><td style="text-align:center">╦</td></tr><tr><td style="text-align:center">140</td><td style="text-align:center">8C</td><td style="text-align:center">î</td><td style="text-align:center">204</td><td style="text-align:center">CC</td><td style="text-align:center">╠</td></tr><tr><td style="text-align:center">141</td><td style="text-align:center">8D</td><td style="text-align:center">ì</td><td style="text-align:center">205</td><td style="text-align:center">CD</td><td style="text-align:center">═</td></tr><tr><td style="text-align:center">142</td><td style="text-align:center">8E</td><td style="text-align:center">Ä</td><td style="text-align:center">206</td><td style="text-align:center">CE</td><td style="text-align:center">╬</td></tr><tr><td style="text-align:center">143</td><td style="text-align:center">8F</td><td style="text-align:center">Å</td><td style="text-align:center">207</td><td style="text-align:center">CF</td><td style="text-align:center">╧</td></tr><tr><td style="text-align:center">144</td><td style="text-align:center">90</td><td style="text-align:center">É</td><td style="text-align:center">208</td><td style="text-align:center">D0</td><td style="text-align:center">╨</td></tr><tr><td style="text-align:center">145</td><td style="text-align:center">91</td><td style="text-align:center">æ</td><td style="text-align:center">209</td><td style="text-align:center">D1</td><td style="text-align:center">╤</td></tr><tr><td style="text-align:center">146</td><td style="text-align:center">92</td><td style="text-align:center">Æ</td><td style="text-align:center">210</td><td style="text-align:center">D2</td><td style="text-align:center">╥</td></tr><tr><td style="text-align:center">147</td><td style="text-align:center">93</td><td style="text-align:center">ô</td><td style="text-align:center">211</td><td style="text-align:center">D3</td><td style="text-align:center">╙</td></tr><tr><td style="text-align:center">148</td><td style="text-align:center">94</td><td style="text-align:center">ö</td><td style="text-align:center">212</td><td style="text-align:center">D4</td><td style="text-align:center">Ô</td></tr><tr><td style="text-align:center">149</td><td style="text-align:center">95</td><td style="text-align:center">ò</td><td style="text-align:center">213</td><td style="text-align:center">D5</td><td style="text-align:center">╒</td></tr><tr><td style="text-align:center">150</td><td style="text-align:center">96</td><td style="text-align:center">û</td><td style="text-align:center">214</td><td style="text-align:center">D6</td><td style="text-align:center">╓</td></tr><tr><td style="text-align:center">151</td><td style="text-align:center">97</td><td style="text-align:center">ù</td><td style="text-align:center">215</td><td style="text-align:center">D7</td><td style="text-align:center">╫</td></tr><tr><td style="text-align:center">152</td><td style="text-align:center">98</td><td style="text-align:center">ÿ</td><td style="text-align:center">216</td><td style="text-align:center">D8</td><td style="text-align:center">╪</td></tr><tr><td style="text-align:center">153</td><td style="text-align:center">99</td><td style="text-align:center">Ö</td><td style="text-align:center">217</td><td style="text-align:center">D9</td><td style="text-align:center">┘</td></tr><tr><td style="text-align:center">154</td><td style="text-align:center">9A</td><td style="text-align:center">Ü</td><td style="text-align:center">218</td><td style="text-align:center">DA</td><td style="text-align:center">┌</td></tr><tr><td style="text-align:center">155</td><td style="text-align:center">9B</td><td style="text-align:center">¢</td><td style="text-align:center">219</td><td style="text-align:center">DB</td><td style="text-align:center">█</td></tr><tr><td style="text-align:center">156</td><td style="text-align:center">9C</td><td style="text-align:center">£</td><td style="text-align:center">220</td><td style="text-align:center">DC</td><td style="text-align:center">▄</td></tr><tr><td style="text-align:center">157</td><td style="text-align:center">9D</td><td style="text-align:center">¥</td><td style="text-align:center">221</td><td style="text-align:center">DD</td><td style="text-align:center">▌</td></tr><tr><td style="text-align:center">158</td><td style="text-align:center">9E</td><td style="text-align:center">?</td><td style="text-align:center">222</td><td style="text-align:center">DE</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">159</td><td style="text-align:center">9F</td><td style="text-align:center">ƒ</td><td style="text-align:center">223</td><td style="text-align:center">DF</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">160</td><td style="text-align:center">A0</td><td style="text-align:center">á</td><td style="text-align:center">224</td><td style="text-align:center">E0</td><td style="text-align:center">α</td></tr><tr><td style="text-align:center">161</td><td style="text-align:center">A1</td><td style="text-align:center">í</td><td style="text-align:center">225</td><td style="text-align:center">E1</td><td style="text-align:center">ß</td></tr><tr><td style="text-align:center">162</td><td style="text-align:center">A2</td><td style="text-align:center">ó</td><td style="text-align:center">226</td><td style="text-align:center">E2</td><td style="text-align:center">Γ</td></tr><tr><td style="text-align:center">163</td><td style="text-align:center">A3</td><td style="text-align:center">ú</td><td style="text-align:center">227</td><td style="text-align:center">E3</td><td style="text-align:center">π</td></tr><tr><td style="text-align:center">164</td><td style="text-align:center">A4</td><td style="text-align:center">ñ</td><td style="text-align:center">228</td><td style="text-align:center">E4</td><td style="text-align:center">Σ</td></tr><tr><td style="text-align:center">165</td><td style="text-align:center">A5</td><td style="text-align:center">Ñ</td><td style="text-align:center">229</td><td style="text-align:center">E5</td><td style="text-align:center">σ</td></tr><tr><td style="text-align:center">166</td><td style="text-align:center">A6</td><td style="text-align:center">ª</td><td style="text-align:center">230</td><td style="text-align:center">E6</td><td style="text-align:center">µ</td></tr><tr><td style="text-align:center">167</td><td style="text-align:center">A7</td><td style="text-align:center">º</td><td style="text-align:center">231</td><td style="text-align:center">E7</td><td style="text-align:center">τ</td></tr><tr><td style="text-align:center">168</td><td style="text-align:center">A8</td><td style="text-align:center">¿</td><td style="text-align:center">232</td><td style="text-align:center">E8</td><td style="text-align:center">Φ</td></tr><tr><td style="text-align:center">169</td><td style="text-align:center">A9</td><td style="text-align:center">?</td><td style="text-align:center">233</td><td style="text-align:center">E9</td><td style="text-align:center">Θ</td></tr><tr><td style="text-align:center">170</td><td style="text-align:center">AA</td><td style="text-align:center">¬</td><td style="text-align:center">234</td><td style="text-align:center">EA</td><td style="text-align:center">Ω</td></tr><tr><td style="text-align:center">171</td><td style="text-align:center">AB</td><td style="text-align:center">½</td><td style="text-align:center">235</td><td style="text-align:center">EB</td><td style="text-align:center">δ</td></tr><tr><td style="text-align:center">172</td><td style="text-align:center">AC</td><td style="text-align:center">¼</td><td style="text-align:center">236</td><td style="text-align:center">EC</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">173</td><td style="text-align:center">AD</td><td style="text-align:center">¡</td><td style="text-align:center">237</td><td style="text-align:center">ED</td><td style="text-align:center">φ</td></tr><tr><td style="text-align:center">174</td><td style="text-align:center">AE</td><td style="text-align:center">«</td><td style="text-align:center">238</td><td style="text-align:center">EE</td><td style="text-align:center">ε</td></tr><tr><td style="text-align:center">175</td><td style="text-align:center">AF</td><td style="text-align:center">»</td><td style="text-align:center">239</td><td style="text-align:center">EF</td><td style="text-align:center">∩</td></tr><tr><td style="text-align:center">176</td><td style="text-align:center">B0</td><td style="text-align:center">?</td><td style="text-align:center">240</td><td style="text-align:center">F0</td><td style="text-align:center">≡</td></tr><tr><td style="text-align:center">177</td><td style="text-align:center">B1</td><td style="text-align:center">?</td><td style="text-align:center">241</td><td style="text-align:center">F1</td><td style="text-align:center">±</td></tr><tr><td style="text-align:center">178</td><td style="text-align:center">B2</td><td style="text-align:center">▓</td><td style="text-align:center">242</td><td style="text-align:center">F2</td><td style="text-align:center">≥</td></tr><tr><td style="text-align:center">179</td><td style="text-align:center">B3</td><td style="text-align:center">│</td><td style="text-align:center">243</td><td style="text-align:center">F3</td><td style="text-align:center">≤</td></tr><tr><td style="text-align:center">180</td><td style="text-align:center">B4</td><td style="text-align:center">┤</td><td style="text-align:center">244</td><td style="text-align:center">F4</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">181</td><td style="text-align:center">B5</td><td style="text-align:center">╡</td><td style="text-align:center">245</td><td style="text-align:center">F5</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">182</td><td style="text-align:center">B6</td><td style="text-align:center">╢</td><td style="text-align:center">246</td><td style="text-align:center">F6</td><td style="text-align:center">÷</td></tr><tr><td style="text-align:center">183</td><td style="text-align:center">B7</td><td style="text-align:center">╖</td><td style="text-align:center">247</td><td style="text-align:center">F7</td><td style="text-align:center">≈</td></tr><tr><td style="text-align:center">184</td><td style="text-align:center">B8</td><td style="text-align:center">╕</td><td style="text-align:center">248</td><td style="text-align:center">F8</td><td style="text-align:center">≈</td></tr><tr><td style="text-align:center">185</td><td style="text-align:center">B9</td><td style="text-align:center">╣</td><td style="text-align:center">249</td><td style="text-align:center">F9</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">186</td><td style="text-align:center">BA</td><td style="text-align:center">║</td><td style="text-align:center">250</td><td style="text-align:center">FA</td><td style="text-align:center">·</td></tr><tr><td style="text-align:center">187</td><td style="text-align:center">BB</td><td style="text-align:center">╗</td><td style="text-align:center">251</td><td style="text-align:center">FB</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">188</td><td style="text-align:center">BC</td><td style="text-align:center">╝</td><td style="text-align:center">252</td><td style="text-align:center">FC</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">189</td><td style="text-align:center">BD</td><td style="text-align:center">╜</td><td style="text-align:center">253</td><td style="text-align:center">FD</td><td style="text-align:center">²</td></tr><tr><td style="text-align:center">190</td><td style="text-align:center">BE</td><td style="text-align:center">╛</td><td style="text-align:center">FE</td><td style="text-align:center">■</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">191</td><td style="text-align:center">BF</td><td style="text-align:center">┐</td><td style="text-align:center">255</td><td style="text-align:center">FF</td><td style="text-align:center">ÿ</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ASCII码表&quot;&gt;&lt;strong&gt;ASCII码表&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;ASCII值&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;控制字符&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;ASCII值&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;控制字符&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;ASCII值&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;控制字符&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;ASCII值&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;控制字符&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NUL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(space)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;64&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;@&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;96&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;、&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SOH&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;！&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;65&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;A&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;97&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;STX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;34&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;”&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;66&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;98&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ETX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;35&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;#&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;67&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;99&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;EOT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;36&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;68&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ENQ&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;37&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;%&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;69&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;E&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;101&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ACK&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;38&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;70&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;F&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;102&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;BEL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;39&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;71&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;103&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;BS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;72&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;H&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;104&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;41&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;73&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;105&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;LF&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;42&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;74&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;J&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;106&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;VT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;43&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;75&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;K&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;107&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;FF&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;44&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;,&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;76&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;108&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CR&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;77&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;109&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;46&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;78&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;110&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SI&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;/&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;79&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;O&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;111&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DLE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;48&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;80&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;P&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DCI&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;49&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;81&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Q&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DC2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;82&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;R&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;114&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DC3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;51&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;83&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;115&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DC4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;52&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;84&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;T&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;116&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NAK&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;53&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;85&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;U&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;117&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SYN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;54&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;86&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;118&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;TB&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;87&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;W&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;119&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CAN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;56&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;88&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;25&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;EM&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;57&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;89&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;121&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;26&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SUB&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;58&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;:&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Z&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;122&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ESC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;59&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;91&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;123&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;28&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;FS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;60&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;92&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&#92;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;124&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;GS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;61&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;=&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;93&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;RS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;62&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;94&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;126&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;~&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;31&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;US&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;63&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;?&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;127&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DEL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>int main(int argc,char *argv [])</title>
    <link href="https://cuiluyi.gitee.io/2023/11/03/argc,argv/"/>
    <id>https://cuiluyi.gitee.io/2023/11/03/argc,argv/</id>
    <published>2023-11-03T14:56:35.000Z</published>
    <updated>2023-11-04T00:16:20.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="int-main-int-argc-char-argv">int main(int argc,char *argv [])</h2><p><code>int argc</code> 和 <code>char *argv[]</code> 是通常在 C 和 C++ 中用于处理命令行参数的两个参数，它们用于从命令行获取程序启动时传递给程序的参数信息。</p><ol><li class="lvl-4"><p><code>int argc</code>（Argument Count）：表示命令行参数的数量，即在程序启动时传递给程序的参数的个数。参数至少包括了程序名称本身，因此至少为 1。</p></li><li class="lvl-4"><p><code>char *argv[]</code>（Argument Vector）：是一个指向字符指针数组的指针，用于存储命令行参数的字符串。每个字符串表示一个命令行参数。<strong><code>argv[0]</code> 通常存储程序的名称</strong>，而 <code>argv[1]</code>、<code>argv[2]</code> 等存储传递给程序的其他参数。</p></li></ol><h2 id="实例">实例</h2><p><strong><code>a.cpp</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// argc 表示参数的数量，包括程序名称本身</span></span><br><span class="line">    <span class="comment">// argv 是一个指向参数字符串的数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;argc = &quot;</span> &lt;&lt; argc &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印每个命令行参数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;argv[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; argv[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-用户不提供参数">1. 用户不提供参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\a.exe</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202311032300431.png" alt="image-20231103230027354"></p><h3 id="2-用户提供参数">2. 用户提供参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\a.exe 0 1 2</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202311032301519.png" alt="image-20231103230121475"></p><blockquote><ul class="lvl-1"><li class="lvl-6"><p><strong><code>argv[0]</code> 由OS自动赋值，存储程序的名称</strong></p></li><li class="lvl-6"><p><strong><code> argc≥1</code></strong></p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;int-main-int-argc-char-argv&quot;&gt;int main(int argc,char *argv [])&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;int argc&lt;/code&gt; 和 &lt;code&gt;char *argv[]&lt;/code&gt; 是通常在 C 和 C++</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>基本数据类型的精度及范围</title>
    <link href="https://cuiluyi.gitee.io/2023/10/20/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%8F%8A%E8%8C%83%E5%9B%B4/"/>
    <id>https://cuiluyi.gitee.io/2023/10/20/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%8F%8A%E8%8C%83%E5%9B%B4/</id>
    <published>2023-10-20T00:36:49.000Z</published>
    <updated>2023-10-20T01:07:37.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310200836229.png" alt="img"></p><span id="more"></span><h2 id="整型">整型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围1</th><th style="text-align:center">取值范围2</th></tr></thead><tbody><tr><td style="text-align:center"><code>char</code></td><td style="text-align:center">1</td><td style="text-align:center">$$-2^{7}$$   ~   $$2^{7}-1$$</td><td style="text-align:center">-128 ~ 127</td></tr><tr><td style="text-align:center"><code>unsigned char</code></td><td style="text-align:center">1</td><td style="text-align:center">0   ~   $$2^{8}-1$$</td><td style="text-align:center">0 ~ 255</td></tr><tr><td style="text-align:center"><code>short</code></td><td style="text-align:center">2</td><td style="text-align:center">$$-2^{15}$$   ~   $$2^{15}-1$$</td><td style="text-align:center">$$-3.2\times 10^{4}$$ ~ $$3.2\times 10^{4}$$</td></tr><tr><td style="text-align:center"><code>unsigned short</code></td><td style="text-align:center">2</td><td style="text-align:center">0   ~   $$2^{16}-1$$</td><td style="text-align:center">0 ~ $$6.5\times 10^{4}$$</td></tr><tr><td style="text-align:center"><code>int</code>/<code>long</code></td><td style="text-align:center">4</td><td style="text-align:center">$$-2^{31}$$   ~   $$2^{31}-1$$</td><td style="text-align:center">$$-2.1\times 10^{9}$$ ~ $$2.1\times 10^{9}$$</td></tr><tr><td style="text-align:center"><code>unsigned int</code>/<code>unsigned long</code></td><td style="text-align:center">4</td><td style="text-align:center">0   ~   $$2^{32}-1$$</td><td style="text-align:center">0 ~ $$4.2\times 10^{9}$$</td></tr><tr><td style="text-align:center"><code>long long</code></td><td style="text-align:center">8</td><td style="text-align:center">$$-2^{63}$$   ~   $$2^{63}-1$$</td><td style="text-align:center">$$-9.2\times 10^{18}$$ ~ $$9.2\times 10^{18}$$</td></tr><tr><td style="text-align:center"><code>unsigned long long</code></td><td style="text-align:center">8</td><td style="text-align:center">0   ~   $$2^{64}-1$$</td><td style="text-align:center">0 ~ $$1.8\times 10^{19}$$</td></tr></tbody></table><h2 id="浮点型">浮点型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围（绝对值）</th></tr></thead><tbody><tr><td style="text-align:center"><code>float</code></td><td style="text-align:center">4</td><td style="text-align:center">$$1.17549\times 10^{-38}$$   ~   $$3.40282\times 10^{38}$$</td></tr><tr><td style="text-align:center"><code>double</code></td><td style="text-align:center">8</td><td style="text-align:center">$$2.22507\times 10^{-308}$$   ~   $$1.79769\times 10^{308}$$</td></tr><tr><td style="text-align:center"><code>long double</code></td><td style="text-align:center">12</td><td style="text-align:center">$$2.22507\times 10^{-308}$$   ~   $$1.79769\times 10^{308}$$</td></tr></tbody></table><blockquote><p><a href="https://blog.csdn.net/qq_52911954/article/details/125528446">C语言——数据类型、基本数据类型的取值范围_c语言数据类型取值范围_Lydialyy的博客-CSDN博客</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310200836229.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>INT_MAX，INT_MIN</title>
    <link href="https://cuiluyi.gitee.io/2023/10/15/INT_MAX%EF%BC%8CINT_MIN/"/>
    <id>https://cuiluyi.gitee.io/2023/10/15/INT_MAX%EF%BC%8CINT_MIN/</id>
    <published>2023-10-15T15:50:27.000Z</published>
    <updated>2023-11-26T06:30:12.442Z</updated>
    
    <content type="html"><![CDATA[<h1>INT_MAX，INT_MIN</h1><h2 id="介绍">介绍</h2><p>C中<strong>常量</strong><code>INT_MAX</code>和<code>INT_MIN</code>分别表示int类型的最大值和最小值</p><blockquote><ol><li class="lvl-3"><p><code>INT_MAX</code> = 2^31-1 = 2147483647<code>INT_MIN</code> = -2^31 = -2147483648</p></li><li class="lvl-3"><p>所有超过该限值的int类型变量，都会出现溢出，出现warning，但是并不会出现error。</p></li><li class="lvl-3"><p>如果想表示的整数超过了该限值，可以使用长整型long long （占8字节64位）表示。</p></li></ol></blockquote><span id="more"></span><h2 id="运算">运算</h2><p>由于二进制编码按原码、补码和反码的规则进行运算，所有程序中对INT_MAX和INT_MIN的运算应当格外注意，在出现溢出的时候，不遵循数学规则。</p><ul class="lvl-0"><li class="lvl-4"><p><code>INT_MAX + 1 = INT_MIN</code></p></li><li class="lvl-4"><p><code>INT_MIN - 1 = INT_MAX</code></p></li><li class="lvl-4"><p><code>abs(INT_MIN) = INT_MIN</code></p></li></ul><p>比较有趣的是，<code>INT_MAX + 1 &lt; INT_MAX</code>， <code>INT_MIN - 1 &gt; INT_MIN</code>， <code>abs(INT_MIN) &lt; 0</code></p><h2 id="实例">实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=MAX_INT;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a); </span><br><span class="line"><span class="type">int</span> b=INT_MIN;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121414941.png" alt="image-20221003094125792" style="zoom: 67%;" />]]></content>
    
    
    <summary type="html">&lt;h1&gt;INT_MAX，INT_MIN&lt;/h1&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;C中&lt;strong&gt;常量&lt;/strong&gt;&lt;code&gt;INT_MAX&lt;/code&gt;和&lt;code&gt;INT_MIN&lt;/code&gt;分别表示int类型的最大值和最小值&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;&lt;code&gt;INT_MAX&lt;/code&gt; = 2^31-1 = 2147483647				&lt;code&gt;INT_MIN&lt;/code&gt; = -2^31 = -2147483648&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;所有超过该限值的int类型变量，都会出现溢出，出现warning，但是并不会出现error。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;如果想表示的整数超过了该限值，可以使用长整型long long （占8字节64位）表示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="https://cuiluyi.gitee.io/2023/10/15/%E6%8C%87%E9%92%88/"/>
    <id>https://cuiluyi.gitee.io/2023/10/15/%E6%8C%87%E9%92%88/</id>
    <published>2023-10-15T15:48:27.000Z</published>
    <updated>2024-02-21T18:23:02.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针">指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一：</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// p是空指针，没有分配内存单元</span></span><br><span class="line"><span class="comment">//*p=4错误</span></span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二：</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)); <span class="comment">// p分配了内存单元，存有内存单元的地址</span></span><br><span class="line">*p = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;指针&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>ERROR</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/ERROR/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/ERROR/</id>
    <published>2023-10-12T06:33:49.000Z</published>
    <updated>2023-10-12T06:33:38.435Z</updated>
    
    <content type="html"><![CDATA[<h1>Error</h1><h2 id="reference-to-left-right-is-ambiguous"><code>reference to 'left'/'right' is ambiguous</code></h2><h3 id="原因">原因</h3><blockquote><p><strong>自定义的left 变量和right变量 与库中重名</strong></p></blockquote><h3 id="解决">解决</h3><p>​<strong>修改一下变量名left和right</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1&gt;Error&lt;/h1&gt;
&lt;h2 id=&quot;reference-to-left-right-is-ambiguous&quot;&gt;&lt;code&gt;reference to &#39;left&#39;/&#39;right&#39; is ambiguous&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&quot;原因&quot;&gt;原因&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;自定义的left 变量和right变量 与库中重名&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决&quot;&gt;解决&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;修改一下变量名left和right&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>万能头文件</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2023-10-12T06:31:49.000Z</published>
    <updated>2023-10-12T06:30:51.916Z</updated>
    
    <content type="html"><![CDATA[<h1>万能头文件</h1><h2 id="介绍">介绍</h2><p>万能头文件**<code>#include &lt;bits/stdc++.h&gt;</code>**<mark><strong>包含了目前c++所包含的所有头文件！！！！</strong></mark></p><h2 id="举例">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看我们开挂以后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别注意">特别注意</h2><ol><li class="lvl-3"><p>使用场景：当我们==<strong>忘记</strong>==<strong>某函数的头文件</strong>或者<strong>头文件较多</strong>时，可以用**<code>#include&lt;bits/stdc++.h&gt;</code>**代替。</p></li><li class="lvl-3"><p>缺点：</p><ul class="lvl-2"><li class="lvl-6"><strong>编译时间太长</strong>。</li><li class="lvl-6">**<code>#include &lt;bits/stdc++.h&gt;</code>**不是c++的标准头文件，部分编译器不支持。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;万能头文件&lt;/h1&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;万能头文件**&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;**&lt;mark&gt;&lt;strong&gt;包含了目前c++所包含的所有头文件！！！！&lt;/strong&gt;&lt;/mark</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>宏定义</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E5%AE%8F%E5%AE%9A%E4%B9%89/</id>
    <published>2023-10-12T06:29:49.000Z</published>
    <updated>2023-10-12T06:29:29.971Z</updated>
    
    <content type="html"><![CDATA[<h1>宏定义</h1><h2 id="宏常量"><strong>宏常量</strong></h2><p>我们最常使用到的#define的用法就是用#define来定义一个符号常量，而要修改时,只需修改#define这条语句就行了,不必每处代码都修改例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR <span class="string">&quot;圆周率约等于&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %f&quot;</span>,STR,PI); <span class="comment">//预处理时会被替换为 printf(&quot;%s %f&quot;,&quot;圆周率约等于&quot;,3.14);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>运行结果:<br><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429733.png" alt="在这里插入图片描述"></p><h2 id="宏语句"><strong>宏语句</strong></h2><p>我们还可以用宏定义一条或多条语句例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Print printf(<span class="string">&quot;hello world!&quot;</span>)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Print;  <span class="comment">//预处理时会被替换为 printf(&quot;hello world!&quot;);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>操作结果:<br><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429680.png" alt="在这里插入图片描述"></p><h2 id="宏函数"><strong>宏函数</strong></h2><p>我还可以用宏来定义函数,因为宏定义也可以带参数例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Print(str) printf(<span class="string">&quot;%s&quot;</span>,str)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Print(<span class="string">&quot;这是一个只有一条语句的宏函数!&quot;</span>);</span><br><span class="line">    <span class="comment">//预处理时会被替换为 printf(&quot;%s&quot;,&quot;这是一个只有一条语句的宏函数!&quot;)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429685.png" alt="在这里插入图片描述"></p><h2 id="其它"><strong>其它</strong></h2><p><strong>1.#undef 是用来撤销宏定义的，用法如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.141592654</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line"><span class="comment">//下面开始 PI 就失效了</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p><strong>2.使用ifndef防止头文件被重复包含和编译</strong></p><p>这是宏定义的一种，它可以根据是否已经定义了一个变量来进行分支选择，一般用于调试等等.实际上确切的说这应该是预处理功能中三种（宏定义，文件包含和条件编译）中的一种----条件编译。 C语言在对程序进行编译时，会先根据预处理命令进行“预处理”。C语言编译系统包括预处理，编译和链接等部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> x <span class="comment">//先测试x是否被宏定义过</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x <span class="comment">//如果没有宏定义下面就宏定义x并编译下面的语句</span></span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//如果已经定义了则编译#endif后面的语句</span></span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>条件指示符#ifndef检查预编译常量在前面是否已经被宏定义。如果在前面没有被宏定义,则条件指示符的值为真，于是从#ifndef到#endif之间的所有语句都被包含进来进行编译处理。相反，如果#ifndef指示符的值为假，则它与#endif指示符之间的行将被忽略。条件指示符#ifndef 的最主要目的是防止头文件的重复包含和编译。　　千万不要忽略了头件的中的#ifndef，这是一个很关键的东西。比如你有两个C文件，这两个C文件都include了同一个头文件。而编译时，这两个C文件要一同编译成一个可运行文件，于是问题来了，大量的声明冲突。</p><p>所以还是把头文件的内容都放在#ifndef和#endif中吧。不管你的头文件会不会被多个文件引用，你都要加上这个。一般格式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> <span class="string">&lt;标识&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="string">&lt;标识&gt;</span></span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>&lt;标识&gt;在理论上来说可以是自由命名的，但每个头文件的这个“标识”都应该是唯一的。标识的命名规则一般是头文件名全大写，前后加下划线，并把文件名中的“.”也变成下划线，如：stdio.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STDIO_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIO_H</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> xxx <span class="comment">//如果没有定义xxx</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xxx <span class="comment">//定义xxx</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//结束如果</span></span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>这个用法主要是在头文件中，主要是为了防止类重复的include，所以在类的头文件之前加上前面两个，用类名替代xxx，在最后加上最后一句</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;宏定义&lt;/h1&gt;
&lt;h2 id=&quot;宏常量&quot;&gt;&lt;strong&gt;宏常量&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;我们最常使用到的#define的用法就是用#define来定义一个符号常量，而要修改时,只需修改#define这条语句就行了,不必每处代码都修改例:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;stdio.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; PI 3.14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STR &lt;span class=&quot;string&quot;&gt;&amp;quot;圆周率约等于&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s %f&amp;quot;&lt;/span&gt;,STR,PI); &lt;span class=&quot;comment&quot;&gt;//预处理时会被替换为 printf(&amp;quot;%s %f&amp;quot;,&amp;quot;圆周率约等于&amp;quot;,3.14);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12345678&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>转义字符</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</id>
    <published>2023-10-12T06:27:49.000Z</published>
    <updated>2023-10-13T02:08:47.901Z</updated>
    
    <content type="html"><![CDATA[<h1>转义字符</h1><table><thead><tr><th style="text-align:center">转义字符</th><th style="text-align:center">字 符 值</th><th style="text-align:center">输 出 结 果</th></tr></thead><tbody><tr><td style="text-align:center"><code>\'</code></td><td style="text-align:center">一个单撇号（'）</td><td style="text-align:center">输出单撇号字符’</td></tr><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center">一个双撇号（&quot;）</td><td style="text-align:center">输出双撇号字符&quot;</td></tr><tr><td style="text-align:center"><code>\?</code></td><td style="text-align:center">一个人问号（?）</td><td style="text-align:center">输出问号字符?</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">一个反斜杠（\）</td><td style="text-align:center">输出反斜杠字符\</td></tr><tr><td style="text-align:center"><code>\a</code></td><td style="text-align:center">警告（alert）</td><td style="text-align:center">产生声音或视觉信号</td></tr><tr><td style="text-align:center"><code>\b</code></td><td style="text-align:center">退格（backspace）</td><td style="text-align:center">将光标当前位置后退一个字符</td></tr><tr><td style="text-align:center"><code>\f</code></td><td style="text-align:center">换页（from feed）</td><td style="text-align:center">将光标当前位置移到下一页的开头</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">换行</td><td style="text-align:center">将光标当前位置移到下一行的开头</td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">回车（carriagereturn）</td><td style="text-align:center">将光标当前位置移到本行的开头</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">水平制表符</td><td style="text-align:center">将光标当前位置移到下一个Tab位置</td></tr><tr><td style="text-align:center"><code>\v</code></td><td style="text-align:center">垂直制表符</td><td style="text-align:center">将光标当前位置移到下一个垂直表对齐点</td></tr><tr><td style="text-align:center"><code>\o</code>、<code>\oo</code>、<code>\ooo</code></td><td style="text-align:center">与该八进制码对应的ASCII字符，其中o表示一个八进制数字</td><td style="text-align:center">与该八进制码对应的字符</td></tr><tr><td style="text-align:center"><code>\xh[h...]</code></td><td style="text-align:center">与该十六进制码对应的ASCII字符，其中h代表一个十六进制数字</td><td style="text-align:center">与该十六进制码对应的字符</td></tr></tbody></table><p><strong>详解</strong></p><blockquote><p><a href="https://blog.csdn.net/qq_61552595/article/details/124109830?ops_request_misc=%7B%22request%5Fid%22%3A%22169709154416800192287021%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=169709154416800192287021&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-124109830-null-null.142%5Ev96%5Epc_search_result_base3&amp;utm_term=%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6&amp;spm=1018.2226.3001.4187">详解转义字符_小蜗牛~向前冲的博客-CSDN博客</a></p></blockquote><h1>输出<code>%</code></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%%&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;转义字符&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;转义字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;字 符 值&lt;/th&gt;
&lt;th style=&quot;text-align:ce</summary>
      
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>数组初始化</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2023-10-12T06:12:49.000Z</published>
    <updated>2023-10-12T06:13:28.094Z</updated>
    
    <content type="html"><![CDATA[<h1>数组的初始化</h1><h2 id="引例">引例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;全局数组：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n局部数组：\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121413439.png" alt="在这里插入图片描述"></p><p><strong>结论</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>全局数组的初始值为0</strong></p></li><li class="lvl-2"><p><strong>局部数组的初始值为随机数</strong></p></li></ul><span id="more"></span><h2 id="1-使用memset函数">1. 使用memset<a href="">函数</a></h2><p>[memset函数用法](<a href="https://blog.csdn.net/weixin_44162361/article/details/115790452?spm=1001.2014.3001.5506">(66条消息) memset的用法详解_薛定谔的猫ovo的博客-CSDN博客_memset</a>)</p><h3 id="头文件">头文件</h3><p><strong><code>#include &lt;cstring&gt;</code></strong></p><h3 id="原型">原型</h3><p><code>void *memset(void *s, int c, int count)</code></p><ul class="lvl-0"><li class="lvl-3"><p>s：为指针或是数组</p></li><li class="lvl-2"><p>c：是赋给s的值</p></li><li class="lvl-2"><p>count：是s的长度</p></li><li class="lvl-2"><p>返回类型是一个指向存储区s的指针。</p></li></ul><h3 id="作用">作用</h3><p>memset是一个初始化函数，作用是<strong>将某一块内存空间全部设置为指定的值</strong>。</p><h3 id="说明">说明</h3><p>memset可以方便的==<strong>清空</strong>或初始化一个<strong>数组</strong>。==</p><h3 id="举例">举例</h3><ol><li class="lvl-3"><p>将数组初始化为0</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>将数组清空</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br></pre></td></tr></table></figure><h2 id="2-赋值">2. 赋值</h2><ol><li class="lvl-3"><p>直接给每个元素赋值<br><code>int arr[5] = &#123;1,2,3,4,5&#125;;</code></p></li><li class="lvl-3"><p>给一部分赋值，后面的全部为0<br><code>int arr[5] = &#123;1,2&#125;;</code></p></li><li class="lvl-3"><p>由赋值参数个数决定数组的个数<br><code>int arr[] = &#123;1,2&#125;;</code></p></li><li class="lvl-3"><p>数组元素初始化为0<br><code>int array[4] = &#123;0&#125;;</code></p></li></ol><blockquote><p>注意：声明、初始化与赋值的区别</p><ul class="lvl-1"><li class="lvl-2">声明：<code>int a;</code></li><li class="lvl-2">初始化：<code>int a = 2;</code>（在声明的时候顺带赋值叫做初始化）</li><li class="lvl-2">赋值：<code>a = 2;</code></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1&gt;数组的初始化&lt;/h1&gt;
&lt;h2 id=&quot;引例&quot;&gt;引例&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;全局数组：&#92;n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;n局部数组：&#92;n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121413439.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;strong&gt;全局数组的初始值为0&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;strong&gt;局部数组的初始值为随机数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【自定义函数】</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E3%80%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E3%80%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E3%80%91/</id>
    <published>2023-10-12T05:59:27.000Z</published>
    <updated>2023-10-26T05:46:41.298Z</updated>
    
    <content type="html"><![CDATA[<h1>自定义函数</h1><h3 id="大数加法">大数加法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function">string <span class="title">addString</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>, j = b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = carry;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num += a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num += b[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="built_in">to_string</span>(num % <span class="number">10</span>);</span><br><span class="line">        carry = num / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="大数乘法">大数乘法</h3><p>假设 <code>i</code> 和 <code>j</code> 分别表示两个数的当前位，<code>result[i + j]</code> 存储了来自<strong>进位的累积值</strong>，而 <code>result[i + j + 1]</code> 存储了<strong>两位相乘后的最终结果</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">mulString</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len1 = a.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> len2 = b.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(len1 + len2, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = len2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mul = (a[i] - <span class="string">&#x27;0&#x27;</span>) * (b[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="type">int</span> sum = mul + res[i + j + <span class="number">1</span>];</span><br><span class="line">            res[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            res[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果转换为字符串</span></span><br><span class="line">    string result;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : res)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(result.<span class="built_in">empty</span>() &amp;&amp; num == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="built_in">to_string</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="built_in">empty</span>() ? <span class="string">&quot;0&quot;</span> : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成【m，n】（m-n）的随机数">生成【m，n】（m&lt;n）的随机数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span><span class="comment">//srand(time(0));</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">random</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rand</span>() % (n - m + <span class="number">1</span>) + m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放在主函数main()内部</span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="判断是否为闰年">判断是否为闰年</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-2"><p>闰年：二月29天，一年366天</p></li><li class="lvl-2"><p>非闰年：二月28天，一年365天</p></li></ul></blockquote><h3 id="求year的天数">求year的天数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">days</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">365</span> + <span class="built_in">leap</span>(year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求year年month月的天数">求year年month月的天数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">days</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">28</span> + <span class="built_in">leap</span>(year);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求关键字k的第p位">求关键字k的第p位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Radix</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k/<span class="built_in">pow</span>(<span class="number">10</span>,p<span class="number">-1</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121356542.png" alt="image-20221209092201927"></p><h3 id="判断质数">判断质数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)         <span class="comment">//注意是小于等于</span></span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因数个数">因数个数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">divisor</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            cnt += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i * i == n)</span><br><span class="line">        cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数个数">分解质因数个数</h3><p>求正整数$$N(N&gt;1)$$的质因数的个数。 相同的质因数需要重复计算。如$$120=2<em>2</em>2<em>3</em>5$$，共有$$5$$个质因数。</p><blockquote><p>我们求质因子的时候其实没有必要去先判断一个因子是否为质数，为什么呢？</p><ul class="lvl-1"><li class="lvl-6"><p>比如说一个因子为 11，是质数，那么无论前面怎么进行除法运算，一定有这个因子，所以质数因子不可能漏掉</p></li><li class="lvl-6"><p>而对于因子 4，它肯定可以转换成质因子之积：2×2，那么在前面已经被除过了，所以已经没有非质数因子了</p></li></ul><p>所以我们只需要从 2 开始遍历，遍历到$$\sqrt{n}$$即可，为什么是$$\sqrt{n}$$呢？</p><ul class="lvl-1"><li class="lvl-6"><p>因为任何一个数n至多存在一个大于$$\sqrt{n}$$且$$!=n$$的因子，所以如果存在，加1就好了。</p></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">prime_cnt</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在大于 sqrt(num) 的因子</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数gcd">最大公约数gcd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : <span class="built_in">gcd</span>(b,a%b);<span class="comment">//递归+辗转相除法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小公倍数lcm">最小公倍数lcm</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/<span class="built_in">gcd</span>(a,b)*b;<span class="comment">//有时候两数乘积会超过整数的范围,由此我们可以调整一下顺序:a/gcd(a,b)*b,   先除一下，这样就可以避免在一定程度上避免溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最小公倍数=两数乘积/最大公约数，即</p><p><strong>$$\left[ a,b \right] \cdot \left( a,b \right) =a\cdot b$$</strong></p></blockquote><h3 id="四舍五入精确到小数点后i位">四舍五入精确到小数点后i位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">rounding</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">//四舍五入保留i位小数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=<span class="number">0</span>)<span class="keyword">return</span>  (<span class="type">int</span>)(a*<span class="built_in">pow</span>(<span class="number">10</span>,i)+<span class="number">0.5</span>)/<span class="built_in">pow</span>(<span class="number">10</span>,i);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">return</span>  (<span class="type">int</span>)(a*<span class="built_in">pow</span>(<span class="number">10</span>,i)- <span class="number">0.5</span>)/<span class="built_in">pow</span>(<span class="number">10</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为“指定字符”">判断是否为“指定字符”</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isVowel</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s=<span class="string">&quot;aeiouAEIOU&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">find</span>(ch)!=string::npos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为-闰年">判断是否为 闰年</h3><blockquote><p>闰年：被 4 整除且不能被 100 整除 或者 可以被 400 整除</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)||n%<span class="number">400</span>==<span class="number">0</span>); <span class="comment">//Attention:最外面必须有一个（）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用sort自定义cmp函数">使用sort自定义cmp函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score!=b.score)</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.number&lt;b.number;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">return</span> a.score!=b.score ? a.score&gt;b.score : a.number &lt; b.nember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> node a,<span class="keyword">struct</span> node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.height!=b.height ? a.height&gt;b.height : a.name &lt; b.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    string school;</span><br><span class="line">    <span class="type">int</span> tws, ns;<span class="comment">//加权总分total weighted score(tws)    考生人数number of students()</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.tws != b.tws)</span><br><span class="line">        <span class="keyword">return</span> a.tws &gt; b.tws;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.ns != b.ns)</span><br><span class="line">        <span class="keyword">return</span> a.ns &lt; b.ns;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.school &lt; b.school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：类型为void类型时，可以不带return语句，系统会自动加上一个return语句</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1&gt;自定义函数&lt;/h1&gt;
&lt;h3 id=&quot;大数加法&quot;&gt;大数加法&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;string &lt;span class=&quot;title&quot;&gt;addString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string a, string b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; carry = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = a.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j = b.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || carry)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; num = carry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num += a[i] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num += b[j] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res += &lt;span class=&quot;built_in&quot;&gt;to_string&lt;/span&gt;(num % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        carry = num / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;(res.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), res.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>最大子列和</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C/</id>
    <published>2023-10-12T05:59:27.000Z</published>
    <updated>2023-10-23T07:15:20.105Z</updated>
    
    <content type="html"><![CDATA[<h1>最大子列和</h1><h2 id="类型一">类型一</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310231458556.png" alt="image-20231023145758457"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxSubseqSum</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> thissum = <span class="number">0</span>, maxsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        thissum += A[i];        <span class="comment">/* 向右累加 */</span></span><br><span class="line">        <span class="keyword">if</span> (thissum &gt; maxsum)   <span class="comment">/* 发现更大和则更新当前结果 */</span></span><br><span class="line">            maxsum = thissum;</span><br><span class="line">        <span class="keyword">if</span> (thissum &lt; <span class="number">0</span>)        <span class="comment">/* 如果当前子列和为负 */</span></span><br><span class="line">            thissum = <span class="number">0</span>;        <span class="comment">/* 则不可能使后面的部分和增大，抛弃之 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型二">类型二</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310231513494.png" alt="image-20231023151341432"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxSubseqSum</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> thissum = <span class="number">0</span>, maxsum = -MAX_INT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        thissum += A[i];        <span class="comment">/* 向右累加 */</span></span><br><span class="line">        <span class="keyword">if</span> (thissum &gt; maxsum)   <span class="comment">/* 发现更大和则更新当前结果 */</span></span><br><span class="line">            maxsum = thissum;</span><br><span class="line">        <span class="keyword">if</span> (thissum &lt; <span class="number">0</span>)        <span class="comment">/* 如果当前子列和为负 */</span></span><br><span class="line">            thissum = <span class="number">0</span>;        <span class="comment">/* 则不可能使后面的部分和增大，抛弃之 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只需更改maxsum的初值即可<code>int maxsum = -MAX_INT</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;最大子列和&lt;/h1&gt;
&lt;h2 id=&quot;类型一&quot;&gt;类型一&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310231458556.png&quot; alt=&quot;image-202310231</summary>
      
    
    
    
    
    <category term="算法" scheme="https://cuiluyi.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>字符数组&amp;&amp;字符串</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84&amp;&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84&amp;&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-10-12T05:49:27.000Z</published>
    <updated>2023-10-12T06:08:41.892Z</updated>
    
    <content type="html"><![CDATA[<h1>字符数组&amp;&amp;字符串</h1><h2 id="字符数组">字符数组</h2><p>​我们知道定义一个数组时需要为其指定相应的变量类型。也就是说，定义了数组的类型之后这个数组中的所有变量就都是相同的类型。现在我们就来定义一个<strong>字符数组</strong>，如下：</p><p><code>char hello[5] = &#123;'H','e','l','l','o'&#125;;</code></p><p>​这样我们就定义了一个字符型的数组，对于数组型的变量这样定义是没有问题的，但有两个方面的不足：</p><ol><li class="lvl-5"><p>定义的过程比较麻烦，在数组变量初始化时需要逐个写出每一个字符，并在这每一个字符的两端加上一对单引号。</p></li><li class="lvl-5"><p>在显示字符数组时，我们通常希望能够让其一次性的显示出来，而不是通过循环数组的方式逐个显示这些字符。</p></li></ol><p>​例如上面定义的数组我们想要用printf将其显示出来我们则需要通过循环的方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">5</span>] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, hello[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="字符串">字符串</h2><p>​其实，在C语言中支持直接定义<strong>字符串</strong>的方式，定义字符数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">6</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hello);</span><br></pre></td></tr></table></figure><p>​注意，我们在定义这个数组时，指定数组的大小为6，也就是说需要申请6个字节的存储空间，而在等号右侧的双引号中我们却只书写了5个字符。这并不是笔误，C语言规定当使用**<font color='red'>双引号定义字符串</font><strong>时以==</strong><code>'\0'</code><strong>==作为这个字符串的</strong><font color='blue'>结束标志符</font>**，也就是说这个字符串一共有6个字符，分别是<code>'H'</code>、<code>'e'</code>、<code>'l'</code>、<code>'l'</code>、<code>'o'</code>、<code>'\0'</code></p><blockquote><p>关于<code>'\0'</code>读者只需要知道这是一个特殊的字符即可，它表示字符串的结束，它的值为0。</p></blockquote><p>​这样我们就可以通过printf函数将这个字符串直接打印出来。需要注意的是，**当使用<code>printf(“%s”,  )</code>来显示字符串时，我们要确保这个<font color='red'>字符串变量中最后一个结束字符为\0</font>，如果结束字符不是\0则printf在显示这个字符串时，就不知道显示到何处结束，**例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">5</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hello);</span><br><span class="line"></span><br><span class="line">Hello#@($<span class="number">0948</span>#.<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>​也就是说，我们虽然定义了一个字符串，但只定义了5个字符的长度，而使用双引号为其初始化时，这个字符串的<strong>实际大小应该是6</strong>，因为要<strong>追加一个<code>\0</code></strong>，但我们在定义数组大小时只指定其大小是5，所以这个数组中的中只有5个元素是<code>'H'</code>、<code>'e'</code>、<code>'l'</code>、<code>'l'</code>、<code>'o'</code>。而在’o’之后并没有<code>'\0'</code>，所以在<code>printf</code>显示这个字符串时，显示 Hello之后，并不知道何时结束，所以就会继续显示，直到遇到一个<code>'\0'</code>为止，于是我们程序就出现了非预期的结果。这样的程序并不是我们提倡的，**我们在定义字符串时一定要为其<font color='red'>多分配一个字符的长度</font>，以便存放<font color='blue'>字符串结束符<code>'\0'</code></font>。**当然，使用双引号定义的字符串可以像使用普通数组一样使用其数组元素，例如ABC运行结果可以看到直接显示字符串和循环显示字符数组中的元素的效果是一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">6</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(str); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>​在这里我们使用了另一个重要函数sizeof()，它的作用是可以计算出某一个变量或类型的大小，就是占用的内存字节数，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d\n&quot;</span>, </span><br><span class="line">        <span class="built_in">sizeof</span>(ch), </span><br><span class="line">        <span class="built_in">sizeof</span>(sh), </span><br><span class="line">        <span class="built_in">sizeof</span>(i), </span><br><span class="line">        <span class="built_in">sizeof</span>(<span class="type">long</span>), </span><br><span class="line">        <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>​请注意，long类型的变量在不同的操作系统下占用字节数可能不同，请参数参见《变量大小》。另外在使用sizeof来计算数组大小时，计算的是数组一共占用内存的字节数，而不是数组的元素元素的个数，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure><p>​上面例子的结果是16而不是4。</p><h2 id="输入对比">输入对比</h2><ol><li class="lvl-5"><p>字符数组</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">50</span>];<span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-5"><p>字符串</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">50</span>];<span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121407458.png" alt="image-20221010181124750"></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;字符数组&amp;amp;&amp;amp;字符串&lt;/h1&gt;
&lt;h2 id=&quot;字符数组&quot;&gt;字符数组&lt;/h2&gt;
&lt;p&gt;​	我们知道定义一个数组时需要为其指定相应的变量类型。也就是说，定义了数组的类型之后这个数组中的所有变量就都是相同的类型。现在我们就来定义一个&lt;strong&gt;字符数组&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char hello[5] = &amp;#123;&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	这样我们就定义了一个字符型的数组，对于数组型的变量这样定义是没有问题的，但有两个方面的不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-5&quot;&gt;
&lt;p&gt;定义的过程比较麻烦，在数组变量初始化时需要逐个写出每一个字符，并在这每一个字符的两端加上一对单引号。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-5&quot;&gt;
&lt;p&gt;在显示字符数组时，我们通常希望能够让其一次性的显示出来，而不是通过循环数组的方式逐个显示这些字符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	例如上面定义的数组我们想要用printf将其显示出来我们则需要通过循环的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; hello[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;H&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;e&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;, hello[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【C++标准库函数】</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E3%80%90C++%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E3%80%90C++%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%91/</id>
    <published>2023-10-12T05:35:27.000Z</published>
    <updated>2024-02-21T17:55:27.525Z</updated>
    
    <content type="html"><![CDATA[<h1>C++标准库函数</h1><p>[TOC]</p><h2 id="max-element、min-element">max_element、min_element</h2><h3 id="头文件">头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用">作用</h3><p><strong>1. 求数组的最大值或最小值</strong></p><ul class="lvl-0"><li class="lvl-2"><p>普通数组</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = *<span class="built_in">max_element</span>(a, a + <span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> min = *<span class="built_in">min_element</span>(a, a + <span class="number">8</span>);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>vector容器</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = *<span class="built_in">max_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">int</span> min = *<span class="built_in">min_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());<span class="comment">//获取最小值</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>2. 求数组最大值最小值对应的下标</strong></p><ul class="lvl-0"><li class="lvl-2"><p>普通数组</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max_index = <span class="built_in">max_element</span>(a, a + <span class="number">8</span>) - a; </span><br><span class="line"><span class="type">int</span> min_index = <span class="built_in">min_element</span>(a, a + <span class="number">8</span>) - a;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>vector容器</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max_index = <span class="built_in">max_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>(); <span class="comment">//获取最大值对应的下标</span></span><br><span class="line"><span class="type">int</span> min_index = <span class="built_in">min_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>();<span class="comment">//获取最小值对应的下标</span></span><br></pre></td></tr></table></figure><h2 id="fill">fill</h2><h3 id="头文件-2">头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-2">作用</h3><p><a href="https://blog.csdn.net/liu16659/article/details/87152348?ops_request_misc=%7B%22request%5Fid%22%3A%22167715751316800188555444%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167715751316800188555444&amp;biz_id=0&amp;spm=1018.2226.3001.4187">(96条消息) C++ 中 fill() 的使用_LawsonAbs的博客-CSDN博客_c++ fill</a></p><h2 id="memset">memset</h2><h3 id="头文件-3">头文件</h3><p><strong><code>#include &lt;cstring&gt;</code></strong></p><h3 id="原型">原型</h3><p><code>void *memset(void *s, int c, int count)</code></p><ul class="lvl-0"><li class="lvl-3"><p>s：为指针或是数组</p></li><li class="lvl-3"><p>c：是赋给s的值</p></li><li class="lvl-3"><p>count：是s的长度</p></li><li class="lvl-3"><p>返回类型是一个指向存储区s的指针。</p></li></ul><h3 id="作用-3">作用</h3><p>memset是一个初始化函数，作用是<strong>将某一块内存空间全部设置为指定的值</strong>。</p><h3 id="说明">说明</h3><p>memset可以方便的==<strong>清空</strong>或初始化一个<strong>数组</strong>。==</p><h3 id="举例">举例</h3><ol><li class="lvl-3"><p>将数组初始化为0</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>将数组清空</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/weixin_44162361/article/details/115790452?ops_request_misc=%7B%22request%5Fid%22%3A%22169735623116800180650624%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169735623116800180650624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115790452-null-null.142%5Ev96%5Epc_search_result_base3&amp;utm_term=memset&amp;spm=1018.2226.3001.4187">memset的用法详解_薛定谔的猫ovo的博客-CSDN博客</a></p></blockquote><h2 id="memcmp">memcmp</h2><p>memcmp是比较内存区域buf1和buf2的前count个字节。该函数是按字节比较的</p><h3 id="基本原型">基本原型</h3><p>int memcmp(const void *buf1, const void *buf2, unsigned int count);</p><h3 id="功能">功能</h3><p>比较内存区域buf1和buf2的前count个字节。</p><h3 id="返回值">返回值</h3><ul class="lvl-0"><li class="lvl-4"><p>当buf1&lt;buf2时，返回值&lt;0</p></li><li class="lvl-4"><p>当buf1=buf2时，返回值=0</p></li><li class="lvl-4"><p>当buf1&gt;buf2时，返回值&gt;0</p></li></ul><h2 id="举例-2">举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> s1[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">r = <span class="built_in">memcmp</span>(&amp;s1,&amp;s2,<span class="built_in">strlen</span>(s1));</span><br><span class="line"><span class="keyword">if</span>(!r)<span class="comment">//！r 非零返回的是 1  这个是非运算，计算机是二进制的，不是零就是一了 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s1 and s2 are identical\n&quot;</span>);<span class="comment">/*s1等于s2*/</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s1 is less than s2\n&quot;</span>);<span class="comment">/*s1小于s2*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s1 is greater than s2\n&quot;</span>);<span class="comment">/*s1大于s2*/</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,!r); //输出是一， </span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,r);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="说明-2">说明:</h3><ol><li class="lvl-7"><p>该函数是按字节比较的：当s1,s2为字符串时</p><ul class="lvl-3"><li class="lvl-11"><p><code>memcmp(s1,s2,1)</code>就是比较s1和s2的第一个字节的ascII码值；</p></li><li class="lvl-11"><p><code>memcmp(s1,s2,n)</code>就是比较s1和s2的前n个字节的ascII码值；</p></li></ul></li></ol><p>例如:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *s1=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> *s2=<span class="string">&quot;acd&quot;</span>;</span><br><span class="line"><span class="type">int</span> r=<span class="built_in">memcmp</span>(s1,s2,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>比较s1和s2的前3个字节，第一个字节相等，第二个字节比较中大小已经确定，不必继续比较第三字节了所以$$r=-1$$.</p><ol start="2"><li class="lvl-7"><p>对于<code>memcmp()</code>，如果两个字符串相同而且<code>count</code>大于字符串长度的话，<code>memcmp</code>不会在<code>\0</code>处停下来，会继续比较<code>\0</code>后面的内存单元，直到<code>_res</code>不为零或者达到<code>count</code>次数。</p></li></ol><p>例如：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[]=<span class="string">&quot;ABCD&quot;</span>;</span><br><span class="line"><span class="type">char</span> a2[]=<span class="string">&quot;ABCD&quot;</span>;</span><br></pre></td></tr></table></figure><pre><code>对于`memcmp(a1,a2,10)`，`memcmp`在两个字符串的`\0`之后继续比较    所以，如果想使用memcmp比较字符串，要保证count不能超过最短字符串的长度，否则结果有可能是错误的。</code></pre></blockquote><h2 id="new">new</h2><h3 id="作用-4">作用</h3><p><code>new()</code>使计算机开辟一块内存空间，并返回<strong>内存空间的首地址</strong></p><h3 id="格式">格式</h3><ol><li class="lvl-3"><p>使用new来分配内存</p><pre><code> `ElementType*p=new ElementType;`</code></pre></li><li class="lvl-3"><p>使用new来分配内存并赋值</p><pre><code> `ElementType*p=new ElementType(data);`</code></pre></li><li class="lvl-3"><p>使用new函数创建数组</p><pre><code> `ElementType*p=new ElementType [size];`</code></pre></li><li class="lvl-3"><p><code>ElementType*p=new ElementType [size]&#123;&#125;;</code></p></li></ol><h3 id="说明-3">说明</h3><ol><li class="lvl-3"><p>new开辟的空间在堆上，而一般声明的变量存放在栈上</p></li><li class="lvl-3"><p><strong><font color='red'>通常用new函数代替malloc函数</font></strong></p></li><li class="lvl-3"><p>new不需要头文件</p></li></ol><h3 id="举例-3">举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">example1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 可以在new后面直接赋值</span></span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以单独赋值</span></span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    *p = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">example2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用new创建数组</span></span><br><span class="line">    <span class="type">int</span> *q = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 也可以依次赋值</span></span><br><span class="line">    <span class="type">int</span> *q = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        q[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">student *<span class="title">example3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里是用一个结构体指针接住结构体数组的首地址</span></span><br><span class="line">    <span class="comment">// 对于结构体指针，个人认为目前这种赋值方法比较方便</span></span><br><span class="line">    student *st = <span class="keyword">new</span> <span class="built_in">student</span>(&#123;<span class="string">&quot;abc&quot;</span>, <span class="number">90</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">student *<span class="title">example4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里是用一个结构体指针接住结构体数组的首地址</span></span><br><span class="line">    <span class="comment">// 对于结构体指针，个人认为目前这种赋值方法比较方便</span></span><br><span class="line">    student *stlist = <span class="keyword">new</span> student[<span class="number">3</span>]&#123;&#123;<span class="string">&quot;abc&quot;</span>, <span class="number">90</span>&#125;, &#123;<span class="string">&quot;bac&quot;</span>, <span class="number">78</span>&#125;, &#123;<span class="string">&quot;ccd&quot;</span>, <span class="number">93</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stlist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> e1 = <span class="built_in">example1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;e1: &quot;</span> &lt;&lt; e1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *e2 = <span class="built_in">example2</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        cout &lt;&lt; e2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    student *st1 = <span class="built_in">example3</span>();</span><br><span class="line">    cout &lt;&lt; st1-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st1-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    student *st2 = <span class="built_in">example4</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        cout &lt;&lt; st2[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st2[i].score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202402201656921.png" alt="image-20240220165632598"></p><h2 id="swap">swap</h2><h3 id="作用-5">作用</h3><p>**<code>swap(a,b);</code><strong>交换两个变量</strong><code>a,b</code>**的值</p><blockquote><p><strong><code>a,b</code><strong>可以是</strong><font color='red'>任何数据类型</font></strong></p></blockquote><h3 id="原型-2">原型</h3><p><strong><code>void swap ( ElementType &amp;a, ElementType &amp;b);</code></strong></p><h3 id="举例-4">举例</h3><h4 id="例一">例一</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a,b);</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b; <span class="comment">// 2 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121336975.png" alt="image-20221208182201962"></p><h4 id="例二">例二</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a = <span class="string">&quot;ABCD&quot;</span>;     string b = <span class="string">&quot;function&quot;</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121336032.png" alt="image-20221208182533843"></p><h2 id="reverse">reverse</h2><h3 id="头文件-4">头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-6">作用</h3><p>反转在**<font color='red'> [ first,last ) </font>**范围内的顺序（包括first指向的元素，不包括last指向的元素）</p><h3 id="原型-3">原型</h3><p><strong><code>void reverse (BidirectionalIterator first,BidirectionalIterator last);</code></strong></p><ul class="lvl-0"><li class="lvl-2"><p>参数first：待排区域的**<font color='blue'>起始地址</font>**</p></li><li class="lvl-2"><p>参数last：待排区域的**<font color='blue'>末尾地址</font>**</p></li></ul><h3 id="举例-5">举例</h3><ul class="lvl-0"><li class="lvl-2"><p>反转<strong>向量</strong><font color='blue'><strong>vector</strong></font></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>( v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//v的值为1,2,3,4,5</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>反转数组**<code>ElementType A[]</code>**</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> A[]=&#123;<span class="number">12</span>,<span class="number">-5</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(A, A+<span class="number">6</span>);<span class="comment">//数组A为19,1,7,0,-5,12</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>反转<strong>字符串<font color='blue'>string</font></strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;www.mathor.top&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());<span class="comment">//str结果为pot.rohtam.wwww</span></span><br></pre></td></tr></table></figure><h2 id="sort">sort</h2><h3 id="头文件-5">头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-7">作用</h3><p>对==<strong><font color='red'>数组排序</font></strong>==</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>数组可以是**<code>ElementType A[]</code>**，也可以是 <strong><code>vector &lt;ElementType&gt; A</code></strong></p><ul class="lvl-3"><li class="lvl-6"><strong><code>ElementType A[]</code></strong>：<strong><code>A</code><strong>表示</strong><font color='blue'>数组首地址</font></strong>，<strong><code>A+n</code><strong>表示</strong><font color='blue'>数组尾部</font></strong></li><li class="lvl-6"><strong><code>vector &lt;ElementType&gt; A</code></strong>：<strong><code>A.begin()</code><strong>和</strong><code>A.end()</code><strong>表示</strong><font color='blue'>头尾</font></strong></li></ul></li></ul></blockquote><h3 id="原型-4">原型</h3><table><thead><tr><th>默认</th><th><strong><code>void sort(RandomAccessIterator first,RandomAccessIterator last);</code></strong></th></tr></thead><tbody><tr><td><strong>自定义</strong></td><td><strong><code>void sort(RandomAccessIterator first,RandomAccessIterator last,Compare comp);</code></strong></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>参数first：待排数组的**<font color='blue'>起始地址</font>**</p></li><li class="lvl-2"><p>参数last：待排数组的**<font color='blue'>末尾地址</font>**</p></li><li class="lvl-2"><p>参数comp：自定义排序方法</p><ul class="lvl-2"><li class="lvl-6">如果第三个参数不写，则<strong>默认的排序方法</strong>是**<font color='red'>从小到大</font>**排序。</li></ul></li></ul><h3 id="举例-6">举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// cmp函数返回的值是bool类型</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">// 从大到⼩排列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">cin &gt;&gt; v[i];</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">// 因为这里没有传入参数cmp，所以按照默认,v从小到大排列</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + <span class="number">10</span>, cmp); <span class="comment">// arr从大到小排列，因为cmp函数排序规则设置了从大到小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见cmp函数">常见cmp函数</h3><ul class="lvl-0"><li class="lvl-2"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score!=b.score)</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.number&lt;b.number;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">return</span> a.score!=b.score ? a.score&gt;b.score : a.number &lt; b.nember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> node a,<span class="keyword">struct</span> node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.height!=b.height ? a.height&gt;b.height : a.name &lt; b.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    string school;</span><br><span class="line">    <span class="type">int</span> tws, ns;<span class="comment">//加权总分total weighted score(tws)    考生人数number of students()</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.tws != b.tws)</span><br><span class="line">        <span class="keyword">return</span> a.tws &gt; b.tws;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.ns != b.ns)</span><br><span class="line">        <span class="keyword">return</span> a.ns &lt; b.ns;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.school &lt; b.school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注： <strong><code>sort</code></strong> 函数的 <strong><code>cmp</code></strong> 必须按照规定来写，即必须只是 <strong><code>&gt;</code></strong> 或者 <strong><code>&lt;</code></strong> ，比如： <strong><code>return a &gt; b;</code></strong> 或者 <strong><code>return a &lt; b;</code></strong> 而不能是 <strong><code>&lt;=</code></strong> 或者 <strong><code>&gt;=</code></strong></p></blockquote><h2 id="find">find</h2><h2 id="copy">copy</h2><h1>typedef</h1><h2 id="介绍">介绍</h2><pre><code>使用关键字`typedef`可以为数据类型起一个新的别名</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  oldName  newName;</span><br><span class="line">newName a,b;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>oldName</code> 是类型原来的名字，</p></li><li class="lvl-2"><p><code>newName</code> 是类型新的名字</p></li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  oldName  newName;</span><br></pre></td></tr></table></figure><p><mark><code>typedef</code>去掉，<code>oldname</code>保留，<code>newname</code>换成a,b</mark></p></blockquote><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oldName a,b;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ol><li class="lvl-3">typedef 是赋予<strong>现有类型</strong>一个<strong>新的名字</strong>，而==<strong>不是创建新的类型</strong>==。</li><li class="lvl-3">为了“见名知意”，请尽量使用含义明确的标识符，并且尽量大写。</li><li class="lvl-3"><mark><font color='red'><strong>最后的分号<code>;</code>不要忘记</strong></font></mark></li></ol></blockquote><h2 id="定义">定义</h2><ol><li class="lvl-3"><p>typedef给如<code>int</code>，<code>double</code>，<code>char</code>，<code>long</code>，<code>float</code> 等类型定义别名</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER;</span><br><span class="line">INTEGER a, b;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li class="lvl-3"><p><strong>typedef 给数组类型定义别名</strong></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> array[<span class="number">20</span>];</span><br><span class="line">array a1, a2, s1, s2;</span><br></pre></td></tr></table></figure><p>它等价于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[<span class="number">20</span>], a2[<span class="number">20</span>], s1[<span class="number">20</span>], s2[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><blockquote><p>注：数组也是有类型的。例如char a1[20];定义了一个数组 a1，它的类型就是 <mark><strong>char [20]</strong></mark>。</p></blockquote><hr><ol start="3"><li class="lvl-3"><p><strong>typedef 给结构体类型定义别名</strong></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125; stu;</span><br></pre></td></tr></table></figure><p><code>stu</code>  是 <code>struct node</code> 的别名，可以用 <code>stu</code> 定义结构体变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu x;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> x;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li class="lvl-3"><p><strong>typedef 给结构数组类型定义别名</strong></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span></span><br><span class="line">&#123;</span><br><span class="line">VertexType data;<span class="comment">//顶点信息</span></span><br><span class="line">ArcNode* firstarc;<span class="comment">//指向第一条依附该顶点的边</span></span><br><span class="line">&#125;VNode,AdjList[MVNum];<span class="comment">//AdjList表示邻接表类型</span></span><br><span class="line"><span class="comment">//AdjList v相当于VNode v[MVNum]</span></span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p><strong>typedef 给指针类型定义别名</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>例一</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_ARR)</span>[4]</span>;</span><br></pre></td></tr></table></figure><blockquote><p>表示 PTR_TO_ARR 是类型<code>int [4] * </code>的别名，它是一个==<strong>二维数组指针</strong>==类型。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTR_TO_ARR p;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p)[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><hr><ul class="lvl-0"><li class="lvl-2"><p>例二</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> * PTR_TO_ARR [<span class="number">4</span>];</span><br></pre></td></tr></table></figure><blockquote><p>表示 PTR_TO_ARR 是类型<code>int * [4]</code>的别名，它是一个==<strong>元素指向整形数据的指针数组</strong>==类型。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTR_TO_ARR p;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * p [<span class="number">4</span>];</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p><strong>typedef为函数指针类型定义别名</strong></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_FUNC)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">PTR_TO_FUNC pfunc;</span><br></pre></td></tr></table></figure><h2 id="示例">示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">char</span> <span class="params">(*PTR_TO_ARR)</span>[30]</span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_FUNC)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">3</span>][<span class="number">30</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;百度搜索引擎&quot;</span>,</span><br><span class="line">    <span class="string">&quot;C-Language&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PTR_TO_ARR parr = str;</span><br><span class="line">    PTR_TO_FUNC pfunc = max;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max: %d\n&quot;</span>, (*pfunc)(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str[%d]: %s\n&quot;</span>, i, *(parr+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">max: <span class="number">20</span></span><br><span class="line">str[<span class="number">0</span>]: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">str[<span class="number">1</span>]: 百度搜索引擎</span><br><span class="line">str[<span class="number">2</span>]: C-Language</span><br></pre></td></tr></table></figure><h1>参考</h1><blockquote><ol><li class="lvl-5"><p><a href="https://blog.csdn.net/weixin_51635753/article/details/115434999?ops_request_misc=%7B%22request%5Fid%22%3A%22167049370716782414992762%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=167049370716782414992762&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-21-115434999-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&amp;utm_term=C%2B%2B%E8%87%AA%E5%B8%A6swap%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187">(82条消息) C++ STL 常用函数_Mr.bei的博客-CSDN博客_c++stl常用函数</a></p></li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1&gt;C++标准库函数&lt;/h1&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;max-element、min-element&quot;&gt;max_element、min_element&lt;/h2&gt;
&lt;h3 id=&quot;头文件&quot;&gt;头文件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;作用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 求数组的最大值或最小值&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;普通数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max = *&lt;span class=&quot;built_in&quot;&gt;max_element&lt;/span&gt;(a, a + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min = *&lt;span class=&quot;built_in&quot;&gt;min_element&lt;/span&gt;(a, a + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;vector容器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; a = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max = *&lt;span class=&quot;built_in&quot;&gt;max_element&lt;/span&gt;(a.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), a.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//获取最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min = *&lt;span class=&quot;built_in&quot;&gt;min_element&lt;/span&gt;(a.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), a.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;());&lt;span class=&quot;comment&quot;&gt;//获取最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【C++ STL】</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E3%80%90C++%20STL%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E3%80%90C++%20STL%E3%80%91/</id>
    <published>2023-10-12T05:29:27.000Z</published>
    <updated>2024-02-21T15:05:44.977Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">cppreference.com</a></p><h1>数组vector</h1><h2 id="头文件">头文件</h2><p><strong><code>#include &lt;vector&gt;</code></strong></p><h2 id="定义">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;ElementType&gt; v;</span><br></pre></td></tr></table></figure><blockquote><p>这里的ElementType可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br></pre></td></tr></table></figure><blockquote><p>定义一个向量v，<strong><font color='red'>大小为0</font></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><blockquote><p>先定义⼀个向量v，然后**<font color='red'>将长度resize为8</font>**，默认这8个元素都是0</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>定义具有10个int元素的向量v，<strong><font color='red'>默认这10个元素值都为0</font></strong></p></blockquote><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>定义具有10个int元素的向量v，且**<font color='red'>这10个元素值都为</font>**1</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(b);</span><br></pre></td></tr></table></figure><blockquote><p>先定义⼀个向量a，然后**<font color='red'>将向量b赋值给向量a</font>**（a的值完全等价于b的值）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(b.<span class="built_in">begin</span>(),b.begin+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>将向量b中从0-2（<strong><font color='blue'>共3个</font></strong>）的元素赋值给a，a的类型为int型</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(b, b + <span class="number">7</span>)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>从数组中获得初值</p></blockquote><h2 id="方法">方法</h2><p><a href="https://blog.csdn.net/weixin_41743247/article/details/90635931?ops_request_misc=%7B%22request%5Fid%22%3A%22167064353616800184186226%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167064353616800184186226&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90635931-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&amp;utm_term=vector&amp;spm=1018.2226.3001.4187">C++_vector操作</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回**<font color='red'>vector数组大小</font><strong>，类型</strong>unsigned int**</p></blockquote><p>🌮 如果v.size()==1，则v.size()-3为正数，必须int(a.size()) - 3才行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">resize</span>(n)</span><br></pre></td></tr></table></figure><blockquote><p>将向量 v的 <strong><font color='red'>元素个数调整为n个</font></strong>，<strong><font color='blue'>多则删，少则补（其值为0）</font></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">resize</span>(n,x)</span><br></pre></td></tr></table></figure><blockquote><p>将向量 v 的**<font color='red'>元素个数调整为n个</font><strong>，</strong><font color='blue'>多则删，少则补（其值为x）</font>**</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">clear</span>()</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>清空</font><strong>向量</strong>v</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">front</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回v的<font color='red'><strong>第一个元素</strong></font></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">back</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回v的<font color='red'><strong>最后一个元素</strong></font>，不检查这个数据是否存在</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">empty</span>()</span><br></pre></td></tr></table></figure><blockquote><p>检测 vector 是否为空：<mark><strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong></mark> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(x)</span><br></pre></td></tr></table></figure><blockquote><p>将 <strong>x</strong> 添加到**<font color='red'>向量 v 最后</font>**（<code>v.size</code>会加1）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>删除</font><strong>向量 v 的</strong><font color='red'>最后一个元素</font></strong>（<code>v.size</code>会减1）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">insert</span>(pos,elem)</span><br></pre></td></tr></table></figure><blockquote><p>在pos位置插入一个elem拷贝，传回新数据位置</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">insert</span>(pos,n,elem)</span><br></pre></td></tr></table></figure><blockquote><p>在pos位置插入n个elem数据,无返回值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">insert</span>(pos,beg,end)</span><br></pre></td></tr></table></figure><blockquote><p>在pos位置插入在[beg,end)区间的数据。无返回值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">erase</span>(pos);</span><br></pre></td></tr></table></figure><blockquote><p>删除pos位置的数据，传回下一个数据的位置</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">erase</span>(beg,end)</span><br></pre></td></tr></table></figure><blockquote><p>删除[beg,end)区间的数据，传回下一个数据的位置</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">assign</span>(beg,end)</span><br></pre></td></tr></table></figure><blockquote><p>将(beg; end)区间中的数据赋值给c</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">assign</span>(n,elem)</span><br></pre></td></tr></table></figure><blockquote><p>将n个elem的拷贝赋值给c</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.at(idx)</span><br></pre></td></tr></table></figure><blockquote><p>传回索引idx所指的数据，如果idx越界，抛出out_of_range。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.capacity()</span><br></pre></td></tr></table></figure><blockquote><p>返回容器中数据个数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.max_size()</span><br></pre></td></tr></table></figure><blockquote><p>返回容器中最大数据的数量</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.<span class="built_in">swap</span>(v2)</span><br></pre></td></tr></table></figure><blockquote><p>将vector:v1中的元素和vector:v2中的元素**<font color='red'>整体交换</font>**</p></blockquote><h2 id="举例">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除v[2]元素（即数字3）</span></span><br><span class="line">    v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After erasing v[2]: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除v[2]、v[3]、v[4]元素（即数字4、5、6）</span></span><br><span class="line">    v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + <span class="number">2</span>, v.<span class="built_in">begin</span>() + <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After erasing range from v[2] to v[4]: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用assign函数重新赋值</span></span><br><span class="line">    v.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">100</span>); <span class="comment">// 创建一个大小为5的vector，所有元素值为100</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After using assign to set 5 elements to 100: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用at函数访问元素</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> idxElement = v.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Element at index 2: &quot;</span> &lt;&lt; idxElement &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> out_of_range &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Out of range error: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中数据的个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of the vector: &quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中最大数据的数量（通常与size()相同）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max size of the vector: &quot;</span> &lt;&lt; v.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义另一个vector并与当前vector交换</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v2 = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v2)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">swap</span>(v2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : v2)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">After erasing v[2]: 1 2 4 5 6 7 8 9 10 </span><br><span class="line">After erasing range from v[2] to v[4]: 1 2 7 8 9 10</span><br><span class="line">After using assign to set 5 elements to 100: 100 100 100 100 100</span><br><span class="line">Element at index 2: 100</span><br><span class="line">Size of the vector: 5</span><br><span class="line">Max size of the vector: 4611686018427387903</span><br><span class="line">Before swap:</span><br><span class="line">v1: 100 100 100 100 100</span><br><span class="line">v2: 11 12 13 14 15</span><br><span class="line">After swap:</span><br><span class="line">v1: 11 12 13 14 15</span><br><span class="line">v2: 100 100 100 100 100</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a; <span class="comment">//定义的时候不指定vector的大小</span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">// 这个时候size是0 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">        a.<span class="built_in">push_back</span>(i); <span class="comment">//在vector a的末尾添加一个元素i </span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">// 此时会发现a的size变成了10 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">15</span>)</span></span>; <span class="comment">//定义的时候指定vector的大小，默认b里面元素都是0</span></span><br><span class="line">    cout &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) </span><br><span class="line">        b[i]= <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) </span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">20</span>, <span class="number">2</span>)</span></span>; <span class="comment">//定义的时候指定vector的大小并把所有的元素赋一个指定的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++) </span><br><span class="line">        cout &lt;&lt; c[i] &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">begin</span>(); it != c.<span class="built_in">end</span>(); it++) <span class="comment">//使用迭代器的方式访问vector </span></span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//vector相等判断与赋值    </span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="keyword">if</span> (vec1 == vec2)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec1与vec2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">vec2 = vec1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;赋值后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (vec1 == vec2)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec1与vec2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">赋值后</span><br><span class="line">vec1与vec2相等</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>vector的赋值会把<strong>一个vector的所有元素</strong>赋值到<strong>另一个vector中</strong>，并<font color='red'><strong>替代所有元素</strong></font>；</p></li><li class="lvl-4"><p>而vector的相等也是需要**逐个元素<font color='red'>依次比较</font><strong>并</strong><font color='blue'>全部相等</font>**才算相等。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!v.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  ..........</span><br><span class="line">  v.<span class="built_in">pop_back</span>();</span><br><span class="line">  ..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>使用<code>v.pop_back()</code>之前要<code>v.empty()</code></p></li><li class="lvl-4"><p>``v.pop_back();<code>无返回值，**&lt;font color='blue'&gt;仅删除&lt;/font&gt;**向量 v 的最后一个元素；要**&lt;font color='gree'&gt;获得&lt;/font&gt;**&lt;font color='red'&gt;**向量 v 的最后一个元素**&lt;/font&gt;需要</code>v.back()`</p></li></ul><h1>队列queue</h1><h2 id="头文件-2">头文件</h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><h2 id="定义-2">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;ElementType&gt; q;</span><br></pre></td></tr></table></figure><blockquote><p>这里的ElementType可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。</p></blockquote><h2 id="方法-2">方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回**<font color='red'>队列大小</font>**</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">push</span>()</span><br></pre></td></tr></table></figure><blockquote><p>将 x <strong><font color='red'>插入队尾</font></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">front</span>()</span><br><span class="line">q.<span class="built_in">back</span>()</span><br></pre></td></tr></table></figure><blockquote><p>分别返回**<font color='red'>队首元素</font>**和<font color='red'><strong>队尾元素</strong></font></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">pop</span>()</span><br></pre></td></tr></table></figure><blockquote><p>令队首元素<strong>出队</strong>，<font color='blue'><strong>删除</strong></font>队首元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>()</span><br></pre></td></tr></table></figure><blockquote><p>检测 queue 是否为空：<mark><strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong></mark></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回 queue 中<font color='red'><strong>元素个数</strong></font></p></blockquote><h2 id="举例-2">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 0</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 1</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, q.<span class="built_in">front</span>(),q.<span class="built_in">back</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p><code>q.pop()</code>无返回值，仅删除队首元素。要**<font color='gree'>获得</font>**<font color='red'><strong>队首元素</strong></font><strong>还需<code>q.front()</code></strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">if</span> (q.<span class="built_in">empty</span>()==<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EMPTY! \n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NOT EMPTY! \n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;EMPTY! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NOT EMPTY! \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EMPTY!</span><br><span class="line">NOT EMPTY!</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>注意： 使用 <code>q.front()</code>和 <code>q.pop()</code>函数前，必须用 <code>q.empty()</code>判断队列==<strong>是否为空</strong>==，否则可能因为<strong>队空</strong>而出现错误</p></li></ul><h1>双端队列deque</h1><h2 id="头文件-3"><strong>头文件</strong></h2><p><code>#include &lt;deque&gt;</code></p><h2 id="定义-3">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;ElementType&gt; q;</span><br></pre></td></tr></table></figure><blockquote><p>这里的ElementType可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。</p></blockquote><h2 id="方法-3">方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">push_front</span>(<span class="number">0</span>); <span class="comment">// 在头部加入数据0</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">11</span>); <span class="comment">// 在尾部加入数据11</span></span><br><span class="line">a.<span class="built_in">pop_front</span>();   <span class="comment">// 在头部删除数据</span></span><br><span class="line">a.<span class="built_in">pop_back</span>();    <span class="comment">// 在尾部删除数据</span></span><br><span class="line">a.<span class="built_in">resize</span>(num);   <span class="comment">// 重新指定队列的长度</span></span><br><span class="line">a.<span class="built_in">size</span>()         <span class="comment">// 返回容器中实际数据个数</span></span><br><span class="line">a.<span class="built_in">max_size</span>()     <span class="comment">// 返回容器中最大数据的数量</span></span><br></pre></td></tr></table></figure><h2 id="举例-3">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//创建一个有10个元素双端队列a,初始值都为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给deque赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        a[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出deque中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在头尾加入新数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;在头部加入数据0：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    a.<span class="built_in">push_front</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;在尾部加入数据11：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    a.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在头尾删除数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;在头部删除数据: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    a.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;在尾部删除数据: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    a.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回容器中实际数据个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a.size() = &quot;</span> &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重新指定队列的长度</span></span><br><span class="line">    a.<span class="built_in">resize</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a.empty() = &quot;</span> &lt;&lt; a.<span class="built_in">empty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回容器中最大数据的数量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a.max_size() = &quot;</span> &lt;&lt; a.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>输入&amp;&amp;输出</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">在头部加入数据0：</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">在尾部加入数据11：</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10 11</span><br><span class="line">在头部删除数据:</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11</span><br><span class="line">在尾部删除数据:</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">a.size() = 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 0</span><br><span class="line">a.empty() = 0</span><br><span class="line">a.max_size() = 4611686018427387903</span><br></pre></td></tr></table></figure><h1>栈stack</h1><h2 id="头文件-4">头文件</h2><p><strong><code>#include &lt;stack&gt;</code></strong></p><h2 id="定义-4">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;ElementType&gt; s;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>ElementType</code>可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。</p></blockquote><h2 id="方法-4">方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>()</span><br></pre></td></tr></table></figure><blockquote><p>将 x <strong><font color='red'>压入栈顶</font></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">top</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回**<font color='red'>栈顶元素</font>**</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">pop</span>()</span><br></pre></td></tr></table></figure><blockquote><p>令**<font color='red'>栈顶元素</font>出栈**，<font color='blue'><strong>删除</strong></font>栈顶元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>()</span><br></pre></td></tr></table></figure><blockquote><p>检测 stack 是否为空：<mark><strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong></mark></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><blockquote><p>返回 stack 中的<font color='red'><strong>元素个数</strong></font></p></blockquote><h2 id="举例-4">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 0</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 1</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, q.<span class="built_in">front</span>(),q.<span class="built_in">back</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⛵<code>s.pop()</code>无返回值，仅删除栈顶元素。要**<font color='blue'>获得</font>**<font color='red'><strong>栈顶元素</strong></font>还需<code>s.top()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;  q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.size &quot;</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.top &quot;</span>&lt;&lt;q.<span class="built_in">top</span>()&lt;&lt;endl;   <span class="comment">//输出栈顶元素 </span></span><br><span class="line"></span><br><span class="line">q.<span class="built_in">pop</span>();<span class="comment">//删除栈顶元素</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.size &quot;</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;  </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.top &quot;</span>&lt;&lt;q.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.size 5</span><br><span class="line">q.top 5</span><br><span class="line">q.size 4</span><br><span class="line">q.top 4</span><br></pre></td></tr></table></figure></li></ul><p>🍵使用 **<code>s.top()</code>**和 **<code>s.pop()</code>**函数前，必须用 <strong><code>s.empty()</code><strong>判断队列==<strong>是否为空</strong>==，否则可能因为</strong>队空</strong>而出现错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用list或vector作为栈的容器，默认是使用deque的。</span></span><br><span class="line">stack&lt;<span class="type">int</span>, list&lt;<span class="type">int</span>&gt;&gt; a;</span><br><span class="line">stack&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a.<span class="built_in">top</span>()); <span class="comment">// 取栈项数据</span></span><br><span class="line">a.<span class="built_in">push</span>(<span class="number">3</span>);              <span class="comment">// 将3这个元素入栈a</span></span><br><span class="line">b.<span class="built_in">push</span>(<span class="number">2</span>);              <span class="comment">// 将2这个元素入栈b</span></span><br><span class="line">a.<span class="built_in">pop</span>();                <span class="comment">// 将栈顶元素出栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//  判断栈是否为空</span></span><br></pre></td></tr></table></figure><h1>字符串string</h1><h2 id="头文件-5">头文件</h2><p><strong><code>#include &lt;string&gt;</code></strong></p><blockquote><p>头文件不写也可以</p></blockquote><h2 id="定义-5">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br></pre></td></tr></table></figure><blockquote><p>生成<strong>空字符串</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 法1 */</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="comment">/* 法2 */</span></span><br><span class="line">string s = str;</span><br></pre></td></tr></table></figure><blockquote><p>将字符串str的内容复制给s；</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str, i, len)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>将字符串str中从<strong>下标i开始</strong>、<strong>长度为len</strong>的部分作为字符串初值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str, i)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-6"><p>将字符串str中从<strong>下标i开始</strong>到<strong>字符串结束</strong>的部分作为字符串初值</p></li></ul></blockquote><blockquote><ul class="lvl-1"><li class="lvl-4"><p>这里的cstr是<strong>字符串变量</strong>，eg：<code>string s(str,3);</code></p></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(cstr, len)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul class="lvl-1"><li class="lvl-6"><p>以<strong>C_string类型</strong>cstr的<strong>前len个字符</strong>作为字符串s的初值</p></li><li class="lvl-6"><p>这里的<mark>C_string类型是<strong>字符串常量</strong>类型</mark>，eg：<code>string s(&quot;abcde&quot;,3);</code></p></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(num ,c)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>生成<font color='red'><strong>num个 c 字符</strong></font>的字符串，c为char类型</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1;               <span class="comment">//生成空字符串</span></span><br><span class="line">    <span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;123456789&quot;</span>)</span></span>;  <span class="comment">//生成&quot;1234456789&quot;的复制品</span></span><br><span class="line">    <span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;12345&quot;</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span>;<span class="comment">//结果为&quot;123&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str4</span><span class="params">(<span class="string">&quot;0123456&quot;</span>, <span class="number">5</span>)</span></span>;  <span class="comment">//结果为&quot;01234&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str5</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;1&#x27;</span>)</span></span>;       <span class="comment">//结果为&quot;11111&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str6</span><span class="params">(str2, <span class="number">2</span>)</span></span>;      <span class="comment">//结果为&quot;3456789&quot;</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str2:&quot;</span>&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str4:&quot;</span>&lt;&lt;str4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str5:&quot;</span>&lt;&lt;str5&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str6:&quot;</span>&lt;&lt;str6&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323094.png" alt="这里写图片描述"></p><h2 id="方法-5">方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">length</span>();</span><br><span class="line">s.<span class="built_in">max_size</span>();</span><br><span class="line">s.<span class="built_in">capacity</span>();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p><code>s.size()</code>和<code>s.length()</code>：返回字符串s的<strong>长度</strong>。</p></li><li class="lvl-4"><p><code>s.max_size()</code>：返回string对象最多包含的字符数，超出编译器会抛出length_error异常</p></li><li class="lvl-4"><p><code>s.capacity()</code>：返回当前string类在<strong>不重新分配内存</strong>的情况下，能存多少字符（即当前内存支持多少）。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;1234567&quot;</span>)</span></span>;<span class="comment">//string s=&quot;1234567&quot;;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;length=&quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max_size=&quot;</span> &lt;&lt; s.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;capacity=&quot;</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323095.png" alt="这里写图片描述"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">compare</span>()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>C ++字符串支持<strong>比较</strong>操作符（&gt;,&gt;=,&lt;,&lt;=,==,!=），甚至支持string与C-string的比较(如 str&lt;”hello”)。</p></li></ul><blockquote><blockquote><p>string比较的原则是从左往右，按==<strong>字典序</strong>==，<strong>逐个字符</strong>比较，直到不同</p></blockquote></blockquote><ul class="lvl-0"><li class="lvl-4"><p><code>s.compare()</code>支持多参数处理，支持用索引值和长度定位子串来进行比较，他返回一个整数来表示比较结果：</p><ul class="lvl-2"><li class="lvl-6"><p><strong>0：相等</strong></p></li><li class="lvl-8"><p><strong>1：大于</strong></p></li><li class="lvl-8"><p><strong>-1：小于</strong></p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// (A的ASCII码是65，a的ASCII码是97)</span></span><br><span class="line">    <span class="comment">// 前面减去后面的ASCII码，&gt;0返回1，&lt;0返回-1，相同返回0</span></span><br><span class="line">    <span class="function">string <span class="title">A</span><span class="params">(<span class="string">&quot;aBcd&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">B</span><span class="params">(<span class="string">&quot;Abcd&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">C</span><span class="params">(<span class="string">&quot;123456&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">D</span><span class="params">(<span class="string">&quot;123dfg&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;aBcd&quot; 和 &quot;Abcd&quot;比较------ a &gt; A</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(B)：&quot;</span> &lt;&lt; A.<span class="built_in">compare</span>(B)&lt;&lt; endl;                          <span class="comment">// 结果：1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;cd&quot; 和 &quot;Abcd&quot;比较------- c &gt; A</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(2, 3, B):&quot;</span> &lt;&lt;A.<span class="built_in">compare</span>(<span class="number">2</span>, <span class="number">3</span>, B)&lt;&lt; endl;                <span class="comment">// 结果：1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;cd&quot; 和 &quot;cd&quot;比较 </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(2, 3, B, 2, 3):&quot;</span> &lt;&lt; A.<span class="built_in">compare</span>(<span class="number">2</span>, <span class="number">3</span>, B, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;  <span class="comment">// 结果：0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由结果看出来：0表示下标，3表示长度</span></span><br><span class="line">    <span class="comment">// &quot;123&quot; 和 &quot;123&quot;比较 </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C.compare(0, 3, D, 0, 3)&quot;</span> &lt;&lt;C.<span class="built_in">compare</span>(<span class="number">0</span>, <span class="number">3</span>, D, <span class="number">0</span>, <span class="number">3</span>) &lt;&lt; endl;    <span class="comment">// 结果：0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="举例-5">举例</h2><p>💦 c语言里没有**<code>string</code><strong>型的，</strong><code>string</code><strong>在c<ins>里面。但有时候在c</ins>里要用</strong><code>scanf()</code>** 和 **<code>printf()</code><strong>输入输出</strong><code>string</code>**型字符串，此时可以使用 <strong>string</strong> 的成员函数 <strong><code>s.c_str()</code></strong> ，该函数返回字符串的首字符的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s[<span class="number">0</span>]); <span class="comment">//不能用&amp;s</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>映射map</h1><p>​map提供了“[]”运算符，使得map可以像数组一样使用，所以map也称为“关联数组”，map就是从键（key）到值（value）的映射。例如可以用一个<code>map&lt;string, int&gt; month_name </code>来表示“月份名字到月份编号”的映射，然后用<code>month_name[“July”] = 7 </code>这样的方式来赋值</p><h2 id="头文件-6">头文件</h2><p><code>#include &lt;map&gt;</code></p><h2 id="定义-6">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;ElementType, ElementType&gt; m;</span><br></pre></td></tr></table></figure><blockquote><p>这里的ElementType可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等</p></blockquote><h2 id="方法-6">方法</h2><p><a href="https://blog.csdn.net/sevenjoin/article/details/81943864?ops_request_misc=%7B%22request%5Fid%22%3A%22169708750416800215061817%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169708750416800215061817&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81943864-null-null.142%5Ev96%5Epc_search_result_base3&amp;utm_term=map&amp;spm=1018.2226.3001.4187">C++ map用法总结</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">begin</span>()         <span class="comment">// 返回指向map头部的迭代器</span></span><br><span class="line">m.<span class="built_in">clear</span>()         <span class="comment">// 删除所有元素</span></span><br><span class="line">m.<span class="built_in">count</span>(elem)     <span class="comment">// 返回指定元素出现的次数</span></span><br><span class="line">m.<span class="built_in">empty</span>()         <span class="comment">// 如果map为空则返回true</span></span><br><span class="line">m.<span class="built_in">end</span>()           <span class="comment">// 返回指向map末尾的迭代器</span></span><br><span class="line">m.<span class="built_in">equal_range</span>()   <span class="comment">// 返回特殊条目的迭代器对</span></span><br><span class="line">m.<span class="built_in">erase</span>()         <span class="comment">// 删除一个元素</span></span><br><span class="line">m.<span class="built_in">find</span>()          <span class="comment">// 查找一个元素</span></span><br><span class="line">m.<span class="built_in">get_allocator</span>() <span class="comment">// 返回map的配置器</span></span><br><span class="line">m.<span class="built_in">insert</span>()        <span class="comment">// 插入元素</span></span><br><span class="line">m.<span class="built_in">key_comp</span>()      <span class="comment">// 返回比较元素key的函数</span></span><br><span class="line">m.<span class="built_in">lower_bound</span>()   <span class="comment">// 返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">m.<span class="built_in">max_size</span>()      <span class="comment">// 返回可以容纳的最大元素个数</span></span><br><span class="line">m.<span class="built_in">rbegin</span>()        <span class="comment">// 返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">rend</span>()          <span class="comment">// 返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">size</span>()          <span class="comment">// 返回map中元素的个数</span></span><br><span class="line">m.<span class="built_in">swap</span>()          <span class="comment">// 交换两个map</span></span><br><span class="line">m.<span class="built_in">upper_bound</span>()   <span class="comment">// 返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">m.<span class="built_in">value_comp</span>()    <span class="comment">// 返回比较元素value的函数</span></span><br></pre></td></tr></table></figure><h2 id="举例-6">举例</h2><ul class="lvl-0"><li class="lvl-4"><p>例题:反片语<br>输入一些单词，找出所有满足如下条件的单词:该单词不能通过字母重排，得到输入文本中的另外一个单词。在判断是否满足条件时，字母不分大小写，但在输入时应保留输入中的大小写，按字典序进行排列(所有大写字母在小写字母的前面)</p></li><li class="lvl-4"><p>样例输入:<br>ladder came tape soon leader acme RIDE lone Dreis peat ScAlE orb eye Rides dealer NotE derail LaCeS drled noel dire Disk mace Rob dries #</p></li><li class="lvl-4"><p>样例输出:<br>Disk<br>NotE<br>derail<br>drled<br>eye<br>ladder</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mapp;</span><br><span class="line">vector&lt;string&gt; words;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单词s标准化</span></span><br><span class="line"><span class="function">string <span class="title">standard</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string t = s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">length</span>(); i++)</span><br><span class="line">        t[i] = <span class="built_in">tolower</span>(t[i]);</span><br><span class="line">    <span class="built_in">sort</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        words.<span class="built_in">push_back</span>(s);</span><br><span class="line">        string r = <span class="built_in">standard</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (!mapp.<span class="built_in">count</span>(r))</span><br><span class="line">            mapp[r] = <span class="number">0</span>;</span><br><span class="line">        mapp[r]++;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mapp[<span class="built_in">standard</span>(words[i])] == <span class="number">1</span>)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(words[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>集合set</h1><h2 id="头文件-7">头文件</h2><p><code>#include &lt;set&gt;</code></p><h2 id="定义-7">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;ElementType&gt; s;</span><br></pre></td></tr></table></figure><blockquote><p>这里的ElementType可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等</p></blockquote><h2 id="方法-7">方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">begin</span>()         <span class="comment">// 返回指向第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">clear</span>()         <span class="comment">// 清除所有元素</span></span><br><span class="line">s.<span class="built_in">count</span>()         <span class="comment">// 返回某个值元素的个数</span></span><br><span class="line">s.<span class="built_in">empty</span>()         <span class="comment">// 如果集合为空，返回true(真）</span></span><br><span class="line">s.<span class="built_in">end</span>()           <span class="comment">// 返回指向最后一个元素之后的迭代器，不是最后一个元素</span></span><br><span class="line">s.<span class="built_in">equal_range</span>()   <span class="comment">// 返回集合中与给定值相等的上下限的两个迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>()         <span class="comment">// 删除集合中的元素</span></span><br><span class="line">s.<span class="built_in">find</span>()          <span class="comment">// 返回一个指向被查找到元素的迭代器</span></span><br><span class="line">s.<span class="built_in">get_allocator</span>() <span class="comment">// 返回集合的分配器</span></span><br><span class="line">s.<span class="built_in">insert</span>()        <span class="comment">// 在集合中插入元素</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>()   <span class="comment">// 返回指向大于（或等于）某值的第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">key_comp</span>()      <span class="comment">// 返回一个用于元素间值比较的函数</span></span><br><span class="line">s.<span class="built_in">max_size</span>()      <span class="comment">// 返回集合能容纳的元素的最大限值</span></span><br><span class="line">s.<span class="built_in">rbegin</span>()        <span class="comment">// 返回指向集合中最后一个元素的反向迭代器</span></span><br><span class="line">s.<span class="built_in">rend</span>()          <span class="comment">// 返回指向集合中第一个元素的反向迭代器</span></span><br><span class="line">s.<span class="built_in">size</span>()          <span class="comment">// 集合中元素的数目</span></span><br><span class="line">s.<span class="built_in">swap</span>()          <span class="comment">// 交换两个集合变量</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>()   <span class="comment">// 返回大于某个值元素的迭代器</span></span><br><span class="line">s.<span class="built_in">value_comp</span>()    <span class="comment">// 返回一个用于比较元素间的值的函数</span></span><br></pre></td></tr></table></figure><h2 id="举例-7">举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s; <span class="comment">// 创建一个空的整数集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">15</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出集合的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of set: &quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查集合是否为空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Is set empty? &quot;</span> &lt;&lt; (s.<span class="built_in">empty</span>() ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指向第一个元素的迭代器</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指向最后一个元素之后的迭代器</span></span><br><span class="line">    it = s.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">// 注意：这里不能通过*it来访问元素，因为it现在指向的是最后一个元素之后的位置</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;One past the last element: &quot;</span> &lt;&lt; *<span class="built_in">prev</span>(it) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    it = s.<span class="built_in">find</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != s.<span class="built_in">end</span>())</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Found element 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Element 10 not found&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除所有元素</span></span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次检查集合是否为空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Is set empty after clear? &quot;</span> &lt;&lt; (s.<span class="built_in">empty</span>() ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用insert插入多个元素</span></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>); <span class="comment">// 插入重复元素，set会忽略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算并输出元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Count of element 10: &quot;</span> &lt;&lt; s.<span class="built_in">count</span>(<span class="number">10</span>) &lt;&lt; endl; <span class="comment">// 总是返回1，因为set中不会有重复元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指向集合中最后一个元素的反向迭代器</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::reverse_iterator rit = s.<span class="built_in">rbegin</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Last element (reverse): &quot;</span> &lt;&lt; *rit &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指向集合中第一个元素的反向迭代器</span></span><br><span class="line">    rit = s.<span class="built_in">rend</span>();</span><br><span class="line">    <span class="comment">// 注意：这里不能通过*rit来访问元素，因为rit现在指向的是第一个元素之前的位置</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before the first element (reverse): &quot;</span> &lt;&lt; *<span class="built_in">prev</span>(rit) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个集合变量（这里只有一个集合，所以无法演示交换）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出集合的上界和下界</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, set&lt;<span class="type">int</span>&gt;::iterator&gt; bounds = s.<span class="built_in">equal_range</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Lower bound of 5: &quot;</span> &lt;&lt; *bounds.first &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Upper bound of 5: &quot;</span> &lt;&lt; *bounds.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合的分配器</span></span><br><span class="line">    allocator&lt;<span class="type">int</span>&gt; alloc = s.<span class="built_in">get_allocator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取比较键的函数对象</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::key_compare keyComp = s.<span class="built_in">key_comp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取比较值的函数对象</span></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::value_compare valueComp = s.<span class="built_in">value_comp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合能容纳的最大元素数量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max size of set: &quot;</span> &lt;&lt; s.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Size of set: 4</span><br><span class="line">Is set empty? false</span><br><span class="line">First element: 5</span><br><span class="line">One past the last element: 20</span><br><span class="line">Found element 10</span><br><span class="line">Is set empty after clear? true</span><br><span class="line">Count of element 10: 1</span><br><span class="line">Last element (reverse): 5</span><br><span class="line">Before the first element (reverse): 5</span><br><span class="line">Lower bound of 5: 5</span><br><span class="line">Upper bound of 5: 1</span><br><span class="line">Max size of set: 461168601842738790</span><br></pre></td></tr></table></figure><h1>迭代器</h1><p>遍历**<font color='blue'>容器</font><strong><code>vector</code>、<code>set</code>、<code>map</code>要使用</strong><font color='red'>迭代器/反向迭代器</font>**访问</p><ul class="lvl-0"><li class="lvl-4"><p><strong><code>c.begin()</code><strong>是一个指针，指向容器的</strong><font color='purple'>第一个元素</font></strong></p></li><li class="lvl-4"><p><strong><code>c.end()</code><strong>是一个指针，指向容器==</strong><font color='red'>最后一个元素的后一个位置</font></strong>==</p></li><li class="lvl-4"><p>**<code>c.rbegin()</code>**是一个指针，指向容器的<font color='purple'><strong>最后一个元素</strong></font></p></li><li class="lvl-4"><p>**<code>c.rend()</code>**是一个指针，指向容器的==<font color='red'><strong>第一个元素的前一个位置</strong></font>==</p></li></ul><p>所以**<font color='blue'>迭代器指针it</font>**的for循环判断条 件是 <strong><code>it != c.end()</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">begin</span>(); it != c.<span class="built_in">end</span>(); it++)  <span class="comment">// 使用迭代器的方式访问vector </span></span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">rbegin</span>(); it != c.<span class="built_in">rend</span>(); it--)  <span class="comment">// 使用反向迭代器的方式访问vector </span></span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202402212219367.jpg" alt="e5b86169c82b93bbe409229eb505976"></p><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line"><span class="number">12</span> <span class="number">11</span> <span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5&quot;&gt;cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;数组vector&lt;/h1&gt;
&lt;h2 id=&quot;头文件&quot;&gt;头文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;ElementType&amp;gt; v;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的ElementType可以是&lt;strong&gt;任意类型&lt;/strong&gt;，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; v;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一个向量v，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;大小为0&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v.&lt;span class=&quot;built_in&quot;&gt;resize&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;先定义⼀个向量v，然后**&lt;font color=&#39;red&#39;&gt;将长度resize为8&lt;/font&gt;**，默认这8个元素都是0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;定义具有10个int元素的向量v，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;默认这10个元素值都为0&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>引用符号&amp;</title>
    <link href="https://cuiluyi.gitee.io/2023/10/12/%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7&amp;/"/>
    <id>https://cuiluyi.gitee.io/2023/10/12/%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7&amp;/</id>
    <published>2023-10-12T05:28:27.000Z</published>
    <updated>2023-10-12T05:49:46.085Z</updated>
    
    <content type="html"><![CDATA[<h1>引用符号&amp;</h1><h2 id="介绍">介绍</h2><p>C++里面的引用时在变量名之前加一个<code>&amp;</code>符号，比如在函数传入的参数中<code>int &amp;a</code>,那么对这个引用变量<code>a</code>做的所以操作都是直接对传入的原变量进行操作，并没有像原来<code>int a</code>一样只是拷贝一个副本（传值）</p><span id="more"></span><h2 id="例子">例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span><span class="comment">//传入的是n的引用，相当于直接对n进行了操作,只不过在func函数中换了个名字叫a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">func</span>(n);<span class="comment">//n由0变成了99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span><span class="comment">//传入的是0这个值，并不会改变main函数中n的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">func</span>(n);<span class="comment">//并不会改变n的值，n还是0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;引用符号&amp;amp;&lt;/h1&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;C++里面的引用时在变量名之前加一个&lt;code&gt;&amp;amp;&lt;/code&gt;符号，比如在函数传入的参数中&lt;code&gt;int &amp;amp;a&lt;/code&gt;,那么对这个引用变量&lt;code&gt;a&lt;/code&gt;做的所以操作都是直接对传入的原变量进行操作，并没有像原来&lt;code&gt;int a&lt;/code&gt;一样只是拷贝一个副本（传值）&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="https://cuiluyi.gitee.io/tags/C-C/"/>
    
  </entry>
  
</feed>
