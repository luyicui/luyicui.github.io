<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弘毅 の blog</title>
  
  
  <link href="https://cuiluyi.github.io/atom.xml" rel="self"/>
  
  <link href="https://cuiluyi.github.io/"/>
  <updated>2024-12-06T14:39:44.854Z</updated>
  <id>https://cuiluyi.github.io/</id>
  
  <author>
    <name>弘毅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/</id>
    <published>2024-12-06T14:39:44.085Z</published>
    <updated>2024-12-06T14:39:44.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="获取json-web-tokenjwt">1. 获取Json Web Token（JWT）</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>: 密码</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li><li><code>refresh</code>: 刷新令牌，有效期14天</li></ul></li></ul><h2 id="刷新jwt令牌">2. 刷新JWT令牌</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/refresh/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>refresh</code>: 刷新令牌</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li></ul></li></ul><h2 id="获取用户列表">3. 获取用户列表</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/userlist/</li><li>方法：<code>GET</code></li><li>是否验证jwt：否</li><li>输入参数：无</li><li>返回结果：返回10个用户的信息</li></ul><h2 id="获取某个用户的信息">4. 获取某个用户的信息</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/getinfo/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的信息</li></ul><h2 id="获取某个用户的所有帖子">5. 获取某个用户的所有帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的所有帖子</li></ul><h2 id="创建一个帖子">6. 创建一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>content</code>：帖子的内容</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="删除一个帖子">7. 删除一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>DELETE</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>post_id</code>：被删除帖子的ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="更改关注状态">8. 更改关注状态</h2><p>如果未关注，则关注；如果已关注，则取消关注。</p><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/follow/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>target_id</code>: 被关注的用户ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="注册账号">9. 注册账号</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/user/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>：密码</li><li><code>password_confirm</code>：确认密码</li></ul></li><li>返回结果：<ul><li><code>result: success</code></li><li><code>result: 用户名和密码不能为空</code></li><li><code>result: 两个密码不一致</code></li><li><code>result: 用户名已存在</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;获取json-web-tokenjwt&quot;&gt;1. 获取Json Web Token（JWT）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;地址：h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2024-12-06T14:39:44.071Z</published>
    <updated>2024-12-06T14:39:44.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="script部分">script部分</h2><p><code>export default</code>对象的属性：</p><ul><li><code>name</code>：组件的名称</li><li><code>components</code>：存储<code>&lt;template&gt;</code>中用到的所有组件</li><li><code>props</code>：存储父组件传递给子组件的数据</li><li><code>watch()</code>：当某个数据发生变化时触发</li><li><code>computed</code>：动态计算某个数据</li><li><code>setup(props, context)</code>：初始化变量、函数<ul><li><code>ref</code>定义变量，可以用<code>.value</code>属性重新赋值</li><li><code>reactive</code>定义对象，不可重新赋值</li><li><code>props</code>存储父组件传递过来的数据</li><li><code>context.emit()</code>：触发父组件绑定的函数</li></ul></li></ul><h2 id="template部分">template部分</h2><ul><li><code>&lt;slot&gt;&lt;/slot&gt;</code>：存放父组件传过来的<code>children</code>。</li><li><code>v-on:click</code>或<code>@click</code>属性：绑定事件</li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>属性：判断</li><li><code>v-for</code>属性：循环，<code>:key</code>循环的每个元素需要有唯一的<code>key</code></li><li><code>v-bind:</code>或<code>:</code>：绑定属性</li></ul><h2 id="style部分">style部分</h2><ul><li><code>&lt;style&gt;</code>标签添加`属性后，不同组件间的css不会相互影响。</li></ul><h2 id="第三方组件">第三方组件</h2><ul><li><code>view-router</code>包：实现路由功能。</li><li><code>vuex</code>：存储全局状态，全局唯一。<ul><li><code>state</code>:存储所有数据，可以用<code>modules</code>属性划分成若干模块</li><li><code>getters</code>：根据<code>state</code>中的值计算新的值</li><li><code>mutations</code>：所有对<code>state</code>的修改操作都需要定义在这里，不支持异步，可以通过<code>$store.commit()</code>触发</li><li><code>actions</code>：定义对<code>state</code>的复杂修改操作，支持异步，可以通过<code>$store.dispatch()</code>触发。注意不能直接修改<code>state</code>，只能通过<code>mutations</code>修改<code>state</code>。</li><li><code>modules</code>：定义<code>state</code>的子模块</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;script部分&quot;&gt;script部分&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;export default&lt;/code&gt;对象的属性：&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2024-12-06T14:39:44.059Z</published>
    <updated>2024-12-06T14:39:44.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><p><a href="https://vuejs.org/">Vue官网</a></p><h2 id="终端">终端</h2><p><code>Linux</code>和<code>Mac</code>上可以用自带的终端。</p><p><code>Windows</code>上推荐用<code>powershell</code>或者<code>cmd</code>。<code>Git Bash</code>有些指令不兼容。</p><h2 id="安装nodejs">安装<code>Nodejs</code></h2><p><a href="https://nodejs.org/en/">安装地址</a></p><h2 id="安装vuecli">安装<code>@vue/cli</code></h2><p>打开<code>Git Bash</code>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>如果执行后面的操作有bug，可能是最新版有问题，可以尝试安装早期版本，比如：<code>npm i -g @vue/cli@4</code></p><h2id="启动vue自带的图形化项目管理界面">启动<code>vue</code>自带的图形化项目管理界面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>常见问题1：Windows上运行<code>vue</code>，提示无法加载文件，表示用户权限不足。</p><p>解决方案：用管理员身份打开终端，输入<code>set-ExecutionPolicy RemoteSigned</code>，然后输入<code>y</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;终端&quot;&gt;终端&lt;/h2&gt;
&lt;p&gt;&lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.7%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.7%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2024-12-06T14:39:32.353Z</published>
    <updated>2024-12-06T14:39:32.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="apilogin">API——login</h2><p>登录</p><p><code>https://app165.acapp.acwing.com.cn/calculator/login/</code></p><ul><li>输入参数：<code>username</code>、<code>password</code></li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示登录成功</li><li><code>result = "用户名或密码不正确"</code>：表示错误信息</li></ul></li></ul><h2 id="apilogout">API——logout</h2><p>退出</p><p><code>https://app165.acapp.acwing.com.cn/calculator/logout/</code></p><ul><li>输入参数：无</li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示退出成功</li></ul></li></ul><h2 id="apiregister">API——register</h2><p>注册</p><p><code>https://app165.acapp.acwing.com.cn/calculator/register/</code></p><ul><li>输入参数：<code>username</code>、<code>password</code>、<code>password_confirm</code></li><li>输出参数：<code>result</code><ul><li><code>result = "success"</code>：表示注册成功</li><li><code>result = "用户名和密码不能为空"</code>：表示错误信息</li><li><code>result = "两个密码不一致"</code>：表示错误信息</li><li><code>result = "用户名已存在"</code>：表示错误信息</li></ul></li></ul><h2 id="apiget_status">API——get_status</h2><p>查询登录状态，如果已登录，则返回用户名</p><p><code>https://app165.acapp.acwing.com.cn/calculator/get_status/</code></p><ul><li>输入参数：无</li><li>输出参数：<code>result</code>、<code>username</code><ul><li><code>result = "login"</code>，此时有返回值<code>useranme</code>，表示已登录的用户名</li><li><code>result = "logout"</code>，此时<code>username</code>不存在，表示未登录</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;apilogin&quot;&gt;API——login&lt;/h2&gt;
&lt;p&gt;登录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://app165.a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.6%20Redux/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.6%20Redux/</id>
    <published>2024-12-06T14:39:32.341Z</published>
    <updated>2024-12-06T14:39:32.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><p>redux将所有数据存储到树中，且树是唯一的。</p><h2 id="redux基本概念">Redux基本概念</h2><ul><li><code>store</code>：存储树结构。</li><li><code>state</code>：维护的数据，一般维护成树的结构。</li><li><code>reducer</code>：对<code>state</code>进行更新的函数，每个<code>state</code>绑定一个<code>reducer</code>。传入两个参数：当前<code>state</code>和<code>action</code>，返回新<code>state</code>。</li><li><code>action</code>：一个普通对象，存储<code>reducer</code>的传入参数，一般描述对<code>state</code>的更新类型。</li><li><code>dispatch</code>：传入一个参数<code>action</code>，对整棵<code>state</code>树操作一遍。</li></ul><h2 id="react-redux基本概念">React-Redux基本概念</h2><ul><li><code>Provider</code>组件：用来包裹整个项目，其<code>store</code>属性用来存储<code>redux</code>的<code>store</code>对象。</li><li><code>connect(mapStateToProps, mapDispatchToProps)</code>函数：用来将<code>store</code>与组件关联起来。<ul><li><code>mapStateToProps</code>：每次<code>store</code>中的状态更新后调用一次，用来更新组件中的值。</li><li><code>mapDispatchToProps</code>：组件创建时调用一次，用来将<code>store</code>的<code>dispatch</code>函数传入组件。</li></ul></li></ul><h2 id="安装">安装</h2><ul><li><code>npm i redux react-redux @reduxjs/toolkit</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;redux将所有数据存储到树中，且树是唯一的。&lt;/p&gt;
&lt;h2 id=&quot;redux基本概念&quot;&gt;Redux基本概念&lt;/h2&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.5%20%E8%B7%AF%E7%94%B1/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.5%20%E8%B7%AF%E7%94%B1/</id>
    <published>2024-12-06T14:39:30.872Z</published>
    <updated>2024-12-06T14:39:31.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="web分类">Web分类</h2><ul><li>静态页面：页面里的数据是写死的</li><li>动态页面：页面里的数据是动态填充的<ul><li>后端渲染：数据在后端填充</li><li>前端渲染：数据在前端填充</li></ul></li></ul><h2 id="安装环境">安装环境</h2><ul><li>VSCODE安装插件：<code>Auto Import - ES6, TS, JSX, TSX</code></li><li>安装<code>Route</code>组件：<code>npm i react-router-dom</code></li></ul><h2 id="route组件介绍">Route组件介绍</h2><ul><li><code>BrowserRouter</code>：所有需要路由的组件，都要包裹在<code>BrowserRouter</code>组件内</li><li><code>Link</code>：跳转到某个链接，<code>to</code>属性表示跳转到的链接</li><li><code>Routes</code>：类似于C++中的<code>switch</code>，匹配第一个路径</li><li><code>Route</code>：路由，<code>path</code>属性表示路径，<code>element</code>属性表示路由到的内容</li></ul><h2 id="url中传递参数">URL中传递参数</h2><p>解析URL：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/linux/:chapter_id/:section_id/&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Linux</span> /&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>获取参数，类组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linux</span> extends Component &#123;</span><br><span class="line">    state = &#123;  &#125; </span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this.props.params);</span><br><span class="line">        <span class="keyword">return</span> &lt;h1&gt;Linux&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default (props) =&gt; (</span><br><span class="line">    &lt;Linux</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        params=&#123;useParams()&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>函数组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const Linux = () =&gt; &#123;</span><br><span class="line">    console.log(useParams());</span><br><span class="line">    <span class="keyword">return</span> (&lt;h1&gt;Linux&lt;/h1&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Linux;</span><br></pre></td></tr></table></figure><h2 id="search-params传递参数">Search Params传递参数</h2><p>类组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Django</span> extends Component &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        searchParams: this.props.params[<span class="number">0</span>],  // 获取某个参数</span><br><span class="line">        setSearchParams: this.props.params[<span class="number">1</span>],  // 设置链接中的参数，然后重新渲染当前页面</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleClick = () =&gt; &#123;</span><br><span class="line">        this.state.setSearchParams(&#123;</span><br><span class="line">            name: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">            age: <span class="number">20</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this.state.searchParams.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> &lt;h1 onClick=&#123;this.handleClick&#125;&gt;Django&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default (props) =&gt; (</span><br><span class="line">    &lt;Django</span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        params=&#123;useSearchParams()&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>函数组件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const Django = () =&gt; &#123;</span><br><span class="line">    let [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line">    console.log(searchParams.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> (&lt;h1&gt;Django&lt;/h1&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Django;</span><br></pre></td></tr></table></figure><h2 id="重定向">重定向</h2><p>使用<code>Navigate</code>组件可以重定向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123; &lt;Navigate replace to=<span class="string">&quot;/404&quot;</span> /&gt; &#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="嵌套路由">嵌套路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/web&quot;</span> element=&#123;&lt;Web /&gt;&#125;&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;a&quot;</span> element=&#123;&lt;h1&gt;a&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;b&quot;</span> element=&#123;&lt;h1&gt;b&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">    &lt;Route index path=<span class="string">&quot;c&quot;</span> element=&#123;&lt;h1&gt;c&lt;/h1&gt;&#125; /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p>注意：需要在父组件中添加<code>&lt;Outlet /&gt;</code>组件，用来填充子组件的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;web分类&quot;&gt;Web分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;静态页面：页面里的数据是写死的&lt;/li&gt;
&lt;li&gt;动态页面：页面里</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.4%20%E7%BB%84%E5%90%88Components/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.4%20%E7%BB%84%E5%90%88Components/</id>
    <published>2024-12-06T14:39:30.858Z</published>
    <updated>2024-12-06T14:39:31.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="创建boxes组件">5.4.1 创建<code>Boxes</code>组件</h2><p><code>Boxes</code>组件中包含一系列<code>Box</code>组件。</p><h2 id="从上往下传递数据">5.4.2 从上往下传递数据</h2><p>通过<code>this.props</code>属性可以从上到下传递数据。</p><h2 id="传递子节点">5.4.3 传递子节点</h2><p>通过<code>this.props.children</code>属性传递子节点</p><h2 id="从下往上调用函数">5.4.4 从下往上调用函数</h2><p>注意：每个组件的<code>this.state</code>只能在组件内部修改，不能在其他组件内修改。</p><h2 id="每个维护的数据仅能保存在一个this.state中">5.4.5每个维护的数据仅能保存在一个<code>this.state</code>中</h2><ul><li>不要直接修改<code>this.state</code>的值，因为<code>setState</code>函数可能会将修改覆盖掉。</li></ul><h2 id="创建app组件">5.4.6 创建App组件</h2><p>包含：</p><ul><li>导航栏组件</li><li><code>Boxes</code>组件</li></ul><p>注意：</p><ul><li>要将多个组件共用的数据存放到最近公共祖先的<code>this.state</code>中。</li></ul><h2 id="无状态函数组件">5.4.7 无状态函数组件</h2><ul><li>当组件中没有用到<code>this.state</code>时，可以简写为无状态的函数组件。</li><li>函数的传入参数为<code>props</code>对象</li></ul><h2 id="组件的生命周期">5.4.8 组件的生命周期</h2><ul><li><code>Mount</code>周期，执行顺序：<code>constructor() -&gt; render() -&gt; componentDidMount()</code></li><li><code>Update</code>周期，执行顺序：<code>render() -&gt; componentDidUpdate()</code></li><li><code>Unmount</code>周期，执行顺序：<code>componentWillUnmount()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;创建boxes组件&quot;&gt;5.4.1 创建&lt;code&gt;Boxes&lt;/code&gt;组件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Boxes&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.3%20Components/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.3%20Components/</id>
    <published>2024-12-06T14:39:30.845Z</published>
    <updated>2024-12-06T14:39:31.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2 id="创建项目">5.3.1 创建项目</h2><p>创建项目<code>box-app</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-react-app box-app</span><br><span class="line"><span class="built_in">cd</span> box-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>安装<code>bootstrap</code>库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap</span><br></pre></td></tr></table></figure><p><code>bootstrap</code>的引入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="创建component">5.3.2 创建Component</h2><h2 id="创建按钮">5.3.3 创建按钮</h2><p>当子节点数量大于1时，可以用<code>&lt;div&gt;</code>或<code>&lt;React.Fragment&gt;</code>将其括起来。</p><h2 id="内嵌表达式">5.3.4 内嵌表达式</h2><p>JSX中使用<code>&#123;&#125;</code>嵌入表达式。</p><h2 id="设置属性">5.3.5 设置属性</h2><ul><li><code>class -&gt; className</code></li><li>CSS属性：<code>background-color -&gt; backgroundColor</code>，其它属性类似</li></ul><h2 id="数据驱动改变style">5.3.6 数据驱动改变Style</h2><h2 id="渲染列表">5.3.7 渲染列表</h2><ul><li>使用map函数</li><li>每个元素需要具有唯一的<code>key</code>属性，用来帮助React快速找到被修改的DOM元素。</li></ul><h2 id="conditional-rendering">5.3.8 Conditional Rendering</h2><p>利用逻辑表达式的短路原则。</p><ul><li>与表达式中<code>expr1 &amp;&amp; expr2</code>，当<code>expr1</code>为假时返回<code>expr1</code>的值，否则返回<code>expr2</code>的值</li><li>或表达式中<code>expr1 || expr2</code>，当<code>expr1</code>为真时返回<code>expr1</code>的值，否则返回<code>expr2</code>的值</li></ul><h2 id="绑定事件">5.3.9 绑定事件</h2><ul><li>注意妥善处理好绑定事件函数的<code>this</code></li></ul><h2 id="修改state">5.3.10 修改state</h2><ul><li>需要使用<code>this.setState()</code>函数</li><li>每次调用<code>this.setState()</code>函数后，会重新调用<code>this.render()</code>函数，用来修改虚拟DOM树。React只会修改不同步的实际DOM树节点。</li></ul><h2 id="给事件函数添加参数">1.3.11 给事件函数添加参数</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;5.3.1 创建项目&lt;/h2&gt;
&lt;p&gt;创建项目&lt;code&gt;box-app&lt;/code&gt;：&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.2%20ES6%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.2%20ES6%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/</id>
    <published>2024-12-06T14:39:30.830Z</published>
    <updated>2024-12-06T14:39:31.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><h2id="使用bind函数绑定this取值">使用<code>bind()</code>函数绑定<code>this</code>取值</h2><p>在JavaScript中，函数里的<code>this</code>指向的是执行时的调用者，而非定义时所在的对象。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>,</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> talk = person.<span class="property">talk</span>;</span><br><span class="line"><span class="title function_">talk</span>();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;yxc&#x27;</span>, <span class="attr">talk</span>: ƒ&#125;</span><br><span class="line"><span class="title class_">Window</span></span><br></pre></td></tr></table></figure><p><code>bind()</code>函数，可以绑定<code>this</code>的取值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> talk = person.<span class="property">talk</span>.<span class="title function_">bind</span>(person);</span><br></pre></td></tr></table></figure><h2 id="箭头函数的简写方式">箭头函数的简写方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = x =&gt; x * x;</span><br></pre></td></tr></table></figure><p><strong>箭头函数不重新绑定<code>this</code>的取值</strong></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();  <span class="comment">// 输出Window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">talk</span>();  <span class="comment">// 输出 &#123;talk: f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="对象的解构">对象的解构</h2><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name : nm, age&#125; = person;  <span class="comment">// nm是name的别名</span></span><br></pre></td></tr></table></figure><h2 id="数组和对象的展开">数组和对象的展开</h2><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [...a];  <span class="comment">// b是a的复制</span></span><br><span class="line"><span class="keyword">let</span> c = [...a, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>: <span class="string">&quot;yxc&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123;...a, ...b, <span class="attr">height</span>: <span class="number">180</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="named-与-default-exports">Named 与 Default exports</h2><ul><li>NamedExport：可以export多个，import的时候需要加大括号，名称需要匹配</li><li>DefaultExport：最多export一个，import的时候不需要加大括号，可以直接定义别名</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;h2
id=&quot;使用bind函数绑定this取值&quot;&gt;使用&lt;code&gt;bind()&lt;/code&gt;函数绑定&lt;code&gt;this&lt;/code&gt;取值</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://cuiluyi.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/react/5.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2024-12-06T14:39:30.814Z</published>
    <updated>2024-12-06T14:39:32.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航5.-react">导航：<a href="../5.%20React.md">5. React</a></h2><p><a href="https://zh-hans.reactjs.org/">React官网</a></p><p>安装<code>Git Bash</code>（仅限使用Windows的同学，使用Mac和Linux的同学无需安装）</p><p><a href="https://gitforwindows.org/">安装地址</a></p><h2 id="安装nodejs">安装<code>Nodejs</code></h2><p><a href="https://nodejs.org/en/">安装地址</a></p><h2 id="安装create-react-app">安装<code>create-react-app</code></h2><p>打开<code>Git Bash</code>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="安装vscode的插件">安装<code>VSCode</code>的插件</h2><ul><li><code>Simple React Snippets</code></li><li><code>Prettier - Code formatter</code></li></ul><h2 id="创建react-app">创建<code>React App</code></h2><p>在目标目录下打开<code>Git Bash</code>，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app react-app  <span class="comment"># 可以替换为其他app名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> react-app</span><br><span class="line">npm start  <span class="comment"># 启动应用</span></span><br></pre></td></tr></table></figure><h2 id="jsx">JSX</h2><p><code>React</code>中的一种语言，会被<ahref="https://babeljs.io/repl/">Babel</a>编译成标准JavaScript。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航5.-react&quot;&gt;导航：&lt;a href=&quot;../5.%20React.md&quot;&gt;5. React&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/&quot;&gt;React官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;G</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/Postman%20tutorial/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/Postman%20tutorial/</id>
    <published>2024-12-05T10:05:45.725Z</published>
    <updated>2024-12-05T10:50:41.668Z</updated>
    
    <content type="html"><![CDATA[<p># Postman tutorial</p><h2 id="为什么要做接口测试">为什么要做接口测试？</h2><p><strong>接口的由来：</strong> 连接前后端以及移动端。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051805859.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>因为不同端的工作进度不一样，所以需要对开始出来的接口进行接口测试。</p><p>做接口测试的好处：</p><ol type="1"><li><p>节约时间，缩短项目成本</p></li><li><p>提高工作效率</p></li><li><p>提高系统的健壮性</p></li></ol><h2 id="postman简介">Postman简介</h2><p>Postman是一个可扩展的API开发和测试协同平台工具，可以快速集成到<strong>CI/CD</strong>管道中。旨在简化测试和开发中的API工作流。</p><p>Postman 工具有 Chrome 扩展和独立客户端，推荐安装独立客户端。</p><p>Postman 有个 workspace 的概念，workspace 分 personal 和 team类型。Personal workspace 只能自己查看的 API，Team workspace可添加成员和设置成员权限，成员之间可共同管理 API。</p><p>当然我个人使用一般是不登录的，因为登录之后会自动将你的测试历史数据保存到账户里，你可以登陆网页端进行查看。因为API的很多数据是很敏感的，有的含有Token，或者就是一些私密信息，虽然Postman自己也强调说这样很安全，不会私下窥探用户的信息之类的，但是呢还是至少做一点有效的防范吧，自己不上传，因为网络并没有绝对的安全。所以我每次测试之后会将数据(Case)保存在本地，下次使用或者换设备的情况下将数据拷贝过来又可以继续使用了。</p><p>下面正式开始介绍如何使用Postman吧。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806227.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="如何使用postman">如何使用Postman?</h2><p>下图是Postman的工作区间，各个模块功能的介绍如下：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051808234.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>1、New，在这里创建新的请求、集合或环境；还可以创建更高级的文档、MockServer 和 Monitor以及API。2、Import，这用于导入集合或环境。有一些选项，例如从文件，文件夹导入，链接或粘贴原始文本。3、Runner，可以通过Collection Runner执行自动化测试。后续介绍。 4、OpenNew，打开一个新的标签，Postman窗口或Runner窗口。 5、My Workspace -可以单独或以团队的形式创建新的工作区。 6、Invite -通过邀请团队成员在工作空间上进行协同工作。 7、History -所有请求的历史记录，这样可以很容易地跟踪你所做的操作。 8、Collections -通过创建集合来组织你的测试套件。每个集合可能有子文件夹和多个请求。请求或文件夹也可以被复制。9、Request tab -这将显示您正在处理的请求的标题。默认对于没有标题的请求会显示“UntitledRequest”。 10、HTTP Request - 单击它将显示不同请求的下拉列表，例如 GET,POST, COPY, DELETE, etc. 在测试中，最常用的请求是GET和POST。 11、RequestURL - 也称为端点，显示API的URL。. 12、Save -如果对请求进行了更改，必须单击save，这样新更改才不会丢失或覆盖。13、Params - 在这里将编写请求所需的参数，比如Key - Value。14、Authorization -为了访问api，需要适当的授权。它可以是Username、Password、Token等形式。15、Headers - 请求头信息 16、Body - 请求体信息，一般在POST中才会使用到17、Pre-request Script - 请求之前先执行脚本，使用设置环境的预请求脚本来确保在正确的环境中运行测试。18、Tests -这些脚本是在请求期间执行的。进行测试非常重要，因为它设置检查点来验证响应状态是否正常、检索的数据是否符合预期以及其他测试。19、Settings - 最新版本的有设置，一般用不到。</p><h2 id="如何处理get请求">如何处理GET请求</h2><p>Get请求用于从指定的URL获取信息，不会对端点进行任何更改。在这里我们使用如下的URL作为演示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://jsonplaceholder.typicode.com/users</span><br></pre></td></tr></table></figure><p>在Postman的工作区中：</p><ol type="1"><li>选择HTTP请求方式为GET</li><li>在URL区域输入 <strong>链接</strong></li><li>点击 “Send”按钮</li><li>你将看到下方返回200状态码</li><li>在正文中应该有10个用户结果，表明您的测试已经成功运行。</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806878.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><blockquote><p><strong>注意：</strong>在某些情况下，Get请求失败可能由于URL无效或需要身份验证。</p></blockquote><h2 id="如何处理post请求">如何处理POST请求</h2><p>Post请求与Get请求不同，因为存在用户向端点添加数据的数据操作。使用之前GET请求中相同数据，现在添加我们自己的用户。 <strong>Step1）</strong>创建一个新请求 （下图选成了GET，失误，应该是POST）</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806899.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 2 ）</strong> 在新请求中</p><ol type="1"><li>选择HTTP请求方式为POST</li><li>在URL区域输入 链接：https://jsonplaceholder.typicode.com/users</li><li>切换到Body选项</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806937.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 3）</strong> Body选项</p><ol type="1"><li>选中raw选项</li></ol><p>选择JSON</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806892.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 4)</strong> 复制前面GET请求返回的json内容的第一节更改id为11，更改name以及uesrname和email</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Krishna Rungta&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bret&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sincere@april.biz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kulas Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;suite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apt. 556&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gwenborough&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;zipcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;92998-3874&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;geo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-37.3159&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lng&quot;</span><span class="punctuation">:</span> <span class="string">&quot;81.1496&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-770-736-8031 x56442&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;website&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hildegard.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;company&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Romaguera-Crona&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;catchPhrase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Multi-layered client-server neural-net&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;harness real-time e-markets&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806199.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><blockquote><p><strong>注意：</strong>检查Body里用到的JSON格式很重要，以确保数据正确。检测的工具比如：https://jsonformatter.curiousconcept.com/</p></blockquote><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806514.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 5 ）发送请求</strong></p><ol type="1"><li>完成上述的信息输入，点击Send按钮</li><li>Status:应该是201，显示为创建成功</li><li>在Body里返回数据</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806462.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="如何将请求参数化">如何将请求参数化</h2><p>数据参数化是Postman最有用的特征之一。你可以将使用到的变量进行参数化，而不是使用不同的数据创建相同的请求，这样会事半功倍，简洁明了。这些数据可以来自<strong>数据文件</strong>或<strong>环境变量</strong>。参数化有助于避免重复相同的测试，可用于自动化迭代测试。</p><p>参数通过使用<strong>双花括号</strong>创建:<strong><code>&#123;&#123;sample&#125;&#125;</code></strong>。比如下面的请求：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806533.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>接下来创建一个参数化get请求：</p><p><strong>Step 1）</strong> 创建一个参数化get请求</p><ol type="1"><li>将HTTP请求设置为GET</li><li>输入URL：https://jsonplaceholder.typicode.com/users；将链接的域名部分替换为参数，例如<code>&#123;&#123;url&#125;&#125;</code>。请求url现在应该是<code>&#123;&#123;url&#125;&#125;/users</code>。</li><li>点击Send按钮。应该没有响应，因为我们没有设置参数的源，如下图：</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806569.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 2)</strong> 使用环境设置所需的参数</p><ol type="1"><li>点击左侧“Environment”-“global”</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051845773.png"alt="image-20241205184519641" /><figcaption aria-hidden="true">image-20241205184519641</figcaption></figure><p><strong>Step 3）</strong> 变量–variable</p><ol type="1"><li>将名称设置为url，该url为https://jsonplaceholder.typicode.com</li><li>点击保存按钮</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806812.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 4）</strong>回到你的Get请求页面，然后单击发送Send按钮，Get请求应该就会返回结果了，如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806227.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><blockquote><p><strong>注意：</strong>请确保所有的参数都有准确的源数据，不管是<strong>环境变量</strong>还是<strong>数据文件</strong>，以避免出错。</p></blockquote><h2 id="如何创建postman-tests">如何创建Postman Tests</h2><p>PostmanTests在请求中添加JavaScript代码来协助验证结果，如：成功或失败状态、预期结果的比较等等。通常从pm.test开始。它可以与断言相比较，验证其他工具中可用的命令。接下来创建一个包含Tests的请求：</p><p><strong>Step 1）</strong> 创建一个Get请求</p><ol type="1"><li>切换到Tests选项，右边是代码片段选项。</li><li>从右边的代码片段选项里面选中 “Status code: Code is 200”</li></ol><p>JS代码就自动出现在窗口中 <imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806208.png"alt="在这里插入图片描述" /></p><p><strong>Step 2)</strong>点击发送请求按钮。测试结果就显示出来了，如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806296.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 3)</strong>回到Tests选项卡，让我们添加另一个测试。这次我们将比较预期结果和实际结果。在右边的SNIPPETS区域选择"Response body:JSON valuecheck"选项，我们将检查Leanne Graham是否拥有userid 1 <imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806322.png"alt="在这里插入图片描述" /></p><p><strong>Step 4)</strong></p><ol type="1"><li>将代码中的“Your Test Name”替换为“Check if user with id1 is LeanneGraham”，以便测试名称确切描述我们想测试的内容。</li><li>使用jsonData[0].name代替jsonData.value;获取路径，在获取结果之前检查Body。因为Leanne Graham是userid1，所以jsonData在第一个结果中，这个结果应该从0开始。如果你想获得第二个结果，那么对后续结果使用jsonData[1]即可。</li><li>在eql中，输入“Leanne Graham”</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Check if user with id1 is Leanne Graham&quot;</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">var jsonData = pm.response.json();</span><br><span class="line">pm.expect(jsonData[0].name).to.eql(<span class="string">&quot;Leanne Graham&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806327.png"alt="在这里插入图片描述" /> <strong>Step 5)</strong>点击发送请求，可以看到你的请求之后测试结果中有两项显示测试通过。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806775.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><blockquote><p><strong>注意：</strong>有不同种类的测试可以在Postman中创建。尝试探索这个工具，看看哪些测试适合你实际测试。</p></blockquote><h2 id="如何创建测试集合">如何创建测试集合</h2><p>集合在组织测试套件中扮演着重要的角色。它可以被导入和导出，使得在团队之间共享集合变得很容易。在本教程中，我们将学习如何创建和执行集合。</p><p><strong>Step 1)</strong> 单击页面左上角的New按钮，如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806794.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 2)</strong> 选择Collection(集合).创建collection窗口弹出，如下图.</p><p><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806952.png"alt="在这里插入图片描述" /> <strong>Step 3)</strong>输入所需的集合名称和描述，然后单击create。现在已经创建了一个集合。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806938.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 4 )</strong> 和前面的Get请求一样，点击保存。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806941.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step5 ）</strong></p><ol type="1"><li>选择Postman 测试集合(Test Collection)。</li><li>点击保存Postman Test Collection</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806008.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 6)</strong> Postman testcollection现在应该包含了一个请求，如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806339.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 7)</strong>重复上述的Step4-5，继续创建请求，这样，测试集合就应该有2个请求了，如下图。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806504.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="如何使用collection-runner-运行集合">如何使用Collection Runner运行集合</h2><p>有两种方式来运行一个集合，即Collection Runner和Newman。<strong>Collection Runner:</strong></p><p><strong>Step 1)</strong>单击页面顶部导入按钮旁边的<strong>Runner</strong>按钮，如下图。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806552.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 2）</strong> CollectionRunner页面应该出现如下所示。以下是对各个字段的描述</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806682.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 3)</strong> 做如下设置，运行你的测试集合</p><ul><li>选择Postman测试集合-集合迭代次数为3</li><li>设置延迟为2500毫秒</li><li>点击Start Run按钮</li></ul><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806711.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 4)</strong>单击Run按钮后将显示Run结果页。根据延迟的不同，你应该在测试执行的同时看到显示的结果。</p><ol type="1"><li>一旦测试完成，你就可以看到测试状态是通过还是失败，以及每个迭代的结果。</li><li>你将看到Get请求的Pass状态；</li><li>由于我们没有任何Post测试，所以应该会出现请求没有任何测试的消息。</li></ol><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806732.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>可以看出在请求中进行测试是多么重要，这样你就可以验证HTTP请求状态是否成功，以及是否创建或查询到了数据。</p><h2 id="如何使用newman运行集合">如何使用Newman运行集合</h2><p>运行集合的另一种方式是通过Newman。Newman和CollectionRunner之间的主要区别如下:</p><ol type="1"><li>Newman是Postman的替代品，所以需要单独安装Newman；</li><li>Newman使用命令行，而Collection Runner使用UI界面；</li><li>Newman可以用于持续集成。</li></ol><p>安装Newman并运行Collection，步骤如下:</p><p><strong>Step 1)</strong> 下载并安装NodeJs:http://nodejs.org/download/</p><p><strong>Step 2)</strong> 打开命令行窗口并输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g newman</span><br></pre></td></tr></table></figure><p>安装后 如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806862.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step3）</strong>Newman安装好之后，让我们回到Postman的workspace。在Collections框中，单击三个点<strong>…</strong> 会出现新的选择选项，可看到Export选项，如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806063.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 4）</strong></p><p>选择导出集合，默认使用推荐的集合版本，比如此处是v2.1，然后单击导出：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806262.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 5）</strong>选择你想要保存的地址之后点击保存，这里建议专门新建一个文件夹来存放你的Postmantests。</p><p><strong>Step 6）</strong>另外还需要导出我们的环境(enviroment)。单击全局环境下拉菜单旁边的eye图标，选择JSON格式下载。选择你想要的位置，然后单击Save。最好将环境放在与Step5导出的集合相同的文件夹中。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806450.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>Step 7）</strong> 导出Environment到集合文件夹后，现在回到命令行，将目录更改为保存集合和环境的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\Asus\Desktop\Postman Tests</span><br></pre></td></tr></table></figure><p><strong>Step 8）</strong> 使用下面的命令运行你的测试集合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run PostmanTestCollection.postman_collection.json -e Testing.postman_globals.json</span><br></pre></td></tr></table></figure><p>运行的结果应该如下图：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412051806460.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>关于Newman的一些基础指导如下：</p><ol type="1"><li>只运行集合（如果没有环境或测试数据文件依赖关系，则可以使用此选项。）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run &lt;collection name&gt; </span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>运行集合和环境（参数-e 是environment）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run &lt;collection name&gt; -e &lt;environment name&gt; </span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>使用所需的编号运行集合的迭代。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run &lt;collection name&gt; -n &lt;no.of iterations&gt;</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>运行数据文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run &lt;collection name&gt; --data &lt;file name&gt;-n &lt;no.of iterations&gt; -e &lt;environment name&gt; </span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>设置延迟时间。(这一点很重要，因为如果由于请求在后台服务器上，完成前一个请求时没有延迟时间直接启动下一个请求，测试可能会失败。)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newman run &lt;collection name&gt; -d &lt;delay time&gt;</span><br></pre></td></tr></table></figure><h2 id="面试的时候会问的问题">面试的时候会问的问题：</h2><ol type="1"><li>接口请求类型有哪些？</li><li>GET请求和POST请求有什么区别？</li><li>HTTP请求和HTTPS请求有什么区别？</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;# Postman tutorial&lt;/p&gt;
&lt;h2 id=&quot;为什么要做接口测试&quot;&gt;为什么要做接口测试？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;接口的由来：&lt;/strong&gt; 连接前后端以及移动端。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&quot;https://tian</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.10%20canvas/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.10%20canvas/</id>
    <published>2024-12-05T01:59:07.023Z</published>
    <updated>2024-12-06T15:41:45.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas">11.10 canvas</h1><p><ahref="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">canvas教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;canvas&quot;&gt;11.10 canvas&lt;/h1&gt;
&lt;p&gt;&lt;a
href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial&quot;&gt;canvas教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.9%20window/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.9%20window/</id>
    <published>2024-12-05T01:59:05.531Z</published>
    <updated>2024-12-06T15:41:38.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window">11.9 window</h1><ul><li><code>window.open("https://www.acwing.com")</code>在新标签栏中打开页面。</li><li><code>location.reload()</code>刷新页面。</li><li><code>location.href = "https://www.acwing.com"</code>：在当前标签栏中打开页面。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;window&quot;&gt;11.9 window&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.open(&quot;https://www.acwing.com&quot;)&lt;/code&gt;在新标签栏中打开页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.reload()&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.8%20WebSocket/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.8%20WebSocket/</id>
    <published>2024-12-05T01:59:05.515Z</published>
    <updated>2024-12-06T15:41:30.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket">11.8 WebSocket</h1><p>与服务器建立全双工连接。</p><p>常用API：</p><ul><li><code>new WebSocket('ws://localhost:8080');</code>：建立ws连接。</li><li><code>send()</code>：向服务器端发送一个字符串。一般用JSON将传入的对象序列化为字符串。</li><li><code>onopen</code>：类似于<code>onclick</code>，当连接建立时触发。</li><li><code>onmessage</code>：当从服务器端接收到消息时触发。</li><li><code>close()</code>：关闭连接。</li><li><code>onclose</code>：当连接关闭后触发。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket&quot;&gt;11.8 WebSocket&lt;/h1&gt;
&lt;p&gt;与服务器建立全双工连接。&lt;/p&gt;
&lt;p&gt;常用API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new WebSocket(&#39;ws://localhost:8080&#39;);&lt;/code&gt;：建立w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.7%20%E6%97%A5%E6%9C%9F/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.7%20%E6%97%A5%E6%9C%9F/</id>
    <published>2024-12-05T01:59:05.500Z</published>
    <updated>2024-12-06T15:41:22.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期">11.7 日期</h1><p>返回值为整数的API，数值为1970-1-1 00:00:00UTC（世界标准时间）到某个时刻所经过的毫秒数：</p><ul><li><code>Date.now()</code>：返回现在时刻。</li><li><code>Date.parse("2022-04-15T15:30:00.000+08:00")</code>：返回北京时间2022年4月15日15:30:00的时刻。</li></ul><p>与<code>Date</code>对象的实例相关的<code>API</code>：</p><ul><li><code>new Date()</code>：返回现在时刻。</li><li><code>new Date("2022-04-15T15:30:00.000+08:00")</code>：返回北京时间2022年4月15日15:30:00的时刻。</li><li>两个<code>Date</code>对象实例的差值为毫秒数</li><li><code>getDay()</code>：返回星期，0表示星期日，1-6表示星期一至星期六</li><li><code>getDate()</code>：返回日，数值为1-31</li><li><code>getMonth()</code>：返回月，数值为0-11</li><li><code>getFullYear()</code>：返回年份</li><li><code>getHours()</code>：返回小时</li><li><code>getMinutes()</code>：返回分钟</li><li><code>getSeconds()</code>：返回秒</li><li><code>getMilliseconds()</code>：返回毫秒</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日期&quot;&gt;11.7 日期&lt;/h1&gt;
&lt;p&gt;返回值为整数的API，数值为1970-1-1 00:00:00
UTC（世界标准时间）到某个时刻所经过的毫秒数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;：返回现在时刻。&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.6%20JSON/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.6%20JSON/</id>
    <published>2024-12-05T01:59:05.485Z</published>
    <updated>2024-12-06T15:41:24.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json.md">11.6 JSON.md</h1><p>JSON对象用于序列化对象、数组、数值、字符串、布尔值和<code>null</code>。</p><p>常用API：</p><ul><li><code>JSON.parse()</code>：将字符串解析成对象</li><li><code>JSON.stringify()</code>：将对象转化为字符串</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;json.md&quot;&gt;11.6 JSON.md&lt;/h1&gt;
&lt;p&gt;JSON对象用于序列化对象、数组、数值、字符串、布尔值和&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;常用API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.parse()&lt;/code</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.5%20localStorage/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.5%20localStorage/</id>
    <published>2024-12-05T01:59:05.472Z</published>
    <updated>2024-12-06T15:41:00.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="localstorage">11.5 localStorage</h1><p>可以在用户的浏览器上存储键值对。</p><p>常用API：</p><ul><li><code>setItem(key, value)</code>：插入</li><li><code>getItem(key)</code>：查找</li><li><code>removeItem(key)</code>：删除</li><li><code>clear()</code>：清空</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;localstorage&quot;&gt;11.5 localStorage&lt;/h1&gt;
&lt;p&gt;可以在用户的浏览器上存储键值对。&lt;/p&gt;
&lt;p&gt;常用API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setItem(key, value)&lt;/code&gt;：插入&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.4%20Map%E4%B8%8ESet/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.4%20Map%E4%B8%8ESet/</id>
    <published>2024-12-05T01:59:03.971Z</published>
    <updated>2024-12-06T15:40:52.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map与set.md">11.4 Map与Set.md</h1><h2 id="map"><code>Map</code></h2><p>Map 对象保存键值对。</p><ul><li>用<code>for...of</code>或者<code>forEach</code>可以按插入顺序遍历。</li><li>键值可以为任意值，包括函数、对象或任意基本类型。</li></ul><p>常用API：</p><ul><li><code>set(key, value)</code>：插入键值对，如果<code>key</code>已存在，则会覆盖原有的<code>value</code></li><li><code>get(key)</code>：查找关键字，如果不存在，返回<code>undefined</code></li><li><code>size</code>：返回键值对数量</li><li><code>has(key)</code>：返回是否包含关键字<code>key</code></li><li><code>delete(key)</code>：删除关键字<code>key</code></li><li><code>clear()</code>：删除所有元素</li></ul><h2 id="set"><code>Set</code></h2><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><ul><li>用<code>for...of</code>或者<code>forEach</code>可以按插入顺序遍历。</li></ul><p>常用API：</p><ul><li><code>add()</code>：添加元素</li><li><code>has()</code>：返回是否包含某个元素</li><li><code>size</code>：返回元素数量</li><li><code>delete()</code>：删除某个元素</li><li><code>clear()</code>：删除所有元素</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;map与set.md&quot;&gt;11.4 Map与Set.md&lt;/h1&gt;
&lt;h2 id=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Map 对象保存键值对。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;for...of&lt;/code&gt;或者&lt;code&gt;f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.3%20requestAnimationFrame/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.3%20requestAnimationFrame/</id>
    <published>2024-12-05T01:59:03.961Z</published>
    <updated>2024-12-06T15:40:46.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="requestanimationframe">11.3 requestAnimationFrame</h1><h2id="requestanimationframefunc"><code>requestAnimationFrame(func)</code></h2><p>该函数会在下次浏览器刷新页面之前执行一次，通常会用递归写法使其每秒执行60次<code>func</code>函数。调用时会传入一个参数，表示函数执行的时间戳，单位为毫秒。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">step</span> = (<span class="params">timestamp</span>) =&gt; &#123;  <span class="comment">// 每帧将div的宽度增加1像素</span></span><br><span class="line">    <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">width</span> = div.<span class="property">clientWidth</span> + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(step);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(step);</span><br></pre></td></tr></table></figure><h2id="与settimeout和setinterval的区别">与<code>setTimeout</code>和<code>setInterval</code>的区别：</h2><ul><li><code>requestAnimationFrame</code>渲染动画的效果更好，性能更加。该函数可以保证每两次调用之间的时间间隔相同，但<code>setTimeout</code>与<code>setInterval</code>不能保证这点。<code>setTmeout</code>两次调用之间的间隔包含回调函数的执行时间；<code>setInterval</code>只能保证按固定时间间隔将回调函数压入栈中，但具体的执行时间间隔仍然受回调函数的执行时间影响。</li><li>当页面在后台时，因为页面不再渲染，因此<code>requestAnimationFrame</code>不再执行。但<code>setTimeout</code>与<code>setInterval</code>函数会继续执行。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;requestanimationframe&quot;&gt;11.3 requestAnimationFrame&lt;/h1&gt;
&lt;h2
id=&quot;requestanimationframefunc&quot;&gt;&lt;code&gt;requestAnimationFrame(func)&lt;/code&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.2%20setTimeout%E4%B8%8EsetInterval/"/>
    <id>https://cuiluyi.github.io/2024/12/05/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/js/tutorial/11%20%E5%B8%B8%E7%94%A8%E5%BA%93/11.2%20setTimeout%E4%B8%8EsetInterval/</id>
    <published>2024-12-05T01:59:03.951Z</published>
    <updated>2024-12-06T15:40:40.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="settimeout与setinterval">11.2 setTimeout与setInterval</h1><h2 id="settimeoutfunc-delay"><code>setTimeout(func, delay)</code></h2><p><code>delay</code>毫秒后，执行函数<code>func()</code>。</p><h2 id="cleartimeout"><code>clearTimeout()</code></h2><p>关闭定时器，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout_id = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);  <span class="comment">// 2秒后在控制台输出&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeout_id);  <span class="comment">// 清除定时器</span></span><br></pre></td></tr></table></figure><h2id="setintervalfunc-delay"><code>setInterval(func, delay)</code></h2><p>每隔<code>delay</code>毫秒，执行一次函数<code>func()</code>。</p><p>第一次在第<code>delay</code>毫秒后执行。</p><h2 id="clearinterval"><code>clearInterval()</code></h2><p>关闭周期执行的函数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1<span class="keyword">let</span> interval_id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);  <span class="comment">// 每隔2秒，输出一次&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clearInterval</span>(interval_id);  <span class="comment">// 清除周期执行的函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;settimeout与setinterval&quot;&gt;11.2 setTimeout与setInterval&lt;/h1&gt;
&lt;h2 id=&quot;settimeoutfunc-delay&quot;&gt;&lt;code&gt;setTimeout(func, delay)&lt;/code&gt;&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
