<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天道酬勤，厚德载物</title>
  
  
  <link href="https://cuiluyi.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://cuiluyi.gitee.io/"/>
  <updated>2024-09-15T07:35:59.346Z</updated>
  <id>https://cuiluyi.gitee.io/</id>
  
  <author>
    <name>银杏枫树</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%909.%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%909.%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E3%80%91/</id>
    <published>2024-09-15T07:35:59.197Z</published>
    <updated>2024-09-15T07:35:59.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法与数据结构入门">【9.算法与数据结构入门】</h1><p>任何程序的本质都是算法 + 数据结构。 ——闫学灿</p><h2 id="枚举">枚举</h2><p>通过枚举的方式求集合的最小值、最大值、元素数量，就是枚举算法。</p><hr /><h2 id="递推">递推</h2><p>逐步通过前面的状态推导出后面的状态，就是递推算法。</p><hr /><h2 id="递归">递归</h2><p>将原问题逐步变成规模更小的子问题，就是递归算法。</p><hr /><h2 id="排序">排序</h2><h3 id="选择排序">选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(q)):</span><br><span class="line">            <span class="keyword">if</span> q[j] &lt; q[i]:</span><br><span class="line">                q[i], q[j] = q[j], q[i]</span><br></pre></td></tr></table></figure><h3 id="插入排序">插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> q[j] &lt; q[j - <span class="number">1</span>]:</span><br><span class="line">            q[j - <span class="number">1</span>], q[j] = q[j], q[j - <span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="冒泡排序">冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q) - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> q[j] &gt; q[j + <span class="number">1</span>]:</span><br><span class="line">                q[j], q[j + <span class="number">1</span>] = q[j + <span class="number">1</span>], q[j]</span><br></pre></td></tr></table></figure><p>冒泡排序可以稍微加个优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">        not_changed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q) - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> q[j] &gt; q[j + <span class="number">1</span>]:</span><br><span class="line">                q[j], q[j + <span class="number">1</span>] = q[j + <span class="number">1</span>], q[j]</span><br><span class="line">                not_changed = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> not_changed:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><hr /><h2 id="链表">链表</h2><p>链表是一种常用的数据结构，可以存储一列数据。</p><p>例如，下图所示的链表可以用后面的代码存储：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202409151534501.png"alt="link.png" /><figcaption aria-hidden="true">link.png</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    p = Node(i)</span><br><span class="line">    p.<span class="built_in">next</span> = head</span><br><span class="line">    head = p</span><br><span class="line"></span><br><span class="line">p = head</span><br><span class="line"><span class="keyword">while</span> p:</span><br><span class="line">    <span class="built_in">print</span>(p.val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    p = p.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法与数据结构入门&quot;&gt;【9.算法与数据结构入门】&lt;/h1&gt;
&lt;p&gt;任何程序的本质都是算法 + 数据结构。 ——闫学灿&lt;/p&gt;
&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;
&lt;p&gt;通过枚举的方式求集合的最小值、最大值、元素数量，就是枚举算法。&lt;/p&gt;
&lt;hr /&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%908.%E7%B1%BB%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%81%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%908.%E7%B1%BB%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%81%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E3%80%91/</id>
    <published>2024-09-15T07:33:17.641Z</published>
    <updated>2024-09-15T07:33:17.798Z</updated>
    
    <content type="html"><![CDATA[<h1id="类异常处理模块包的管理虚拟环境">【8.类、异常处理、模块、包的管理、虚拟环境】</h1><p>本章内容与Python开发项目相关，每个知识点的细节纷繁复杂，大家只要学会核心用法，剩下的细节现用现查即可。——闫学灿</p><h2 id="类">类</h2><p>类可以将变量、函数打包在一起，让代码在逻辑上更加清晰。<br />类名称一般采用驼峰命名法，函数一般采用下划线命名法。</p><p>类中函数的第一个参数都是<code>self</code>，用来调用类本身的变量和函数。<br />当调用类中函数的时候，第一个参数<code>self</code>不需要自己传递，Python会自动传递这个参数。</p><h3 id="类的定义">类的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>:</span><br><span class="line">    hero_count = <span class="number">0</span>  <span class="comment"># 类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, level=<span class="number">10</span></span>):  <span class="comment"># 构造函数</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.level = level</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hero %s has been created.&quot;</span> % name)</span><br><span class="line">        Hero.hero_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):  <span class="comment"># 定义str()函数的效果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero: %s&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):  <span class="comment"># 问候</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Hi!&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):  <span class="comment"># 移动</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Move!&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_level</span>(<span class="params">self</span>):  <span class="comment"># 获取这个英雄的等级</span></span><br><span class="line">        <span class="keyword">return</span> self.level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_level</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_level() + <span class="number">1</span>  <span class="comment"># 调用类中的其他函数</span></span><br><span class="line"></span><br><span class="line">    zeus = Hero(<span class="string">&quot;Zeus&quot;</span>)</span><br><span class="line">    athena = Hero(<span class="string">&quot;Athena&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    zeus.greet()</span><br><span class="line">    athena.move()</span><br><span class="line">    <span class="built_in">print</span>(zeus.name, athena.get_level(), athena.next_level())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(zeus), athena)</span><br><span class="line">    <span class="built_in">print</span>(Hero.hero_count)</span><br></pre></td></tr></table></figure><h3 id="类变量和实例变量">类变量和实例变量</h3><p>每个类可以创建任意多实例。例如上面的<code>Hero</code>类，可以创建<code>zeus</code>和<code>athena</code>等实例。</p><p>类变量由所有实例共享，一般通过类名访问，例如<code>Hero.hero_count</code>。</p><p>实例变量与每个具体的实例绑定，一般通过具体实例来访问，例如<code>zeus.name</code>。</p><h3 id="类的继承">类的继承</h3><p>子类可以继承父类的变量和函数。</p><p><code>self</code>可以调用自身和父类中的变量和函数，<code>super()</code>可以调用父类中的函数。<br />如果子类和父类的变量或函数重名，优先使用子类的变量和函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>:</span><br><span class="line">    hero_count = <span class="number">0</span>  <span class="comment"># 类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, level=<span class="number">10</span></span>):  <span class="comment"># 构造函数</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.level = level</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hero %s has been created.&quot;</span> % name)</span><br><span class="line">        Hero.hero_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):  <span class="comment"># 定义str()函数的效果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero: %s&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):  <span class="comment"># 问候</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Hi!&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):  <span class="comment"># 移动</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Move!&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_level</span>(<span class="params">self</span>):  <span class="comment"># 获取这个英雄的等级</span></span><br><span class="line">        <span class="keyword">return</span> self.level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_level</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_level() + <span class="number">1</span>  <span class="comment"># 调用类中的其他函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zeus</span>(<span class="title class_ inherited__">Hero</span>):</span><br><span class="line">    hero_name = <span class="string">&quot;Zeus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, level</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(Zeus.hero_name, level)  <span class="comment"># 通过super()调用父类的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Hi!(from child class)&quot;</span> % self.name)  <span class="comment"># 使用的是父类的`name`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Athena</span>(<span class="title class_ inherited__">Hero</span>):</span><br><span class="line">    hero_name = <span class="string">&quot;Athena&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, level</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(Athena.hero_name, level)  <span class="comment"># 通过super()调用父类的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: Hi!(from child class)&quot;</span> % self.name)  <span class="comment"># 使用的是父类的`name`</span></span><br><span class="line"></span><br><span class="line">zeus = Zeus(<span class="number">6</span>)</span><br><span class="line">athena = Athena(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(zeus.name, athena.level, Hero.hero_count)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(zeus), <span class="built_in">str</span>(athena))</span><br><span class="line">zeus.greet()</span><br><span class="line">athena.greet()</span><br><span class="line"><span class="built_in">print</span>(zeus.get_level())</span><br></pre></td></tr></table></figure><hr /><h2 id="异常处理">异常处理</h2><p>当某段代码出现异常时，代码会被终止。此时如果不想让代码终止，可以用<code>try ... except ...</code>语句来处理异常。</p><p>例如，将字符串转化成整数时，可能会出现异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished!&quot;</span>)</span><br></pre></td></tr></table></figure><p>当除以0时，也会出现异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    z = x / y</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished!&quot;</span>)</span><br></pre></td></tr></table></figure><hr /><h2 id="模块">模块</h2><p>当项目的逻辑越来越复杂时，把所有代码写到一个文件中会相当不方便。</p><p>此时就可以将不同代码放到不同的模块中。所有模块通过文件夹和文件组织成树的形式。</p><p>自定义模块的每个文件夹中需要包含一个空<code>__init__.py</code>文件，用来让Python识别出这是一个模块。</p><p>示例：</p><p>文件结构如下所示：<br /><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202409151527434.png"alt="微信截图_20231102194835.png" /></p><p><code>utils/__init__.py</code> 是空文件。</p><p><code>utils/log.py</code>：</p><pre><code>from datetime import datetimeclass Log:    def __init__(self, text):        self.text = text    def info(self):        print(datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;), &quot;INFO:&quot;, self.text)</code></pre><p><code>operation/__init__.py</code> 是空文件。</p><p><code>operation/add.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.log <span class="keyword">import</span> Log</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    log = Log(<span class="string">&quot;Operation add&quot;</span>)</span><br><span class="line">    log.info()</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p><code>operation/sub.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">a, b</span>):</span><br><span class="line">    log = utils.log.Log(<span class="string">&quot;Operation sub&quot;</span>)</span><br><span class="line">    log.info()</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br></pre></td></tr></table></figure><p><code>operation/mul.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.log <span class="keyword">import</span> Log <span class="keyword">as</span> MyLog</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    log = MyLog(<span class="string">&quot;Operation mul&quot;</span>)</span><br><span class="line">    log.info()</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br></pre></td></tr></table></figure><p><code>operation/others.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.log <span class="keyword">import</span> Log</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    log = Log(<span class="string">&quot;Operation div&quot;</span>)</span><br><span class="line">    log.info()</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">a, b</span>):</span><br><span class="line">    log = Log(<span class="string">&quot;Operation power&quot;</span>)</span><br><span class="line">    log.info()</span><br><span class="line">    <span class="keyword">return</span> a ** b</span><br></pre></td></tr></table></figure><p><code>main.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operation.add <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> operation.sub <span class="keyword">import</span> sub</span><br><span class="line"><span class="keyword">from</span> operation.mul <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> operation.others <span class="keyword">import</span> div, power</span><br><span class="line"></span><br><span class="line">op = <span class="built_in">input</span>()</span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(add(a, b))</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(sub(a, b))</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(mul(a, b))</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(div(a, b))</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;**&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(power(a, b))</span><br></pre></td></tr></table></figure><hr /><h2 id="包的管理">包的管理</h2><p>写项目时，不会所有代码都自己实现，会用到很多网络上现成的包（模块）。</p><h3 id="通过命令行管理">通过命令行管理</h3><p>以安装<code>pygame</code>这个包为例：</p><p>安装包：<code>pip3 install pygame --user</code></p><p>升级包：<code>pip3 install pygame --user --upgrade</code></p><p>删除包：<code>pip3 uninstall pygame</code></p><h3 id="通过ide的图形化界面管理">通过IDE的图形化界面管理</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202409151527500.png"alt="微信截图_20231102175604.png" /><figcaption aria-hidden="true">微信截图_20231102175604.png</figcaption></figure><h3 id="示例">示例</h3><p><ahref="https://www.acwing.com/file_system/file/content/whole/index/content/10401037/">下一章</a>我们会用<code>pygame</code>包来开发迷宫项目。</p><p>现在我们可以先尝试一下这个包，用它来创建一个可关闭的窗口，名称是“Maze”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">700</span>, <span class="number">500</span>))  <span class="comment"># 窗口大小 700 * 500</span></span><br><span class="line"></span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;Maze&quot;</span>)  <span class="comment"># 窗口标题是 Maze</span></span><br><span class="line"></span><br><span class="line">done = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:  <span class="comment"># 如果检测到窗口被关闭了，就终止程序</span></span><br><span class="line">            done = <span class="literal">True</span></span><br></pre></td></tr></table></figure><hr /><h2 id="虚拟环境">虚拟环境</h2><p>每个虚拟环境主要用来存放一系列不同版本的包。</p><p>在windows或mac下开发时，一台电脑上可能会有多个Python项目，不同项目可能会依赖不同版本的包，为了不让不同项目之间产生冲突，可以将每个项目放到单独的虚拟环境中。</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202409151527483.png"alt="微信图片_20231102175848.png" /><figcaption aria-hidden="true">微信图片_20231102175848.png</figcaption></figure><p>虚拟环境主要用于本地开发，在云端Linux服务器上部署项目时，一般采用docker来管理环境，不需要使用虚拟环境<code>env</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;类异常处理模块包的管理虚拟环境&quot;&gt;【8.类、异常处理、模块、包的管理、虚拟环境】&lt;/h1&gt;
&lt;p&gt;本章内容与Python开发项目相关，每个知识点的细节纷繁复杂，大家只要学会核心用法，剩下的细节现用现查即可。——闫学灿&lt;/p&gt;
&lt;h2 id=&quot;类&quot;&gt;类&lt;/h2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%907.%E5%85%83%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%907.%E5%85%83%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8%E3%80%91/</id>
    <published>2024-09-15T04:03:01.751Z</published>
    <updated>2024-09-15T07:17:06.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元组集合和字典">【7.元组、集合和字典】</h1><p>列表、集合和字典是Python最常使用的数据结构。——闫学灿</p><h2 id="元组">元组</h2><p>元组跟<ahref="https://www.acwing.com/file_system/file/content/whole/index/content/10015276/">列表</a>类似，只是不支持动态添加、删除元素，以及不能修改元素。</p><h3 id="元组的初始化">元组的初始化</h3><p>元组需要用小括号括起来，中间的元素用逗号隔开。<br />注意，如果初始化只包含一个元素的元组，需要在该元素后添加逗号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = ()  <span class="comment"># 初始化一个空元组</span></span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 含有2个整数的元组</span></span><br><span class="line">c = <span class="number">6</span>, <span class="string">&quot;Python&quot;</span>, <span class="number">3.14</span>  <span class="comment"># 小括号可以省略，等价于(6, &quot;Python&quot;, 3.14)</span></span><br><span class="line">d = (<span class="number">5</span>,)  <span class="comment"># 注意不能写成(5)，(5)表示整数5</span></span><br><span class="line">e = <span class="number">5</span>,  <span class="comment"># 等价于(5,)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, e)</span><br></pre></td></tr></table></figure><h3 id="元组的解包">元组的解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&quot;Hello!&quot;</span>  <span class="comment"># 初始化一个元组</span></span><br><span class="line">x, y, z = t  <span class="comment"># 将元组解包，将元组内的三个值按顺序赋值给x、y、z</span></span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br></pre></td></tr></table></figure><p>所以，<ahref="https://www.acwing.com/file_system/file/content/whole/index/content/9960888/">2.判断语句</a>中学习的交换操作，本质上是元组的解包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">3</span>, <span class="number">4</span>  <span class="comment"># 将元组(3, 4)解包，分别赋值给a、b</span></span><br><span class="line">a, b = b, a  <span class="comment"># 将元组(b, a)解包，分别赋值给a、b</span></span><br></pre></td></tr></table></figure><p>同样地，<ahref="https://www.acwing.com/file_system/file/content/whole/index/content/10200082/">6.函数</a>中函数返回多个值，本质上也是返回了一个元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y, x * y  <span class="comment"># 等价于 return (x + y, x * y)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">s, p = calc(x, y)  <span class="comment"># 将(x + y, x * y)解包，分别赋值给s、p</span></span><br><span class="line"><span class="built_in">print</span>(s, p)</span><br></pre></td></tr></table></figure><h3 id="元组的比较运算">元组的比较运算</h3><p>元组和列表均支持比较运算符：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>等，按字典序进行比较。</p><h3 id="元组的其他操作">元组的其他操作</h3><p>元组的下标访问元素、循环遍历、切片、加法和乘法运算等操作，都与<ahref="https://www.acwing.com/file_system/file/content/whole/index/content/10015276/">列表</a>相同。</p><hr /><h2 id="集合">集合</h2><p>集合是Python中最常用的数据结构之一，用来存储不同元素。</p><p>注意，集合中的元素是无序的。</p><h3 id="集合的初始化">集合的初始化</h3><p>创建集合用花括号或<code>set()</code>函数。注意：创建空集合只能用<code>set()</code>，不能用<code>&#123;&#125;</code>，因为<code>&#123;&#125;</code>创建的是空字典，会在下一小节里介绍字典。</p><p>集合常见的初始化方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;  <span class="comment"># 会自动去除重复元素</span></span><br><span class="line"><span class="built_in">print</span>(basket)  <span class="comment"># 重复的元素已经去除了</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">set</span>()  <span class="comment"># 初始化一个空列表</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">b = <span class="built_in">set</span>(a)  <span class="comment"># 将列表转化成集合，一般是为了去重。</span></span><br><span class="line">c = <span class="built_in">list</span>(b)  <span class="comment"># 将集合转化回列表</span></span><br><span class="line"><span class="built_in">print</span>(b, c)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;abracadabra&quot;</span></span><br><span class="line">a = <span class="built_in">set</span>(x)  <span class="comment"># 将字符串中的每个字符存到集合中</span></span><br><span class="line">b = <span class="built_in">str</span>(a)  <span class="comment"># 注意，这里并不能将集合转化回原字符串，而是用格式化表示集合中的内容</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br></pre></td></tr></table></figure><h3 id="集合的常用操作">集合的常用操作</h3><p>假设<code>a</code>表示一个集合。</p><ul><li><code>len(a)</code> 返回集合中包含的元素数量。</li><li><code>a.add(x)</code> 在集合中添加一个元素。</li><li><code>a.remove(x)</code>删除集合中的<code>x</code>，如果<code>x</code>不存在，则报异常。</li><li><code>a.discard(x)</code>删除集合中的<code>x</code>，如果<code>x</code>不存在，则不进行任何操作。</li><li><code>x in a</code> 判断<code>x</code>是否在<code>a</code>中。</li><li><code>x not in a</code>判断<code>x</code>是否不在<code>a</code>中。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line">a.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出 &#123;1, 2, 3, 4&#125;，注意集合中的元素是无序的。</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出 &#123;1, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  a.remove(5)  # 因为5不存在，所以会报异常</span></span><br><span class="line">a.discard(<span class="number">5</span>)  <span class="comment"># 因为5不存在，所以不进行任何操作</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &#123;1, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用for循环遍历集合">使用<code>for</code>循环遍历集合</h3><p>类似于列表，集合也可以用<code>for ... in ...</code>的形式遍历。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:  <span class="comment"># 循环遍历整个集合</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><hr /><h2 id="字典">字典</h2><p>字典是Python中最常用的数据结构之一，用来存储映射关系。<br />注意，字典中的元素是无序的。</p><p>不同于列表，字典是以<code>key</code>进行索引的，可以将每个<code>key</code>映射到某个<code>value</code>。<code>key</code>可以是任何不可变类型，常用可以作为<code>key</code>的类型有数字和字符串。列表因为是可变的，所以不能作为<code>key</code>。<code>value</code>可以是任意类型。</p><h3 id="字典的初始化">字典的初始化</h3><p>创建字典用花括号或<code>dict()</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;  <span class="comment"># 创建一个字典</span></span><br><span class="line"><span class="built_in">print</span>(tel)  <span class="comment"># 输出 &#123;&#x27;jack&#x27;: 4098, &#x27;sape&#x27;: 4139&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">dict</span>()  <span class="comment"># 创建一个空字典</span></span><br><span class="line">a[<span class="number">123</span>] = <span class="string">&quot;abc&quot;</span>  <span class="comment"># 在字典中插入一个key-value对</span></span><br><span class="line">a[<span class="number">456</span>] = <span class="string">&quot;def&quot;</span>  <span class="comment"># 在字典中插入一个key-value对</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出 &#123;123: &#x27;abc&#x27;, 456: &#x27;def&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(a)  <span class="comment"># 将字典的关键字转化成列表</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出[123, 456]</span></span><br></pre></td></tr></table></figure><h3 id="字典的常用操作">字典的常用操作</h3><p>假设<code>a</code>表示一个字典。</p><ul><li><code>len(a)</code>：返回字典中的元素对数。</li><li><code>a[x]</code>：获取关键字<code>x</code>对应的值，如果<code>x</code>不存在，会报异常。</li><li><code>a.get(x)</code>：获取关键字<code>x</code>对应的值，如果<code>x</code>不存在，会返回<code>None</code>，不会报异常。</li><li><code>a.get(x, y)</code>：获取关键字<code>x</code>对应的值，如果<code>x</code>不存在，会返回默认值<code>y</code>，不会报异常。</li><li><code>a[x] = y</code>：在字典中插入一对元素，如果关键字<code>x</code>已存在，则将它之前映射的值覆盖掉。</li><li><code>del a[x]</code>：删除关键字<code>x</code>对应的元素对，如果<code>x</code>不存在，会报异常。</li><li><code>x in a</code>：检查字典中是否存在关键字<code>x</code>。</li><li><code>x not in a</code>：检查字典中是否不存在关键字<code>x</code>。</li><li><code>a.keys()</code>：返回字典的所有<code>key</code>。</li><li><code>a.values()</code>：返回字典的所有<code>value</code>。</li><li><code>a.items()</code>：返回字典的所有由<code>key</code>和<code>value</code>组成的元组。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;abc&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;def&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;python&#x27;</span>: <span class="number">3</span>&#125;  <span class="comment"># 初始化一个字典</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;def&#x27;</span>])  <span class="comment"># 输出2</span></span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&#x27;def&#x27;</span>))  <span class="comment"># 输出2</span></span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&#x27;xyz&#x27;</span>, <span class="number">5</span>))  <span class="comment"># 因为&#x27;xyz&#x27;不存在，所以输出默认值5</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;hello&#x27;</span>] = <span class="number">4</span>  <span class="comment"># 插入一对元素 &#x27;hello&#x27; -&gt; 4</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出&#123;&#x27;abc&#x27;: 1, &#x27;def&#x27;: 2, &#x27;python&#x27;: 3, &#x27;hello&#x27;: 4&#125;</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;def&#x27;</span>] = <span class="number">5</span>  <span class="comment"># 更新&#x27;def&#x27;映射的值</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;def&#x27;</span>])  <span class="comment"># 输出5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="string">&#x27;python&#x27;</span>]  <span class="comment"># 删除关键字&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出&#123;&#x27;abc&#x27;: 1, &#x27;def&#x27;: 5, &#x27;hello&#x27;: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> a)  <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(a.keys())  <span class="comment"># 输出dict_keys([&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;hello&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(a.values())  <span class="comment"># 输出dict_values([1, 5, 4])</span></span><br><span class="line"><span class="built_in">print</span>(a.items())  <span class="comment"># 输出dict_items([(&#x27;abc&#x27;, 1), (&#x27;def&#x27;, 5), (&#x27;hello&#x27;, 4)])</span></span><br></pre></td></tr></table></figure><h3 id="使用for循环遍历字典">使用<code>for</code>循环遍历字典</h3><p>类似于列表，字典也可以用<code>for ... in ...</code>的形式遍历。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;abc&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;def&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;python&#x27;</span>: <span class="number">3</span>&#125;  <span class="comment"># 初始化一个字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> a:  <span class="comment"># 遍历key</span></span><br><span class="line">    <span class="built_in">print</span>(k, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> a.keys():  <span class="comment"># 遍历key</span></span><br><span class="line">    <span class="built_in">print</span>(k, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> a.values():  <span class="comment"># 遍历value</span></span><br><span class="line">    <span class="built_in">print</span>(v, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> a.items():  <span class="comment"># 遍历key-value对</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s, %d) &quot;</span> % (k, v), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><hr /><h2 id="作业题扩展内容">作业题扩展内容</h2><ol type="1"><li><code>map()</code>也可以用<code>for ... in ...</code>的形式遍历。例如：<code>for x in map(int, input().split())</code>可以遍历一行内用空格隔开的每个整数。</li><li><code>map()</code>函数的返回值也可以直接转化成<code>set()</code>，例如：<code>set(map(int, input().split()))</code>可以将一行用空格隔开的整数存到<code>set()</code>中。</li><li><code>sorted()</code>函数可以将列表、元组、集合、字典排序，并返回一个新列表。如果对字典排序，则返回字典所有<code>key</code>排序后的列表。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;元组集合和字典&quot;&gt;【7.元组、集合和字典】&lt;/h1&gt;
&lt;p&gt;列表、集合和字典是Python最常使用的数据结构。——闫学灿&lt;/p&gt;
&lt;h2 id=&quot;元组&quot;&gt;元组&lt;/h2&gt;
&lt;p&gt;元组跟&lt;a
href=&quot;https://www.acwing.com/file_</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%906.%E5%87%BD%E6%95%B0%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%906.%E5%87%BD%E6%95%B0%E3%80%91/</id>
    <published>2024-09-15T03:56:32.495Z</published>
    <updated>2024-09-15T04:01:13.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数">【6.函数】</h1><p>当代码中需要重复使用相同的逻辑时，可以使用函数来减少代码量。当代码较长时，可以使用函数来将逻辑分割成若干部分，使代码结构更容易让人看懂。</p><p>Python中函数的用法非常多，80%的用法不常用，20%的用法常用。大家不要把精力浪费在背完所有用法上，而要把主要精力放到最常用的20%的用法和代码逻辑上，至于另外80%不常用的用法，边用边查就行。</p><h2 id="函数基础">函数基础</h2><p>Python中一个典型的函数定义包括以下部分：关键字<code>def</code>、函数名称、由<span class="math inline">\(0\)</span>个或多个形参组成的列表以及函数体。</p><h3 id="编写函数">编写函数</h3><p>我们来编写一个求阶乘的函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>函数名称是<code>fact</code>，给它传入一个<code>n</code>，会返回<code>n</code>的阶乘。<code>return</code>语句负责结束函数并返回<code>res</code>的值。</p><h3 id="调用函数">调用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们要计算5的阶乘，答案是：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fact(<span class="number">5</span>))  <span class="comment"># 输出 120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算结束啦！&quot;</span>)</span><br></pre></td></tr></table></figure><p>函数的调用完成两项工作：一是用实参初始化函数对应的形参，二是将控制权转移给被调用的函数。此时，代码原本的执行顺序被暂时中断，被调函数开始执行。等被调用函数执行完后，再继续执行之前的代码。</p><h3 id="形参和实参">形参和实参</h3><p>实参指调用函数时传入的变量或常量，形参指定义函数时参数列表里的变量。</p><p>形参列表可以为空，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f()  <span class="comment"># 输出 Hello World</span></span><br></pre></td></tr></table></figure></p><h4 id="形参的初始化方式">形参的初始化方式</h4><p>调用函数时会用实参去初始化形参，初始化的顺序有两种：</p><p>第一种是用位置实参来初始化形参。顾名思义，实参会按位置关系来初始化形参，第一个实参初始化第一个形参，第二个实参初始化第二个形参，依此类推。形参和实参的个数必须匹配。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d)</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>, <span class="number">4.2</span>)  <span class="comment"># 输出 a = 1, b = True, c = Python, d = 4.2</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>, <span class="number">4.2</span>, <span class="number">3</span>)  <span class="comment"># 会报错，因为实参个数多于形参</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>)  <span class="comment"># 会报错，因为实参个数少于形参</span></span><br></pre></td></tr></table></figure></p><p>第二种是用关键字实参来初始化形参。此时实参不再按位置关系来初始化形参，而是按变量名初始化。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f()的定义如上所述</span></span><br><span class="line">f(b=<span class="number">1</span>, c=<span class="literal">True</span>, a=<span class="string">&quot;Python&quot;</span>, d=<span class="number">4.2</span>)  <span class="comment"># 输出 a = Python, b = 1, c = True, d = 4.2</span></span><br></pre></td></tr></table></figure><p>两种方式也可以混合使用，但是位置实参一定要放到关键字实参之前。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f()的定义如上所述</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, d=<span class="string">&quot;Python&quot;</span>, c=<span class="number">4.2</span>)  <span class="comment"># 输出 a = 1, b = 2, c = 4.2, d = Python</span></span><br><span class="line">f(<span class="number">1</span>, b=<span class="number">3</span>, <span class="string">&quot;Python&quot;</span>, d=<span class="number">4.2</span>)  <span class="comment"># 会报错，因为位置实参位于关键字实参后面了。</span></span><br></pre></td></tr></table></figure><h4 id="带默认值的形参">带默认值的形参</h4><p>形参也可以设置默认值，但所有带默认值的形参必须是最后几个。当某些形参没有被初始化时，这些形参会使用默认值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c=<span class="number">3</span>, d=<span class="string">&quot;Python&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d)</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># c和d没有被初始化，采用默认值。输出 a = 1, b = 2, c = 3, d = Python</span></span><br><span class="line">f(<span class="number">1</span>, b=<span class="number">2</span>, d=<span class="string">&quot;AcWing&quot;</span>)  <span class="comment"># c没有被初始化，采用默认值。输出 a = 1, b = 2, c = 3, d = AcWing</span></span><br></pre></td></tr></table></figure></p><h4 id="其它参数写法">其它参数写法</h4><p>其它参数写法用得不多，想了解的同学可以参考<ahref="https://docs.python.org/zh-cn/3/tutorial/controlflow.html#more-on-defining-functions">函数定义详解</a>。</p><h3 id="变量的作用域">变量的作用域</h3><p>函数内定义的变量为局部变量，只能在函数内部使用。</p><p>当需要修改用全局变量时，需要用<code>global</code>关键字在函数内声明全局变量。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">global</span> x  <span class="comment"># 在函数内声明全局变量</span></span><br><span class="line">    x = <span class="number">666</span></span><br><span class="line">    y = <span class="number">777</span></span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br></pre></td></tr></table></figure></p><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f()  <span class="comment"># 输出 666 777</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 会发现全局变量x也被修改了</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 会报错，因为y是局部变量，函数外无法使用</span></span><br></pre></td></tr></table></figure></p><h3 id="嵌套定义函数">嵌套定义函数</h3><p>函数内部也可以定义函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):  <span class="comment"># 定义函数g()</span></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    g(<span class="number">5</span>)  <span class="comment"># 调用函数g()</span></span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f()  <span class="comment"># 输出6</span></span><br></pre></td></tr></table></figure></p><h3 id="pass语句"><code>pass</code>语句</h3><p>当函数定义完但还不想实现时，可以用<code>pass</code>占位符，来避免出现语法错误。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr /><h2 id="参数传递">参数传递</h2><h3 id="值传递">值传递</h3><p><code>int</code>、<code>float</code>、<code>bool</code>、字符串等采用值传递。</p><p>将实参的初始值拷贝给形参。此时，对形参的改动不会影响实参的初始值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">y</span>):</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">f(x)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 会发现x的值没变</span></span><br></pre></td></tr></table></figure></p><h3 id="引用传递">引用传递</h3><p>列表采用引用传递。</p><p>将实参的引用传给形参，此时对形参的修改会影响实参的初始值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">b</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        b[i] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">f(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 会发现列表a中的每个数加了1</span></span><br></pre></td></tr></table></figure></p><hr /><h2 id="return语句"><code>return</code>语句</h2><p>return语句终止当前正在执行的函数并将控制权返回到调用该函数的地方，并返回结果。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="comment"># 不写返回值时，会返回None</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>  <span class="comment"># 返回一个变量</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>, <span class="number">5</span>  <span class="comment"># 返回多个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = f(<span class="number">1</span>)</span><br><span class="line">b = f(<span class="number">2</span>)</span><br><span class="line">c, d = f(<span class="number">3</span>)</span><br><span class="line">e = f(<span class="number">4</span>)  <span class="comment"># 没写return时，也会返回None</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, e)  <span class="comment"># 输出 None 3 4 5 None</span></span><br></pre></td></tr></table></figure><hr /><h2 id="lambda表达式">lambda表达式</h2><p><code>lambda</code>关键字可以创建匿名函数，目的是为了简化代码。可以对比下面两种写法，会发现<code>lambda</code>表达式的写法更短一些。</p><p>常与<code>sort()</code>函数配合使用，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="string">&quot;one&quot;</span>], [<span class="number">2</span>, <span class="string">&quot;two&quot;</span>], [<span class="number">3</span>, <span class="string">&quot;three&quot;</span>], [<span class="number">4</span>, <span class="string">&quot;four&quot;</span>]]</span><br><span class="line"></span><br><span class="line">pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])  <span class="comment"># 每个元素使用第二个变量比较大小</span></span><br><span class="line"><span class="built_in">print</span>(pairs)  <span class="comment"># 输出：[[4, &#x27;four&#x27;], [1, &#x27;one&#x27;], [3, &#x27;three&#x27;], [2, &#x27;two&#x27;]]</span></span><br></pre></td></tr></table></figure><p>等价于下面的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="string">&quot;one&quot;</span>], [<span class="number">2</span>, <span class="string">&quot;two&quot;</span>], [<span class="number">3</span>, <span class="string">&quot;three&quot;</span>], [<span class="number">4</span>, <span class="string">&quot;four&quot;</span>]]</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compare</span>(<span class="params">pair</span>):</span><br><span class="line">    <span class="keyword">return</span> pair[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pairs.sort(key=compare)  <span class="comment"># 每个元素使用第二个变量比较大小</span></span><br><span class="line"><span class="built_in">print</span>(pairs)  <span class="comment"># 输出：[[4, &#x27;four&#x27;], [1, &#x27;one&#x27;], [3, &#x27;three&#x27;], [2, &#x27;two&#x27;]]</span></span><br></pre></td></tr></table></figure></p><hr /><h2 id="函数递归">函数递归</h2><p>在一个函数内部，也可以调用函数自身。这种写法被称为递归。</p><p>写递归函数可以从集合的角度来思考。理解递归函数的执行顺序可以用树的形式来思考。</p><p>例如，求解斐波那契数列第 <span class="math inline">\(n\)</span>项可以采用如下写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>​<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))  <span class="comment"># 输出 8</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;【6.函数】&lt;/h1&gt;
&lt;p&gt;当代码中需要重复使用相同的逻辑时，可以使用函数来减少代码量。当代码较长时，可以使用函数来将逻辑分割成若干部分，使代码结构更容易让人看懂。&lt;/p&gt;
&lt;p&gt;Python中函数的用法非常多，80%的用法不常用，20%的用法常用。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%905.%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%905.%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%91/</id>
    <published>2024-09-15T03:49:58.993Z</published>
    <updated>2024-09-15T03:56:09.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串">【5.字符串】</h1><p>字符串是计算机与人类沟通的重要手段。——闫学灿</p><h2 id="字符与整数的联系ascii码">字符与整数的联系——ASCII码</h2><p>每个常用字符都对应一个<code>-128 ~ 127</code>的数字，二者之间可以相互转化。注意：目前负数没有与之对应的字符。</p><ul><li><p><code>ord()</code>函数可以求一个字符的ASCII码。注意输入是一个字符，而不是字符串。</p></li><li><p><code>chr()</code>函数可以将一个ASCII码转化成对应的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(c))</span><br><span class="line"></span><br><span class="line">a = <span class="number">66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(a))</span><br></pre></td></tr></table></figure></li></ul><p>常用ASCII值：<code>'A'- 'Z'</code>是<code>65 ~ 90</code>，<code>'a' - 'z'</code>是<code>97 - 122</code>，<code>0 - 9</code>是<code>48 - 57</code></p><p><strong>注意</strong>：虽然字符可以跟整数相互转化，但在Python中，字符不能参与数值运算，这一点跟C++、Java等语言是不同的。</p><hr /><h2 id="字符串常量的写法">字符串常量的写法</h2><p>在Python中，字符串既可以用单引号来表示，也可以用双引号来表示，二者完全相同。<br />这一点跟C++、Java等编程语言是不同的，在这些编程语言中，用单引号来表示字符，用双引号来表示字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello World&quot;</span>  <span class="comment"># 双引号写法</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;Hello World&#x27;</span>  <span class="comment"># 单引号写法</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>两个或多个字符串常量并排写，会被自动合并，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;My &quot;</span> <span class="string">&quot;name &quot;</span> <span class="string">&quot;is yxc.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出：My name is yxc.</span></span><br></pre></td></tr></table></figure><p>一个字符串如果包含多行，可以采用<code>"""..."""</code>或者<code>'''...'''</code>的初始化方式，字符串中将自动包含回车字符，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;&quot;&quot;Usage: thingy [OPTIONS]</span></span><br><span class="line"><span class="string">     -h                        Display this usage message</span></span><br><span class="line"><span class="string">     -H hostname               Hostname to connect to&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>会得到如下输出：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Usage: <span class="title">thingy</span> [<span class="title">OPTIONS</span>]</span></span><br><span class="line"><span class="function">     -<span class="title">h</span>                        <span class="title">Display</span> <span class="title">this</span> <span class="title">usage</span> <span class="title">message</span></span></span><br><span class="line"><span class="function">     -<span class="title">H</span> <span class="title">hostname</span>               <span class="title">Hostname</span> <span class="title">to</span> <span class="title">connect</span> <span class="title">to</span></span></span><br></pre></td></tr></table></figure><hr /><h2 id="表示特殊字符转义">表示特殊字符——转义</h2><p>当想在字符串中表示特殊字符时，一般可以在字符前加反斜杠<code>\</code>。常见需要转义的字符有：</p><table><thead><tr class="header"><th>转义字符</th><th>含义</th><th>ASCII码（十进制）</th></tr></thead><tbody><tr class="odd"><td><code>\n</code></td><td>回车</td><td>10</td></tr><tr class="even"><td><code>\\</code></td><td>代表一个反斜杠 <code>\</code></td><td>92</td></tr><tr class="odd"><td><code>\"</code></td><td>表示一个双引号</td><td>34</td></tr><tr class="even"><td><code>\'</code></td><td>表示一个单引号</td><td>39</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is:\n\&quot;yxc!\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>会得到如下输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My name <span class="keyword">is</span>:</span><br><span class="line"><span class="string">&quot;yxc!&quot;</span></span><br></pre></td></tr></table></figure><p>另外，如果想输出单引号，也可以用双引号来表示，反之亦然。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#x27;yxc!&#x27;&quot;</span>)  <span class="comment"># 输出：My name is &#x27;yxc!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is &quot;yxc!&quot;&#x27;</span>)  <span class="comment"># 输出：My name is &quot;yxc!&quot;</span></span><br></pre></td></tr></table></figure><hr /><h2 id="访问字符串中的每个字符">访问字符串中的每个字符</h2><p>可以通过下标读取字符串中的每个字符，下标从0开始，也可以是负数，负数下标表示的是除以字符串长度的余数对应的位置。</p><p>负数下标相当于将字符串首位相接，然后从0往前数。</p><p>如果字符串长度是 <spanclass="math inline">\(n\)</span>，那么下标只能取 <spanclass="math inline">\(-n \sim n - 1\)</span>之间的整数，超出范围会报错。</p><p><strong>注意</strong>：字符串中的每个字符不能修改。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], <span class="built_in">ord</span>(a[<span class="number">5</span>]))  <span class="comment"># 输出H 32</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>] = <span class="string">&#x27;x&#x27;</span>  <span class="comment"># 会报错，字符串不能修改</span></span><br></pre></td></tr></table></figure><hr /><h2 id="使用循环语句遍历字符串">使用循环语句遍历字符串</h2><p>可以通过下标访问，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;acwing&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(s[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><p>可以通过<code>for ... in ...</code>直接遍历，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 注意c本身也是字符串类型</span></span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><hr /><h2 id="字符串的切片操作">字符串的切片操作</h2><p>字符串的切片操作会返回一个新字符串。用法：</p><ul><li><code>a[begin:end]</code>会返回包含<code>a[begin], a[begin + 1], ..., a[end - 1]</code>的字符串。</li><li>省略<code>begin</code>时，<code>begin</code>的默认值是0。</li><li>省略<code>end</code>时，<code>end</code>的默认值是字符串长度。</li><li>如果<code>begin</code>或<code>end</code>是负数，表示的是除以字符串长度后的余数。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出BCD</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:])  <span class="comment"># 输出BCDE</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出ABCD</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 输出ABCDE</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 等价于print(a[1:4])</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：字符串的切片不支持写操作。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] = <span class="string">&quot;XY&quot;</span>  <span class="comment"># 会报错，字符串不能修改</span></span><br></pre></td></tr></table></figure><hr /><h2 id="字符串的复制">字符串的复制</h2><p>跟<ahref="https://www.acwing.com/file_system/file/content/whole/index/content/10015276/">列表</a>不同，字符串的每次复制操作，都会得到一个全新的字符串。</p><hr /><h2 id="字符串的运算">字符串的运算</h2><ul><li>字符串的加法可以将两个字符串拼接起来，得到一个新字符串。</li><li>字符串乘以一个整数，可以将若干个自身拼接起来，得到一个新字符串。</li><li>字符串支持比较运算符，按字典序比较大小。即如果两个字符串相同，则表示相等；否则找到两个字符串从左到右数第一个不一样的字符，哪个字符串的字符的ASCII码小，哪个字符串的字典序就小；另外空字符比任何字符都小。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello &quot;</span></span><br><span class="line">b = <span class="string">&quot;World&quot;</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出Hello World</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出Hello Hello Hello</span></span><br><span class="line"></span><br><span class="line">e = a * <span class="number">3</span> + <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(e)  <span class="comment"># 输出Hello Hello Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># 按字典序比较大小，输出True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span> &gt; <span class="string">&quot;22&quot;</span>)  <span class="comment"># 按字典序比较大小，输出False</span></span><br></pre></td></tr></table></figure><hr /><h2 id="字符串的常用操作">字符串的常用操作</h2><p>假设<code>s</code>是一个字符串，则：</p><ul><li><code>len(s)</code>返回字符串长度。</li><li><code>s.split(sep)</code>返回一个字符串列表。如果给出了<code>sep</code>就按<code>sep</code>分隔；如果没给出，则会按空格分隔，但连续的空格会被视为单个分隔符，而且会忽略首尾的空白字符。</li><li><code>s.strip()</code>将首尾的空白字符删除。</li><li><code>s.replace(old, new)</code>将<code>s</code>中所有的<code>old</code>子串都改成<code>new</code>。</li><li><code>s.find("abc")</code>查询某个子串在<code>s</code>中第一次出现的下标；如果不存在，则返回-1。</li><li><code>s.startswith(prefix)</code>判断<code>prefix</code>是否为<code>s</code>的前缀。</li><li><code>s.endswith(suffix)</code>判断<code>suffix</code>是否为<code>s</code>的后缀。</li><li><code>s.lower()</code>将所有大写字母变成小写。</li><li><code>s.upper()</code>将所有小写字母变成大写。</li><li><code>s.join(a)</code>，<code>a</code>是一个字符串列表，这个函数返回将<code>a</code>中的字符用<code>s</code>作为分隔符拼接起来的结果。</li></ul><p><strong>注意</strong>：返回的所有字符串都是新字符串，原字符串不变。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;abc def xyz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))  <span class="comment"># 输出11</span></span><br><span class="line"><span class="built_in">print</span>(s1.split())  <span class="comment"># 输出[&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;xyz&#x27;]</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&quot;  abc abc  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s2.strip())  <span class="comment"># 输出abc abc</span></span><br><span class="line"><span class="built_in">print</span>(s2.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;*&quot;</span>))  <span class="comment"># 输出  * *</span></span><br><span class="line"><span class="built_in">print</span>(s2.find(<span class="string">&quot;abc&quot;</span>), s2.find(<span class="string">&quot;xyz&quot;</span>))  <span class="comment"># 输出2 -1</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="string">&quot;Abc deF&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s3.startswith(<span class="string">&quot;Ab&quot;</span>))  <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(s3.endswith(<span class="string">&quot;deF&quot;</span>))  <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(s3.lower())  <span class="comment"># 输出abc def</span></span><br><span class="line"><span class="built_in">print</span>(s3.upper())  <span class="comment"># 输出ABC DEF</span></span><br><span class="line"></span><br><span class="line">s4 = <span class="string">&quot;, &quot;</span></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(s4.join(a))  <span class="comment"># 输出aa, bb, cc</span></span><br></pre></td></tr></table></figure><h2 id="更复杂的格式化输出">更复杂的格式化输出</h2><p>当需要用到更复杂的格式化输出时，现查即可。可以参考：</p><ul><li><ahref="https://docs.python.org/zh-cn/3/tutorial/inputoutput.html#formatted-string-literals">更复杂的输出格式</a></li><li><ahref="https://docs.python.org/zh-cn/3/library/stdtypes.html#old-string-formatting">printf风格的字符串格式化</a></li></ul><hr /><h2 id="作业题扩展内容">作业题扩展内容</h2><ol type="1"><li><p>作业的评测器会自动忽略每一行的行末空格，所以行末输出多余空格也视为正确。</p></li><li><p><code>s.isdigit()</code>：当字符串<code>s</code>不是空字符串，且包含的所有字符都是数字时返回True，否则返回False。</p></li><li><p><code>a, b = ["abc", "def"]</code>这种写法可以将<code>"abc"</code>赋值给第一个变量<code>a</code>，将<code>"def"</code>赋值给第二个变量<code>b</code>。</p></li><li><p><code>s.rfind("abc")</code>查询某个子串在<code>s</code>中最后一次出现的下标；如果不存在，则返回-1。</p></li><li><p>当不知道读入的具体行数时，可以采用如下方法一次性读取所有行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> stdin.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.strip())  <span class="comment"># strip()是为了去掉行末的回车</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串&quot;&gt;【5.字符串】&lt;/h1&gt;
&lt;p&gt;字符串是计算机与人类沟通的重要手段。——闫学灿&lt;/p&gt;
&lt;h2 id=&quot;字符与整数的联系ascii码&quot;&gt;字符与整数的联系——ASCII码&lt;/h2&gt;
&lt;p&gt;每个常用字符都对应一个&lt;code&gt;-128 ~ 127&lt;/co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%904.%E5%88%97%E8%A1%A8%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%904.%E5%88%97%E8%A1%A8%E3%80%91/</id>
    <published>2024-09-15T03:45:45.234Z</published>
    <updated>2024-09-15T03:48:51.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表">【4.列表】</h1><p>程序 = 数据 + 算法，列表是存储数据的强而有力的手段。 ——闫学灿</p><p>列表是一种常见的变量类型，可以存储一列元素。元素的类型可以不同，不过大多数情况下类型是相同的。</p><h2 id="列表的初始化">列表的初始化</h2><p>列表需要用方括号括起来，中间的元素用逗号隔开，最后一个元素后可以多加一个逗号。</p><h3 id="直接初始化">直接初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []  <span class="comment"># 定义一个空列表</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 含有2个整数的列表</span></span><br><span class="line">c = [<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="number">3.14</span>]  <span class="comment"># 含有3个不同类型元素的列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><h3 id="通过append函数初始化">通过<code>append</code>函数初始化</h3><p><code>append()</code>函数可以在列表末尾添加一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line">    a.append(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line">    b.append(i * i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3id="通过for语句初始化列表长度和每个位置的数值">通过<code>for</code>语句初始化列表长度和每个位置的数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># 初始化[0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">b = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># 初始化[0, 1, 4, 9]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><hr /><h2 id="访问列表元素">访问列表元素</h2><p>可以通过下标读/写列表中的元素，下标从0开始，也可以是负数，负数下标表示的是除以列表长度的余数对应的位置。</p><p>负数下标相当于将列表首位相接，然后从0往前数。</p><p>如果列表长度是 <span class="math inline">\(n\)</span>，那么下标只能取<span class="math inline">\(-n \sim n - 1\)</span>之间的整数，超出范围会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])  <span class="comment"># 读取列表中每个位置的值</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 给列表中的某个位置写值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>])  <span class="comment"># 由于-1 % 3 = 2，所以表示的是a[2]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="使用循环语句遍历列表">使用循环语句遍历列表</h2><p>可以通过下标访问，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(a[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以通过<code>for ... in ...</code>直接遍历，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>练习题： 假设斐波那契数列的前两项分别是 <spanclass="math inline">\(a\_0 = 0, a\_1 = 1\)</span>, 求 <spanclass="math inline">\(a\_n\)</span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[n])</span><br></pre></td></tr></table></figure><hr /><h2 id="列表的切片操作">列表的切片操作</h2><p>列表的切片操作会返回一个新列表。用法：</p><ul><li><code>a[begin:end]</code>会返回包含<code>a[begin], a[begin + 1], ..., a[end - 1]</code>的列表。</li><li>省略<code>begin</code>时，<code>begin</code>的默认值是0。</li><li>省略<code>end</code>时，<code>end</code>的默认值是列表长度。</li><li>如果<code>begin</code>或<code>end</code>是负数，表示的是除以列表长度后的余数。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出[1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:])  <span class="comment"># 输出[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 等价于print(a[1:4])</span></span><br></pre></td></tr></table></figure><p>切片也支持写操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="列表的复制">列表的复制</h2><p>列表跟其他变量类型不同，如果用等号复制列表，那么原列表和新列表是同一个列表。对新列表修改，会修改原列表的值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]和b[0]都被修改了</span></span><br></pre></td></tr></table></figure><p>使用切片，可以得到一个原列表的<ahref="https://docs.python.org/zh-cn/3/library/copy.html">浅拷贝</a>。此时再修改新列表，原列表就不会发生变化了。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a[:]</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment"># 会发现a[0]没有被修改</span></span><br></pre></td></tr></table></figure><hr /><h2 id="列表的运算">列表的运算</h2><ul><li>列表的加法可以将两个列表拼接起来，得到一个新列表。</li><li>列表乘以一个整数，可以将若干个自身拼接起来，得到一个新列表。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">c = a + b  <span class="comment"># c相当于a和b的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出[0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">3</span>  <span class="comment"># d相当于a的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出[0, 1, 2, 0, 1, 2, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a += [<span class="number">3</span>]  <span class="comment"># 在a的末尾添加一个新元素3</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="列表的常用操作">列表的常用操作</h2><p>假设<code>a</code>是一个列表，则：</p><ul><li><code>len(a)</code> 返回列表长度。</li><li><code>a.append(x)</code> 在列表末尾添加一个新元素。</li><li><code>a.pop()</code> 删除列表的最后一个元素。</li><li><code>a.reverse()</code> 将整个列表翻转。</li><li><code>a.sort()</code> 将整个列表从小到大排序。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.pop()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 将[0, 1, 2, 3]的最后一个数删掉，所以输出[0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[2, 1, 0]</span></span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出[0, 1, 2]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="嵌套列表">嵌套列表</h2><p>列表中的元素也可以是列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">matrix = [  <span class="comment"># 列表中的元素也可以是列表</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],  <span class="comment"># 最后一个元素后可以添加逗号</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">99</span>  <span class="comment"># 修改嵌套列表中元素的值</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">0</span>])  <span class="comment"># 读取嵌套列表中元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[i])):</span><br><span class="line">        <span class="built_in">print</span>(matrix[i][j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:  <span class="comment"># 循环打印整个矩阵</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 在行末输出回车</span></span><br></pre></td></tr></table></figure><p>嵌套列表的常用初始化方式有两种。</p><p>采用<code>append()</code>函数初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">matrix = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        row.append(i * <span class="number">3</span> + j)</span><br><span class="line">    matrix.append(row)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><p>采用<code>for</code>语句直接初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[i * <span class="number">3</span> + j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><hr /><h2 id="作业题扩展内容">作业题扩展内容</h2><ol type="1"><li>当需要读入一行整数时，可以用：<code>a = list(map(int, input().split()))</code>。类似地，当需要读入一行浮点数时，可以用<code>a = list(map(float, input().split()))</code>：</li><li><code>min(a, b)</code>可以求两个数的最小值。类似得<code>min(a, b, c)</code>可以求三个数的最小值，以此类推。同样地<code>max()</code>可以求最大值。</li><li><code>a[::-1]</code>可以返回一个逆序的新列表。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;列表&quot;&gt;【4.列表】&lt;/h1&gt;
&lt;p&gt;程序 = 数据 + 算法，列表是存储数据的强而有力的手段。 ——闫学灿&lt;/p&gt;
&lt;p&gt;列表是一种常见的变量类型，可以存储一列元素。元素的类型可以不同，不过大多数情况下类型是相同的。&lt;/p&gt;
&lt;h2 id=&quot;列表的初始化&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%903.%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%903.%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%91/</id>
    <published>2024-09-15T03:37:06.922Z</published>
    <updated>2024-09-15T03:43:54.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环语句">【3.循环语句】</h1><h2 id="while循环"><code>while</code>循环</h2><p>可以简单理解为循环版的<code>if</code>语句。<code>if</code>语句是判断一次，如果条件成立，则执行后面的语句；<code>while</code>是每次判断，如果条件成立，则执行循环体中的语句，否则停止。</p><p>注意，类似于<code>if</code>语句，<code>while</code>语句也需要满足：</p><ul><li><p><code>while</code>后需要加上冒号<code>:</code></p></li><li><p><code>while</code>语句的代码块需要缩进统一长度，规范写法是缩进4个空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确写法</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误写法</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">  i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>练习：求 <span class="math inline">\(1\sim 100\)</span>中所有数的立方和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    s += i ** <span class="number">3</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>练习：求斐波那契数列的第<code>n</code>项。<code>f(1) = 1</code>,<code>f(2) = 1</code>, <code>f(n) = f(n - 1) + f(n - 2)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a, b, i = <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line">    a, b = b, a + b</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>死循环：循环永久执行，无法结束。我们要避免写出死循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><hr /><h2 id="for循环"><code>for</code>循环</h2><p><code>for</code>循环语句用来按顺序枚举<code>range</code>、字符串等数据类型中的元素。类似于<code>while</code>和<code>if</code>语句，<code>for</code>语句同样需要满足冒号和缩进的要求。</p><p>注意：本节课重在学习<code>for</code>循环，而非学习列表、元组、集合、字典等复杂数据类型，所以<code>for</code>语句与这些数据类型配合的使用技巧会放到下一章中展开。</p><h3 id="遍历字符串">遍历字符串</h3><p><code>for</code>语句可以遍历字符串中的每个字符。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 注意c本身也是字符串类型</span></span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;acwing&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><h3 id="遍历range">遍历<code>range</code></h3><p><code>range()</code>函数可以生成等差数列，可以接收1个、2个或者3个整数参数：</p><ol type="1"><li>接收1个整数参数时：<code>range(x)</code>会按顺序返回 <spanclass="math inline">\(0, 1, 2, 3, … x - 1\)</span> 这个数列。</li><li>接收2个整数参数时：<code>range(x, y)</code>会按顺序返回 <spanclass="math inline">\(x, x + 1, x + 2, …, y - 1\)</span> 这个数列。</li><li>接收3个整数参数时：<code>range(x, y, z)</code>分为两种情况：<ul><li><code>z &gt; 0</code>时，按顺序返回 <span class="math inline">\(x, x+ z, x + 2z, x + 3z, …\)</span> 这个数列中小于 <spanclass="math inline">\(y\)</span> 的所有数。</li><li><code>z &lt; 0</code>时，按顺序返回 <span class="math inline">\(x, x+ z, x + 2z, x + 3z, …\)</span> 这个数列中大于 <spanclass="math inline">\(y\)</span> 的所有数。</li></ul></li></ol><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 输出：0 1 2 3 4 </span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">8</span>):  <span class="comment"># 输出：3 4 5 6 7 </span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):  <span class="comment"># 输出：1 3 5 7 9 </span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, -<span class="number">10</span>, -<span class="number">2</span>):  <span class="comment"># 输出：0 -2 -4 -6 -8 </span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><p>练习：求 <span class="math inline">\(1 \sim 100\)</span>中所有数的立方和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    s += i ** <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>练习：求斐波那契数列的第<code>n</code>项。<code>f(1) = 1</code>,<code>f(2) = 1</code>, <code>f(n) = f(n - 1) + f(n - 2)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><hr /><h2 id="跳转语句">跳转语句</h2><h3 id="break">break</h3><p>可以提前从最近的一层循环中退出，一般与<code>if</code>语句搭配。</p><p>例题：判断一个大于1的整数是否是质数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_prime:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="continue">continue</h3><p>可以跳过当前这次迭代后面的语句，并继续下一次迭代。作用与<code>if</code>语句类似。</p><p>例题：求 <span class="math inline">\(1 \sim 100\)</span>中所有偶数的和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    s += i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><hr /><h2id="循环中的else子句和pass语句">循环中的<code>else</code>子句和<code>pass</code>语句</h2><p>本节内容用得不多，了解即可</p><h3 id="循环中的else子句">循环中的<code>else</code>子句</h3><p><code>for</code>或<code>while</code>循环可以包括<code>else</code>子句，会在循环结束后执行。不过如果循环是被<code>break</code>结束的，那么<code>else</code>子句就不会执行了。</p><p>例题：判断一个大于1的整数是否是质数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d = %d * %d&quot;</span> % (n, x, n // x))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 注意else是for语句的子句，所以需要与for语句对齐</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is a prime number&quot;</span> % n)</span><br></pre></td></tr></table></figure><h3 id="pass语句"><code>pass</code>语句</h3><p>类似于<code>if</code>语句，当<code>for</code>或者<code>while</code>循环里不想写任何代码时，可以写上<code>pass</code>语句，这个语句不执行任何动作。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 不进行任何操作</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr /><h2 id="多层循环">多层循环</h2><p><code>while</code>和<code>for</code>循环内的代码块中也可以包含循环语句。</p><p>例题：将 <span class="math inline">\(1\sim 100\)</span> 打印到一个<span class="math inline">\(10 * 10\)</span> 的矩阵中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(k, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><p>练习：打印 <span class="math inline">\(1 \sim 100\)</span>中的所有质数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><hr /><h2 id="作业题易错点">作业题易错点</h2><ol type="1"><li>注意多层<code>for</code>循环中所使用的循环变量尽量使用不同的变量名，防止相互干扰。</li><li>Python3中求一个数的绝对值，可以使用<code>abs()</code>函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;循环语句&quot;&gt;【3.循环语句】&lt;/h1&gt;
&lt;h2 id=&quot;while循环&quot;&gt;&lt;code&gt;while&lt;/code&gt;循环&lt;/h2&gt;
&lt;p&gt;可以简单理解为循环版的&lt;code&gt;if&lt;/code&gt;语句。&lt;code&gt;if&lt;/code&gt;语句是判断一次，如果条件成立，则执行后面</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%902.%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%902.%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E3%80%91/</id>
    <published>2024-09-15T03:25:06.319Z</published>
    <updated>2024-09-15T03:45:07.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断语句">【2. 判断语句</h1><h2 id="if-语句">if 语句</h2><h3 id="基本if-else语句">基本if-else语句</h3><p>当条件成立时，执行某些语句；否则执行另一些语句。<br />注意：</p><ul><li><code>if</code>和<code>else</code>后需要加上冒号<code>:</code></li><li><code>if</code>语句的代码块需要缩进统一长度，规范写法是缩进4个空格。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确写法：</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + 1 = %d&quot;</span> % (a, a + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is small!&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d - 1 = %d&quot;</span> % (a, a - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误写法：</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + 1 = %d&quot;</span> % (a, a + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is small!&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d - 1 = %d&quot;</span> % (a, a - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><code>else</code>语句可以省略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + 1 = %d&quot;</span> % (a, a + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>当只有一条语句时，可以写在同一行，但这样写不规范，只要了解即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is big!&quot;</span> % a)</span><br><span class="line"><span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;%d is small!&quot;</span> % a)</span><br></pre></td></tr></table></figure><p>练习：输入一个整数，输出这个数的绝对值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(-x)</span><br></pre></td></tr></table></figure><p>练习：输入两个整数，输出两个数中较大的那个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p><code>if-else</code>语句内也可以是<code>if-else</code>语句。</p><p>练习：输入三个整数，输出三个数中最大的那个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="keyword">if</span> a &gt; c:</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> b &gt; c:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h3 id="常用比较运算符">常用比较运算符</h3><ol type="1"><li><p>大于 <code>&gt;</code></p></li><li><p>小于 <code>&lt;</code></p></li><li><p>大于等于 <code>&gt;=</code></p></li><li><p>小于等于 <code>&lt;=</code></p></li><li><p>等于 <code>==</code></p></li><li><p>不等于 <code>!=</code></p></li></ol><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d &gt; %d&quot;</span> % (a, b))</span><br><span class="line"><span class="keyword">if</span> a &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d &gt;= %d&quot;</span> % (a, b))</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d &lt; %d&quot;</span> % (a, b))</span><br><span class="line"><span class="keyword">if</span> a &lt;= b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d &lt;= %d&quot;</span> % (a, b))</span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d == %d&quot;</span> % (a, b))</span><br><span class="line"><span class="keyword">if</span> a != b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d != %d&quot;</span> % (a, b))</span><br></pre></td></tr></table></figure><h3 id="if-else连写"><code>if-else</code>连写</h3><p>注意：<code>else if</code>要写成<code>elif</code>。</p><p>练习：</p><p>输入一个0到100之间的分数，如果大于等于85，输出A；如果大于等于70并且小于85，输出B；如果大于等于60并且小于70，输出C；如果小于60，输出D；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s &gt;= <span class="number">85</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> s &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> s &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure><p>练习：</p><p>1.判断闰年。闰年有两种情况：</p><ol type="1"><li><p>能被100整除时，必须能被400整除；</p></li><li><p>不能被100整除时，被4整除即可。</p></li></ol><p>输入一个年份，如果是闰年输出<code>yes</code>，否则输出<code>no</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="pass-语句"><code>pass</code> 语句</h3><p><code>pass</code>语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 先空出来等以后再实现</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="变量的作用域">变量的作用域</h3><p><code>if</code>语句内部的变量，可以在语句外访问。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    max_value = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    max_value = b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure><h2 id="条件表达式">条件表达式</h2><ol type="1"><li><p>与 <code>and</code></p></li><li><p>或 <code>or</code></p></li><li><p>非 <code>not</code></p></li></ol><p>注意：运算符优先级：<code>not &gt; and &gt; or</code>。</p><p>练习：用一条<code>if</code>语句，判断闰年。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="三元运算">三元运算</h2><p>类似于C++、Java中的问号表达式。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">max_value = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(max_value)</span><br></pre></td></tr></table></figure><h2 id="match语句">match语句</h2><p>python3.10开始新增了<code>match</code>语句。目前作业评测器的Python3采用旧版本，尚未支持<code>match</code>语法。</p><p>注意：</p><ul><li>只有第一个匹配的模式会被执行。且跟C++、Java不同，匹配后只会执行当前模式，不会顺次执行后面的<code>case</code>。</li><li>可以用 <code>|</code> 表示匹配多个模式。</li><li>变量名 <code>_</code> 被作为 通配符 并必定会匹配成功。</li><li>如果没有 <code>case</code> 匹配成功，则不会执行任何分支。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">status = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> status:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bad request&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">418</span> | <span class="number">420</span> | <span class="number">422</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m a teapot&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="作业题易错点">作业题易错点</h2><ol type="1"><li>注意<code>if</code>和<code>else</code>语句后一定要加冒号。</li><li>判断语句内部的代码一定要记得缩进。</li><li>格式化字符串中想表示<code>%</code>时，需要写<code>%%</code>。</li><li>Python中交换两个变量，可以用：<code>a, b = b, a</code>。</li><li>Python中的比较运算符支持链式操作，这一点跟C++和Java等语言不同。例如，给三个数排序的代码可以这么写：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">x, y, z = a, b, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt;= b &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, b, a)</span><br><span class="line"><span class="keyword">elif</span> a &gt;= c &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, c, a)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= a &gt;= c:</span><br><span class="line">    <span class="built_in">print</span>(c, a, b)</span><br><span class="line"><span class="keyword">elif</span> b &gt;= c &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, c, b)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= a &gt;= b:</span><br><span class="line">    <span class="built_in">print</span>(b, a, c)</span><br><span class="line"><span class="keyword">elif</span> c &gt;= b &gt;= a:</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;判断语句&quot;&gt;【2. 判断语句&lt;/h1&gt;
&lt;h2 id=&quot;if-语句&quot;&gt;if 语句&lt;/h2&gt;
&lt;h3 id=&quot;基本if-else语句&quot;&gt;基本if-else语句&lt;/h3&gt;
&lt;p&gt;当条件成立时，执行某些语句；否则执行另一些语句。&lt;br /&gt;
注意：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%901.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%A1%BA%E5%BA%8F%E8%AF%AD%E5%8F%A5%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/%E3%80%901.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%A1%BA%E5%BA%8F%E8%AF%AD%E5%8F%A5%E3%80%91/</id>
    <published>2024-09-15T03:22:45.533Z</published>
    <updated>2024-09-15T03:44:59.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建与顺序语句">【1.环境搭建与顺序语句】</h1><h2 id="语法基础">语法基础</h2><p><ahref="https://docs.python.org/zh-cn/3/tutorial/index.html">Python语法官方文档</a></p><h3 id="变量">变量</h3><table><thead><tr class="header"><th>类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr class="odd"><td>int</td><td>整数</td><td>123</td></tr><tr class="even"><td>float</td><td>浮点数</td><td>1.23, 1.24e5</td></tr><tr class="odd"><td>str</td><td>字符串</td><td>"python", 'acwing'</td></tr><tr class="even"><td>bool</td><td>布尔值</td><td>True, False</td></tr><tr class="odd"><td>list</td><td>列表</td><td>[1, 2, 3]</td></tr><tr class="even"><td>tuple</td><td>元组</td><td>(1, 2, 3)</td></tr><tr class="odd"><td>set</td><td>集合</td><td>{1, 2, 3}</td></tr><tr class="even"><td>dict</td><td>字典</td><td>{1: "python", "acwing": 2, 3: 4.0}</td></tr></tbody></table><p>注意：<code>int</code><font color='red'><strong>支持高精度，没有大小限制</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="number">20</span></span><br><span class="line">height = <span class="number">12.3</span></span><br><span class="line">name = <span class="string">&quot;yxc&quot;</span></span><br><span class="line">my_name = name</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">3.0</span>  <span class="comment"># 同时给多个变量赋值</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><table><colgroup><col style="width: 8%" /><col style="width: 53%" /><col style="width: 38%" /></colgroup><thead><tr class="header"><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr class="odd"><td><code>+</code></td><td>把两个数相加，或者拼接两个字符串</td><td><code>A + B</code> 将得到 30</td></tr><tr class="even"><td><code>-</code></td><td>从第一个数中减去第二个数</td><td><code>A - B</code> 将得到 -10</td></tr><tr class="odd"><td><code>*</code></td><td>把两个数相乘</td><td><code>A * B</code> 将得到 200</td></tr><tr class="even"><td><code>/</code></td><td>分子除以分母，结果为 float 类型</td><td><code>B / A</code> 将得到 2.0</td></tr><tr class="odd"><td><code>//</code></td><td>整除，结果为 int 类型</td><td><code>B // A</code> 将得到 2</td></tr><tr class="even"><td><code>%</code></td><td>取模运算符，向零整除后的余数，可能为负数</td><td><code>B % A</code> 将得到 0</td></tr><tr class="odd"><td><code>**</code></td><td>乘方</td><td><code>A ** B</code> 将得到 1e20</td></tr><tr class="even"><td><code>+=</code></td><td>第一个数加上第二个数</td><td><code>A = A + B</code> 简写为 <code>A += B</code></td></tr><tr class="odd"><td><code>-=</code></td><td>第一个数减去第二个数</td><td><code>A = A - B</code> 简写为 <code>A -= B</code></td></tr><tr class="even"><td><code>*=</code></td><td>第一个数乘以第二个数</td><td><code>A = A * B</code> 简写为 <code>A *= B</code></td></tr><tr class="odd"><td><code>/=</code></td><td>第一个数除以第二个数</td><td><code>A = A / B</code> 简写为 <code>A /= B</code></td></tr><tr class="even"><td><code>//=</code></td><td>第一个数整除第二个数</td><td><code>A = A // B</code> 简写为 <code>A //= B</code></td></tr><tr class="odd"><td><code>%=</code></td><td>第一个数对第二个数取余</td><td><code>A = A % B</code> 简写为 <code>A %= B</code></td></tr><tr class="even"><td><code>**=</code></td><td>第一个数变成两个数的乘方</td><td><code>A = A ** B</code> 简写为 <code>A **= B</code></td></tr></tbody></table><p>注意：对 <span class="math inline">\(0\)</span>进行<strong>除法</strong>或<strong>取模</strong>会报错</p><h3 id="表达式">表达式</h3><p>小学学的四则运算都是支持的。</p><p>当整数与浮点数共同运算时，整数会被自动转化成浮点数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span> + <span class="number">3</span></span><br><span class="line">y = (x + <span class="number">1.0</span>) * <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br></pre></td></tr></table></figure><p>也可以运用<code>int()、float()、str()</code>等函数强制转换类型。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;123.0&quot;</span></span><br><span class="line">a = <span class="built_in">float</span>(s)</span><br><span class="line">b = <span class="built_in">int</span>(a)</span><br><span class="line">s2 = <span class="string">&quot;The value is &quot;</span> + <span class="built_in">str</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s, a, b, s2)</span><br></pre></td></tr></table></figure><h3 id="输入">输入</h3><p>使用<code>input()</code>函数，可以输入一行内容，返回的类型为<code>str</code>。一般配合<code>split()</code>、<code>map()</code>、<code>int()</code>、<code>float()</code>等函数使用。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())  <span class="comment"># 读入两个整数</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 计算两个数的和</span></span><br></pre></td></tr></table></figure><h3 id="输出">输出</h3><p>使用<code>print()</code>函数可以输出多个变量，默认用空格隔开，且行末会默认添加回车。如果想自定义行末字符，可以添加<code>end</code>参数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, end=<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>部分题目会要求保留若干位小数，此时可以使用<code>round()</code>函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">1</span>)))  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(x, <span class="number">3</span>)))  <span class="comment"># 保留3位小数</span></span><br></pre></td></tr></table></figure><p>另外可以使用格式化字符串，在后面的章节会详细讲解，本章中大家会使用下面用法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">12.34567</span></span><br><span class="line">y = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.1f&quot;</span> % x)  <span class="comment"># 保留1位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %.3f&quot;</span> % (x * y))  <span class="comment"># 保留3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %f, y = %d&quot;</span> % (x, y))  <span class="comment"># 输出整数</span></span><br></pre></td></tr></table></figure><h3 id="其它函数">其它函数</h3><p>本章中部分题目会要求开根号，可以使用如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  <span class="comment"># 引入开根号函数</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = sqrt(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><hr /><h2 id="作业题易错点">作业题易错点</h2><ol type="1"><li>变量名可以是任意单词（除了class、def等少数几个关键词以外），由大小写英文字母、下划线和数字构成，首字母不能写数字。</li><li>注意切换输入法，所有字母、操作符、空格都要用英文字符。</li><li>用<code>print()</code>格式化输出时，例如：<code>print("x = %f, y = %d" % (x, y))</code>，当要填充的变量个数大于1，或者变量为表达式时，一定要加括号，另外变量要用逗号隔开。</li><li><code>float</code>类型的数值(浮点数)有精度问题，存储的是近似值。例如<code>print(0.1 + 0.2)</code>会得到<code>0.30000000000000004</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建与顺序语句&quot;&gt;【1.环境搭建与顺序语句】&lt;/h1&gt;
&lt;h2 id=&quot;语法基础&quot;&gt;语法基础&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;https://docs.python.org/zh-cn/3/tutorial/index.html&quot;&gt;Python语法官方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/range%E5%87%BD%E6%95%B0/"/>
    <id>https://cuiluyi.gitee.io/2024/09/15/[object%20Object]/python/range%E5%87%BD%E6%95%B0/</id>
    <published>2024-09-15T02:21:47.198Z</published>
    <updated>2024-09-15T02:51:35.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="range函数">range函数</h1><h2 id="原型">原型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop[, step])      <span class="comment"># []代表不是必须</span></span><br></pre></td></tr></table></figure><p><strong>输入参数：</strong></p><ul><li><code>start</code> 默认为 <spanclass="math inline">\(0\)</span>，表示起始值</li><li><code>stop</code> 表示终止范围，<strong>必须指定</strong></li><li><code>step</code> 默认为 <spanclass="math inline">\(1\)</span>，表示步长</li></ul><blockquote><p>其中，<code>start</code>表示这一些列数字中的第一个数字；<code>stop - 1</code>表示这一系列数字中的最后一个数字，产生的数字中<strong>不包括</strong><code>stop</code></p></blockquote><h2 id="应用">应用</h2><p><code>range()</code>函数产生的这一系列的数字并<font color='red'><strong>不是</strong></font>以<strong>列表（list）</strong>类型存在的，这样做的目的是为了节省代码所占空间</p><h3id="将range产生的数字转换为列表">将<code>range()</code>产生的数字转换为列表</h3><p>使用如下方法可以将range()产生的数字转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出：[0,1，2，3，4]</span></span><br></pre></td></tr></table></figure><p>从图 <span class="math inline">\(1\)</span>中可以看出，<code>range(0,5)</code> 产生的数字中不包含 <spanclass="math inline">\(5\)</span></p><h3id="在for语句中使用range产生的数字">在<code>for</code>语句中使用<code>range()</code>产生的数字</h3><p><code>for</code> 语句的主要作用是遍历容器中的元素，也可以在<code>for</code> 语句中使用 <code>range()</code> 产生的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, stop, step):</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt; stop; i += step)</span><br></pre></td></tr></table></figure><h3 id="对range产生的数字求和">对range()产生的数字求和</h3><p><code>range()</code> 产生的数字具有可叠加性（<ahref="https://so.csdn.net/so/search?q=iterable&amp;spm=1001.2101.3001.7020">iterable</a>），可以通过sum()函数对其进行求和处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出：10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;range函数&quot;&gt;range函数&lt;/h1&gt;
&lt;h2 id=&quot;原型&quot;&gt;原型&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/09/02/[object%20Object]/others/%E3%80%90Special%20Judge%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/09/02/[object%20Object]/others/%E3%80%90Special%20Judge%E3%80%91/</id>
    <published>2024-09-02T01:08:18.541Z</published>
    <updated>2024-09-02T01:08:18.541Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/08/29/[object%20Object]/others/%E3%80%90%E5%AF%B9%E6%8B%8D%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/08/29/[object%20Object]/others/%E3%80%90%E5%AF%B9%E6%8B%8D%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E3%80%91/</id>
    <published>2024-08-28T17:07:49.006Z</published>
    <updated>2024-08-28T17:07:50.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对拍代码示例">对拍代码示例</h1><p>题目：<a href="https://www.acwing.com/problem/content/2/">AcWing 2.01背包问题</a></p><h2 id="dp写法">DP写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v; j -- )</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v] + w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="暴力写法">暴力写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v[i], &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sumv = <span class="number">0</span>, sumw = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sumv += v[j];</span><br><span class="line">                sumw += w[j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (sumv &lt;= m) res = <span class="built_in">max</span>(res, sumw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据生成器代码">数据生成器代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generate_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>, m = <span class="built_in">rand</span>() % <span class="number">100</span> + <span class="number">50</span>;</span><br><span class="line">    fout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">rand</span>() % <span class="number">50</span> + <span class="number">10</span>, w = <span class="built_in">rand</span>() % <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line">        fout &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; w &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;iteration: %d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">generate_data</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;Dp.exe &lt; input.txt &gt; dp_output.txt&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;bruteforce.exe &lt; input.txt &gt; bf_output.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;fc dp_output.txt bf_output.txt&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;错啦!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对拍代码示例&quot;&gt;对拍代码示例&lt;/h1&gt;
&lt;p&gt;题目：&lt;a href=&quot;https://www.acwing.com/problem/content/2/&quot;&gt;AcWing 2.
01背包问题&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;dp写法&quot;&gt;DP写法&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/08/27/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90thu%E5%B7%A5%E7%A8%8B%E7%A1%95%E5%8D%9A%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/08/27/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90thu%E5%B7%A5%E7%A8%8B%E7%A1%95%E5%8D%9A%E3%80%91/</id>
    <published>2024-08-27T07:20:50.564Z</published>
    <updated>2024-08-27T08:09:25.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清华工程硕博">清华工程硕博</h1><h2 id="电子工程系">电子工程系</h2><h3 id="硕士">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271521107.png"alt="image-20240827152058967" /><figcaption aria-hidden="true">image-20240827152058967</figcaption></figure><h3 id="博士">博士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271522969.png"alt="image-20240827152205862" /><figcaption aria-hidden="true">image-20240827152205862</figcaption></figure><h2 id="计算机科学与技术系">计算机科学与技术系</h2><h3 id="硕士-1">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271523518.png"alt="image-20240827152341415" /><figcaption aria-hidden="true">image-20240827152341415</figcaption></figure><h3 id="博士-1">博士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271524589.png"alt="image-20240827152417491" /><figcaption aria-hidden="true">image-20240827152417491</figcaption></figure><h2 id="自动化系">自动化系</h2><h3 id="硕士-2">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271526480.png"alt="image-20240827152606392" /><figcaption aria-hidden="true">image-20240827152606392</figcaption></figure><h3 id="博士-2">博士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271525046.png"alt="image-20240827152503946" /><figcaption aria-hidden="true">image-20240827152503946</figcaption></figure><h2 id="软件学院">软件学院</h2><h3 id="硕士-3">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271527245.png"alt="image-20240827152755147" /><figcaption aria-hidden="true">image-20240827152755147</figcaption></figure><h3 id="博士-3">博士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271528443.png"alt="image-20240827152836349" /><figcaption aria-hidden="true">image-20240827152836349</figcaption></figure><h2 id="网络空间安全学院">网络空间安全学院</h2><h3 id="直博">直博</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271529796.png"alt="image-20240827152917720" /><figcaption aria-hidden="true">image-20240827152917720</figcaption></figure><h3 id="硕士-4">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271529294.png"alt="image-20240827152951220" /><figcaption aria-hidden="true">image-20240827152951220</figcaption></figure><h2 id="深研院">深研院</h2><h3 id="博士-4">博士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271608367.png"alt="image-20240827160815315" /><figcaption aria-hidden="true">image-20240827160815315</figcaption></figure><h3 id="硕士-5">硕士</h3><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408271609817.png"alt="image-20240827160923740" /><figcaption aria-hidden="true">image-20240827160923740</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;清华工程硕博&quot;&gt;清华工程硕博&lt;/h1&gt;
&lt;h2 id=&quot;电子工程系&quot;&gt;电子工程系&lt;/h2&gt;
&lt;h3 id=&quot;硕士&quot;&gt;硕士&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【二叉树】</title>
    <link href="https://cuiluyi.gitee.io/2024/08/23/[object%20Object]/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/08/23/[object%20Object]/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91/</id>
    <published>2024-08-22T17:02:27.000Z</published>
    <updated>2024-08-24T17:41:51.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树">二叉树</h1><h2 id="存储">存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r;<span class="comment">// l[i] 和 r[i] 分别存储节点 i 的左、右孩子编号</span></span><br></pre></td></tr></table></figure><blockquote><p>不定义为 <code>int l[N], r[N]</code>的原因是：二叉树的结点个数最大为N，但是结点权值可以大于N，此时就会导致段错误，而定义成哈希表就避免了很多麻烦</p></blockquote><h2 id="非递归遍历">非递归遍历</h2><h3 id="结论">结论</h3><p>【<strong>结论</strong>】用<strong>栈</strong>模拟实现<strong>中序遍历</strong>，<font color='red'><strong>Push</strong></font>操作的数据过程是<font color='blue'><strong>先序</strong></font>遍历，<font color='red'><strong>Pop</strong></font>操作的数据过程是<font color='blue'><strong>中序</strong></font>遍历</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408232259283.png"alt="树的遍历.png" /><figcaption aria-hidden="true">树的遍历.png</figcaption></figure><p>​如图所示，⊗是先序遍历，☆是中序遍历，△是后序遍历。我们发现：树的<strong>前序、中序、后序</strong>实际上都是将整棵树以<strong>上图所示的路线</strong>跑了<span class="math inline">\(1\)</span> 遍，每个结点都碰到了 <spanclass="math inline">\(3\)</span>次，三者唯一不同之处在于<strong>访问节点的时机不同</strong></p><ul><li><strong>先序</strong>遍历在第 <span class="math inline">\(1\)</span>次碰到结点时访问</li><li><strong>中序</strong>遍历在第 <span class="math inline">\(2\)</span>次碰到结点时访问</li><li><strong>后序</strong>遍历在第 <span class="math inline">\(3\)</span>次碰到结点时访问</li></ul><h3 id="例题">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8792912/">AcWing1576. 再次树遍历 - AcWing</a></li></ul><h2 id="层序遍历">层序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> root)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">if</span>(l.count(t))<span class="comment">// 存在左孩子</span></span><br><span class="line">            q[++ tt] = l[t];</span><br><span class="line">        <span class="keyword">if</span>(r.count(t))<span class="comment">// 存在右孩子</span></span><br><span class="line">            q[++ tt] = r[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bfs(root);</span><br><span class="line"><span class="comment">// 输出层序序列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br></pre></td></tr></table></figure><h2 id="后序中序建树">后序中序建树</h2><h3 id="模板">模板</h3><ul><li><strong>时间复杂度</strong>：<spanclass="math inline">\(O(n)\)</span></li></ul><blockquote><p>注意：前提是二叉树中<strong>节点编号或权值互不相同</strong>，我们才能用<strong>哈希表</strong>记录中序序列各节点对应的下标，从而将时间复杂度优化为<spanclass="math inline">\(O(n)\)</span>。如果<strong>二叉树节点编号或权值可能重复</strong>，则只能遍历搜索位置，此时时间复杂度为<span class="math inline">\(O(n^2)\)</span></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> in[N], post[N];<span class="comment">// n 个节点的中序序列、后序序列</span></span><br><span class="line"><span class="type">int</span> pre[N], cnt;<span class="comment">// 建图的同时记录 n 个节点的前序序列</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r, pos;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> il, <span class="type">int</span> ir, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> root = post[pr];</span><br><span class="line">    <span class="type">int</span> k = pos[root];<span class="comment">// 优化时间复杂度 O(1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 记录前序序列 */</span></span><br><span class="line">    <span class="comment">// pre[cnt ++] = root;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(il &lt; k)</span><br><span class="line">        l[root] = build(il, k - <span class="number">1</span>, pl, pl + (k - <span class="number">1</span> - il));</span><br><span class="line">    <span class="keyword">if</span>(k &lt; ir)</span><br><span class="line">        r[root] = build(k + <span class="number">1</span>, ir, pl + (k - <span class="number">1</span> - il) + <span class="number">1</span>, pr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;post[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line">        pos[in[i]] = i;        <span class="comment">// 哈希表记录每个数在中序遍历的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// root 为二叉树的根节点</span></span><br><span class="line">    <span class="type">int</span> root = build(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-1">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790598/">AcWing1497. 树的遍历 - AcWing</a></li><li><ahref="https://www.acwing.com/activity/content/code/content/8790623/">AcWing1620. Z 字形遍历二叉树 - AcWing</a></li></ul><h2 id="中序建树">中序建树</h2><h3 id="模板-1">模板</h3><ul><li><strong>时间复杂度</strong>：<spanclass="math inline">\(O(n)\)</span></li></ul><blockquote><p>注意：前提是二叉树中每个节点的权值互不相同，我们才能用哈希表记录中序序列各节点对应的下标</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> in[N], pre[N];<span class="comment">// n 个节点的中序序列、前序序列</span></span><br><span class="line"><span class="type">int</span> post[N], cnt;<span class="comment">// 建图的同时记录 n 个节点的后序序列</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r, pos;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> il, <span class="type">int</span> ir, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> root = pre[pl];</span><br><span class="line">    <span class="type">int</span> k = pos[root];<span class="comment">// 优化时间复杂度 O(1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(il &lt; k)</span><br><span class="line">        l[root] = build(il, k - <span class="number">1</span>, pl + <span class="number">1</span>, pl + <span class="number">1</span> + k - <span class="number">1</span> - il);</span><br><span class="line">    <span class="keyword">if</span>(k &lt; ir)</span><br><span class="line">        r[root] = build(k + <span class="number">1</span>, ir, pl + <span class="number">1</span> + k - <span class="number">1</span> - il + <span class="number">1</span>, pr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录后序序列 */</span></span><br><span class="line">    <span class="comment">// post[cnt ++] = root;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line">        pos[in[i]] = i;        <span class="comment">// 哈希表记录每个数在中序遍历的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// root 为二叉树的根节点</span></span><br><span class="line">    <span class="type">int</span> root = build(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-2">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790607/">AcWing1631. 后序遍历 - AcWing</a></li><li><a href="https://www.acwing.com/solution/content/251933/">AcWing2019清华软院T2. 二叉树算权 - AcWing</a></li></ul><h2 id="前序和后序">前序和后序</h2><p>已知二叉树的前序序列和后序序列，<strong>无法唯一确定</strong>这个二叉树，但是我们可以确定每个子树的形状和个数，仅仅是子树的位置不能确定</p><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8793054/">AcWing1609. 前序和后序遍历 - AcWing</a></li><li><a href="https://www.acwing.com/solution/content/251849/">AcWing3486. 前序和后序 - AcWing</a></li></ul><h1 id="完全二叉树">完全二叉树</h1><h2 id="存储-1">存储</h2><p>完全二叉树采用<strong>数组</strong>存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br></pre></td></tr></table></figure><h2 id="性质">性质</h2><p>完全二叉树的性质如下：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408230026116.jpeg"alt="7476a7cbe9d1fbd33df03cf13ab37b4" /><figcaptionaria-hidden="true">7476a7cbe9d1fbd33df03cf13ab37b4</figcaption></figure><ol type="1"><li><strong><font color='red'>从1号单元开始存储树节点</font></strong>（0号单元存节点的个数）</li><li>节点 <span class="math inline">\(i\)</span> 左子树是 <spanclass="math inline">\(2i\)</span>，右子树是 <spanclass="math inline">\(2i+1\)</span>，根节点是 <spanclass="math inline">\(\lfloor i/2 \rfloor\)</span>，左兄弟是 <spanclass="math inline">\(i-1\)</span>，右兄弟 <spanclass="math inline">\(i+1\)</span></li><li>第 <span class="math inline">\(d\)</span> 层最多有 <spanclass="math inline">\(2^{d-1}\)</span>，<strong>起始节点</strong>编号为<span class="math inline">\(2^{d-1}\)</span>（<spanclass="math inline">\(d\)</span> 从 <spanclass="math inline">\(1\)</span> 开始）</li><li>如果完全二叉树一共有 <span class="math inline">\(n\)</span>个节点，则<strong>非</strong>叶子节点为 <spanclass="math inline">\(T[0…n/2]\)</span>，叶节点为 <spanclass="math inline">\(T[n/2+1,…,n]\)</span></li></ol><h2 id="例题-3">例题</h2><ul><li><a href="https://www.acwing.com/solution/content/251776/">AcWing1240. 完全二叉树的权值 - AcWing</a></li></ul><h1 id="二叉搜索树bst">二叉搜索树(BST)</h1><p>==<strong><font color='blue'>二叉搜索树</font></strong> ==<strong><font color='blue'>二叉查找树</font></strong> （Binary SearchTree） == <strong><font color='blue'>二叉排序树</font></strong> （BinarySort Tree）==</p><ul><li>若它的左子树不空，则<strong>左子树</strong>上<strong>所有</strong>结点的值均<font color='red'><strong>小于</strong></font>根结点的值;</li><li>若它的右子树不空，则<strong>右子树</strong>上<strong>所有</strong>结点的值均<font color='red'><strong>大于等于</strong></font>根结点的值;</li><li>它的左、右子树也都分别是<strong>二又搜索树</strong></li></ul><blockquote><p>注意：上述定义在不同题目中，等号的位置可能不一样（即也有可能左子树均小于等于根节点，右子树均大于根节点）</p></blockquote><h2 id="性质-1">性质</h2><ul><li><strong>二叉排序树</strong>的<strong><font color='red'>中序遍历</font></strong>是<strong><font color='gree'>递增</font></strong>序列</li></ul><blockquote><p>在构造二叉排序树时，若关键字序列有序，则二叉排序树的高度最大</p></blockquote><h2 id="例题-4">例题</h2><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790764/">AcWing1527. 判断二叉搜索树 - AcWing</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉树&quot;&gt;二叉树&lt;/h1&gt;
&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/</summary>
      
    
    
    
    
    <category term="算法" scheme="https://cuiluyi.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/08/20/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90%E4%BF%9D%E7%A0%94%E5%A4%A9%E6%A2%AF%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/08/20/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90%E4%BF%9D%E7%A0%94%E5%A4%A9%E6%A2%AF%E3%80%91/</id>
    <published>2024-08-20T05:40:51.045Z</published>
    <updated>2024-08-20T05:49:06.519Z</updated>
    
    <content type="html"><![CDATA[<figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201349184.jpg"alt="e42053ba94f0d26e9bbe1276d3f7006" /><figcaptionaria-hidden="true">e42053ba94f0d26e9bbe1276d3f7006</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201341313.jpg"alt="7c64a3f6bf1aee01a1863e690a0484a" /><figcaptionaria-hidden="true">7c64a3f6bf1aee01a1863e690a0484a</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201341136.jpg"alt="c002fed944e0a70de4320ea7378f8ee" /><figcaptionaria-hidden="true">c002fed944e0a70de4320ea7378f8ee</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201341866.jpg"alt="fd8579f11f080d0838b4d187b8860ce" /><figcaptionaria-hidden="true">fd8579f11f080d0838b4d187b8860ce</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201341112.jpg"alt="f577c6cd8448b671c53ce926ed2d4c4" /><figcaptionaria-hidden="true">f577c6cd8448b671c53ce926ed2d4c4</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201341166.jpg"alt="8f283c6de1063b64e012aea5b9ee2e4" /><figcaptionaria-hidden="true">8f283c6de1063b64e012aea5b9ee2e4</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure&gt;
&lt;img
src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201349184.jpg&quot;
alt=&quot;e42053ba94f0d26e9bbe1276d3f7006&quot; /&gt;
&lt;figca</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cuiluyi.gitee.io/2024/08/20/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90%E6%8A%A5%E8%80%83%E6%95%B0%E9%87%8F%E3%80%91/"/>
    <id>https://cuiluyi.gitee.io/2024/08/20/[object%20Object]/%E4%BF%9D%E7%A0%94/%E3%80%90%E6%8A%A5%E8%80%83%E6%95%B0%E9%87%8F%E3%80%91/</id>
    <published>2024-08-20T05:39:34.940Z</published>
    <updated>2024-08-20T05:40:00.782Z</updated>
    
    <content type="html"><![CDATA[<figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201339912.jpeg"alt="1b30d588c93c5675b29a09a480e43365" /><figcaptionaria-hidden="true">1b30d588c93c5675b29a09a480e43365</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure&gt;
&lt;img
src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408201339912.jpeg&quot;
alt=&quot;1b30d588c93c5675b29a09a480e43365&quot; /&gt;
&lt;fig</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Adam详解</title>
    <link href="https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/8.Adam%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/8.Adam%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-08-13T02:02:27.000Z</published>
    <updated>2024-08-20T05:28:44.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adam算法详解">Adam算法详解</h1><p>Adam算法在RMSProp算法基础上对<ahref="https://so.csdn.net/so/search?q=%E5%B0%8F%E6%89%B9%E9%87%8F&amp;spm=1001.2101.3001.7020">小批量</a>随机梯度也做了指数加权移动平均[1]。下面我们来介绍这个算法。</p><blockquote><p>所以Adam算法可以看做是RMSProp算法与动量法的结合。adam算法是一种基于“momentum”思想的随机梯度下降优化方法，通过迭代更新之前每次计算梯度的一阶moment和二阶moment，并计算滑动平均值，后用来更新当前的参数。这种思想结合了Adagrad算法的处理稀疏型数据，又结合了RMSProp算法的可以处理非稳态的数据。</p></blockquote><p>小tips：跟我一样基础不太好的看起来比较难以理解，建议搭配视频食用，可参考这个<ahref="https://www.bilibili.com/video/BV1HP4y1g7xN/?spm_id_from=pageDriver&amp;vd_source=12c80a98ec9426002a2f54318421082c">优化算法系列合集</a>，个人觉得比较容易听懂</p><h2 id="算法">算法</h2><p>Adam算法使用了动量变量 <spanclass="math inline">\(\boldsymbol{v}_t\)</span>​和RMSProp算法中小批量随机梯度按元素平方的指数加权移动平均变量 <spanclass="math inline">\(\boldsymbol{s}_t\)</span> ​，并在时间步 <spanclass="math inline">\(0\)</span> 将它们中每个元素初始化为 <spanclass="math inline">\(0\)</span>。给定超参数 <spanclass="math inline">\(0 \leq \beta_1 &lt; 1\)</span> （算法作者建议设为<span class="math inline">\(0.9\)</span>），时间步 <spanclass="math inline">\(t\)</span> 的动量变量 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> ​即小批量随机梯度 <spanclass="math inline">\(\boldsymbol{g}_t\)</span> ​的指数加权移动平均：</p><p><span class="math display">\[\boldsymbol{v}_t \leftarrow \beta_1 \boldsymbol{v}_{t-1} + (1 - \beta_1)\boldsymbol{g}_t\]</span> 和RMSProp算法中一样，给定超参数 <span class="math inline">\(0\leq \beta_2 &lt; 1\)</span> （算法作者建议设为0.999）</p><p>将小批量随机梯度按元素平方后的项 <spanclass="math inline">\(\boldsymbol{g}_t \odot \boldsymbol{g}_t\)</span>​做指数加权移动平均得到 <spanclass="math inline">\(\boldsymbol{s}_t\)</span>​： <spanclass="math display">\[\boldsymbol{s}_t \leftarrow \beta_2 \boldsymbol{s}_{t-1} + (1 - \beta_2)\boldsymbol{g}_t \odot \boldsymbol{g}_t\]</span> 由于我们将 <spanclass="math inline">\(\boldsymbol{v}_0\)</span> 和 <spanclass="math inline">\(\boldsymbol{s}_0\)</span> 中的元素都初始化为 <spanclass="math inline">\(0\)</span></p><p>在时间步 <span class="math inline">\(t\)</span> 我们得到 <spanclass="math inline">\(\boldsymbol{v}_t = (1-\beta_1) \sum_{i=1}^t\beta_1^{t-i}\boldsymbol{g}_i\)</span>。将过去各时间步小批量随机梯度的权值相加，得到<span class="math inline">\((1-\beta_1) \sum_{i=1}^t \beta_1^{t-i} = 1 -\beta_1^t\)</span>。需要注意的是，当 <spanclass="math inline">\(t\)</span>较小时，过去各时间步小批量随机梯度权值之和会较小。例如，当 <spanclass="math inline">\(\beta_1 = 0.9\)</span> 时，<spanclass="math inline">\(\boldsymbol{v}_1 =0.1\boldsymbol{g}_1\)</span>。为了消除这样的影响，对于任意时间步 <spanclass="math inline">\(t\)</span> ，我们可以将 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> 再除以 <spanclass="math inline">\(1 -\beta_1^t\)</span>，从而使过去各时间步小批量随机梯度权值之和为1。这也叫作<strong>偏差修正</strong>。在Adam算法中，我们对变量<span class="math inline">\(\boldsymbol{v}_t\)</span> 和 <spanclass="math inline">\(\boldsymbol{s}_t\)</span> 均作偏差修正： <spanclass="math display">\[\hat{\boldsymbol{v}}_t \leftarrow \frac{\boldsymbol{v}_t}{1 - \beta_1^t}\]</span></p><p><span class="math display">\[\hat{\boldsymbol{s}}_t \leftarrow \frac{\boldsymbol{s}_t}{1 - \beta_2^t}\]</span></p><p>接下来，Adam算法使用以上偏差修正后的变量 $_t $ 和 <spanclass="math inline">\(\hat{\boldsymbol{s}}_t\)</span>，将模型参数中每个元素的学习率通过按元素运算重新调整：</p><p><span class="math display">\[\boldsymbol{g}_t&#39; \leftarrow \frac{\eta\hat{\boldsymbol{v}}_t}{\sqrt{\hat{\boldsymbol{s}}_t} + \epsilon}\]</span> 其中 <span class="math inline">\(\eta\)</span> 是学习率，<spanclass="math inline">\(\epsilon\)</span>是为了维持数值稳定性而添加的常数，如 <spanclass="math inline">\(10^{-8}\)</span>。和AdaGrad算法、RMSProp算法以及AdaDelta算法一样，目标函数自变量中每个元素都分别拥有自己的学习率。最后，使用<span class="math inline">\(\boldsymbol{g}_t&#39;\)</span>​迭代自变量：</p><p><span class="math display">\[\boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \boldsymbol{g}_t&#39;\]</span></p><h2 id="从零开始实现">从零开始实现</h2><p>我们按照Adam算法中的公式实现该算法。其中时间步 t tt通过<code>hyperparams</code>参数传入<code>adam</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> d2lzh_pytorch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">features, labels = d2l.get_data_ch7()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_adam_states</span>():</span><br><span class="line">    v_w, v_b = torch.zeros((features.shape[<span class="number">1</span>], <span class="number">1</span>), dtype=torch.float32), torch.zeros(<span class="number">1</span>, dtype=torch.float32)</span><br><span class="line">    s_w, s_b = torch.zeros((features.shape[<span class="number">1</span>], <span class="number">1</span>), dtype=torch.float32), torch.zeros(<span class="number">1</span>, dtype=torch.float32)</span><br><span class="line">    <span class="keyword">return</span> ((v_w, s_w), (v_b, s_b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adam</span>(<span class="params">params, states, hyperparams</span>):</span><br><span class="line">    beta1, beta2, eps = <span class="number">0.9</span>, <span class="number">0.999</span>, <span class="number">1e-6</span></span><br><span class="line">    <span class="keyword">for</span> p, (v, s) <span class="keyword">in</span> <span class="built_in">zip</span>(params, states):</span><br><span class="line">        v[:] = beta1 * v + (<span class="number">1</span> - beta1) * p.grad.data</span><br><span class="line">        s[:] = beta2 * s + (<span class="number">1</span> - beta2) * p.grad.data**<span class="number">2</span></span><br><span class="line">        v_bias_corr = v / (<span class="number">1</span> - beta1 ** hyperparams[<span class="string">&#x27;t&#x27;</span>])</span><br><span class="line">        s_bias_corr = s / (<span class="number">1</span> - beta2 ** hyperparams[<span class="string">&#x27;t&#x27;</span>])</span><br><span class="line">        p.data -= hyperparams[<span class="string">&#x27;lr&#x27;</span>] * v_bias_corr / (torch.sqrt(s_bias_corr) + eps)</span><br><span class="line">    hyperparams[<span class="string">&#x27;t&#x27;</span>] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用学习率为0.01的Adam算法来训练模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.train_ch7(adam, init_adam_states(), &#123;<span class="string">&#x27;lr&#x27;</span>: <span class="number">0.01</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">1</span>&#125;, features, labels)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss: 0.245370, 0.065155 sec per epoch</span><br></pre></td></tr></table></figure><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/3e40be6e8cf9cc23f28c74f46c87fb79.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="简洁实现">简洁实现</h2><p>通过名称为“Adam”的优化器实例，我们便可使用PyTorch提供的Adam算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.train_pytorch_ch7(torch.optim.Adam, &#123;<span class="string">&#x27;lr&#x27;</span>: <span class="number">0.01</span>&#125;, features, labels)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss: 0.242066, 0.056867 sec per epoch</span><br></pre></td></tr></table></figure><figure><imgsrc="https://i-blog.csdnimg.cn/blog_migrate/3d2011d1884097856969211021d1ccff.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="小结">小结</h2><ul><li>Adam算法在RMSProp算法的基础上对小批量随机梯度也做了指数加权移动平均。</li><li>Adam算法使用了偏差修正。</li></ul><h2 id="参考文献">参考文献</h2><p>[1] Kingma, D. P., &amp; Ba, J. (2014). Adam: A method for stochasticoptimization. arXiv preprint arXiv:1412.6980.</p><hr /><blockquote><p>注：除代码外本节与原书此节基本相同，<ahref="https://zh.d2l.ai/chapter_optimization/adam.html">原书传送门</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;adam算法详解&quot;&gt;Adam算法详解&lt;/h1&gt;
&lt;p&gt;Adam算法在RMSProp算法基础上对&lt;a
href=&quot;https://so.csdn.net/so/search?q=%E5%B0%8F%E6%89%B9%E9%87%8F&amp;amp;spm=1001.2</summary>
      
    
    
    
    
    <category term="优化算法" scheme="https://cuiluyi.gitee.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Adam</title>
    <link href="https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/7.Adam/"/>
    <id>https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/7.Adam/</id>
    <published>2024-08-13T01:02:27.000Z</published>
    <updated>2024-08-20T05:28:49.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adam-算法">Adam 算法</h1><p>​接下来，我们将介绍目前常用的梯度下降法中的王者——Adam算法。Adam（AdaptiveMomentEstimation）是目前深度学习中最常用的优化算法之一。Adam算法的核心思想是<strong>利用梯度一阶动量和二阶动量来动态自适应调整学习率</strong>，既保持了<strong>Momentum收敛速度快</strong>的优点，又结合了<strong>RMSProp自适应学习率</strong> 的优点</p><h2 id="基本思想">基本思想</h2><p>Adam算法通过计算梯度的<strong>一阶动量</strong>（即<strong>梯度的指数加权移动平均）</strong>和梯度的<strong>二阶动量</strong>（即<strong>梯度平方的指数加权移动平均</strong>）来<strong>动态调整</strong>每个参数的<strong>学习率</strong>。具体公式如下：</p><ol type="1"><li>梯度的一阶动量：</li></ol><p><span class="math display">\[m_t = \beta_1 m_{t-1} + (1 - \beta_1) g_t\]</span></p><ol start="2" type="1"><li>梯度的二阶动量：</li></ol><p><span class="math display">\[v_t = \beta_2 v_{t-1} + (1 - \beta_2) g_t^2\]</span></p><ol start="3" type="1"><li>偏差修正：</li></ol><p><span class="math display">\[\hat{m}_t = \frac{m_t}{1 - \beta_1^t}  \]</span></p><p><span class="math display">\[\hat{v}_t = \frac{v_t}{1 - \beta_2^t}\]</span></p><ol start="4" type="1"><li>更新参数：</li></ol><p><span class="math display">\[\theta_{t+1} = \theta_t - \frac{\alpha \hat{m}_t}{\sqrt{\hat{v}_t} +\epsilon}\]</span></p><p>其中：<br />- <span class="math inline">\(\beta_1\)</span> 和 <spanclass="math inline">\(\beta_2\)</span>分别是<strong>动量</strong>和<strong>均方根动量</strong>的衰减率，常用值为<span class="math inline">\(\beta_1 = 0.9\)</span> 和 <spanclass="math inline">\(\beta_2 = 0.999\)</span> - <spanclass="math inline">\(\epsilon\)</span>是一个很小的常数，用于防止分母为零，常用值为 <spanclass="math inline">\(10^{-8}\)</span></p><h2 id="优缺点">优缺点</h2><p><strong>优点</strong>：</p><ul><li><strong>自适应调整学习率</strong>：根据一阶动量和二阶动量动态调整每个参数的学习率，使得训练过程更加稳定。</li><li><strong>收敛速度快</strong>：结合动量法的<strong>加速特性</strong>和RMSProp的<strong>平稳特性</strong>，能够快速收敛到最优解。</li><li>能处理<strong>稀疏梯度</strong>，适用于大规模数据和参数。</li></ul><p><strong>缺点</strong>：</p><ul><li>对于某些特定问题，Adam 可能会出现不稳定的收敛行为。<br /></li><li>参数较多：Adam 算法需要调整的<strong>超参数较多</strong>（例如 <spanclass="math inline">\(\beta_1\)</span> , <spanclass="math inline">\(\beta_2\)</span> , <spanclass="math inline">\(\epsilon\)</span>），调参复杂度高。</li></ul><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义Adam优化器</span></span><br><span class="line">optimizer = torch.optim.Adam([w, b], lr=learning_rate)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with Adam&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="adam-与其他算法的比较">Adam 与其他算法的比较</h2><p>Adam算法集成了SGD、动量法、Adagrad、Adadelta等多种优化算法的优点，具有快速收敛和稳定的特点。以下是它与其他算法的对比：</p><ol type="1"><li>SGD：基本的随机梯度下降法，收敛速度较慢，易陷入局部最优。</li><li>动量法：在SGD基础上加入一阶动量，加速收敛，但仍然可能陷入局部最优。</li><li>Adagrad：自适应学习率，但对历史梯度的累积会导致学习率不断减小，后期训练缓慢。</li><li>RMSProp：改进了Adagrad，通过引入衰减系数解决学习率不断减小的问题。</li><li>Adam：结合动量法和RMSProp的优点，具有快速收敛和稳定的特点，是目前最常用的优化算法。</li></ol><h2 id="小结">小结</h2><p>Adam 算法作为一种自适应的梯度下降优化算法，结合了动量法和 RMSProp的优点，能够有效地加速模型的收敛，同时保持稳定性。它通过计算一阶和二阶动量来动态调整学习率，使得模型在训练过程中能够快速收敛，并适应不同的优化问题。尽管Adam需要调整的超参数较多，但其优越的性能使得它成为深度学习中最广泛使用的优化算法之一。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;adam-算法&quot;&gt;Adam 算法&lt;/h1&gt;
&lt;p&gt;​
接下来，我们将介绍目前常用的梯度下降法中的王者——Adam算法。Adam（Adaptive
Moment
Estimation）是目前深度学习中最常用的优化算法之一。Adam算法的核心思想是&lt;stron</summary>
      
    
    
    
    
    <category term="优化算法" scheme="https://cuiluyi.gitee.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AdaGrad</title>
    <link href="https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/5.AdaGrad/"/>
    <id>https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/5.AdaGrad/</id>
    <published>2024-08-13T00:02:27.000Z</published>
    <updated>2024-08-20T05:29:13.252Z</updated>
    
    <content type="html"><![CDATA[<p># AdaGrad算法</p><p>在前面我们讲解了<ahref="https://so.csdn.net/so/search?q=%E5%8A%A8%E9%87%8F%E6%B3%95&amp;spm=1001.2101.3001.7020">动量法</a>（Momentum），也就是动量随机梯度下降法。它使用了一阶动量。然而，我们同时也提到了二阶动量。使用二阶动量的梯度下降算法的改进版就是本节要讲的AdaGrad算法。二阶动量的出现，才意味着真正的<strong>自适应学习率</strong>优化算法时代的到来。</p><h2 id="adagrad算法的基本思想">AdaGrad算法的基本思想</h2><p>我们先回顾一下传统的<ahref="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1001.2101.3001.7020">随机梯度下降法</a>（SGD）及其各种变种。它们都是以<strong>同样的学习率</strong>来更新<strong>每一个参数</strong>的。但深度神经网络往往包含大量参数，这些参数并不总是<strong>均匀更新</strong>的。有些参数更新得频繁，有些则很少更新。</p><ul><li>对于<strong>经常更新</strong>的参数，我们已经积累了大量关于它的知识，希望它不被新的单个样本影响太大，也就是说希望对这些参数的<strong>学习率小一些</strong></li><li>对于<strong>偶尔更新</strong>的参数，我们了解的信息较少，希望从每一个样本中多学一些，即<strong>学习率大一些</strong></li></ul><p>要动态度量历史更新的频率，我们引入<strong>二阶动量</strong>。二阶动量通过将每一位各自的历史梯度的<strong>平方</strong>叠加起来来计算。具体公式如下：</p><p><span class="math display">\[v_t = v_{t-1} + g_t^2\]</span></p><p>其中，<span class="math inline">\(g_t\)</span> 是当前的梯度。</p><h2 id="算法流程">算法流程</h2><ol type="1"><li><strong>计算当前梯度 <span class="math inline">\(g_t\)</span></strong>：</li></ol><p><span class="math display">\[g_t = \nabla f(w_t)\]</span></p><ol start="2" type="1"><li><strong>更新二阶动量 <span class="math inline">\(v_t\)</span></strong>：</li></ol><p><span class="math display">\[v_t =  v_{t-1} + g_t^2\]</span></p><ol start="3" type="1"><li><strong>计算当前时刻的下降梯度</strong>：</li></ol><p><span class="math display">\[w_{t+1} = w_t - \frac{\alpha}{\sqrt{v_t} + \epsilon} g_t\]</span></p><p>其中，<span class="math inline">\(\alpha\)</span> 是学习率，<spanclass="math inline">\(\epsilon\)</span>是一个小的平滑项，防止分母为0。</p><h2 id="稀疏特征处理">稀疏特征处理</h2><p>AdaGrad算法主要针对<strong>稀疏特征</strong>进行了优化。<strong>稀疏特征</strong>在很多样本中只出现少数几次，在训练模型时，这些稀疏特征的更新很少，但每次更新可能带来较大影响。AdaGrad通过调整每个特征的学习率，针对这种情况进行了优化。</p><h3 id="优缺点">优缺点</h3><p><strong>优点</strong>：</p><ol type="1"><li><strong>有效处理稀疏特征</strong>：自动调整每个参数的学习率，使得稀疏特征的更新更少。<br /></li><li><strong>加速收敛</strong>：在自动调整学习率的同时，使得模型在训练过程中更快收敛。</li></ol><p><strong>缺点</strong>：<br />1.<strong>学习率逐渐减小</strong>：每次迭代中学习率都会减小，导致训练后期学习率变得非常小，从而使收敛速度变慢。<br />2.<strong>固定调整方式</strong>：对于不同参数，学习率调整方式是固定的，无法根据不同任务自动调整。</p><h2 id="代码实现">代码实现</h2><p>下面是一个简单的PyTorch实现AdaGrad算法的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成一些数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义AdaGrad优化器</span></span><br><span class="line">optimizer = torch.optim.Adagrad([w, b], lr=learning_rate)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408112049596.png"alt="image-20240811204910528" /><figcaption aria-hidden="true">image-20240811204910528</figcaption></figure><h2 id="总结">总结</h2><p>本节我们介绍了一种新的梯度下降算法变体——AdaGrad。与动量法相比，它最大的改进在于<strong>使用二阶动量来动态调整学习率</strong>，能够记住历史上的梯度信息，以动态调整学习率。其主要优点是能够处理稀疏特征问题，但也有学习率逐渐减小和调整方式固定的缺点。</p><p>到目前为止，我们一共讲了五种梯度下降算法。AdaGrad是2011年提出的，而动量法在1993年提出，SGD在1951年提出。通过时间轴的对比，我们可以看出人们在不断研究和改进梯度下降算法，从最早的梯度下降法到SGD，再到动量法、小批量梯度下降，最后到2011年的AdaGrad。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;# AdaGrad算法&lt;/p&gt;
&lt;p&gt;在前面我们讲解了&lt;a
href=&quot;https://so.csdn.net/so/search?q=%E5%8A%A8%E9%87%8F%E6%B3%95&amp;amp;spm=1001.2101.3001.7020&quot;&gt;动量法&lt;/a&gt;（Mo</summary>
      
    
    
    
    
    <category term="优化算法" scheme="https://cuiluyi.gitee.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RMSProp 和 Adadelta</title>
    <link href="https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/6.RMSProp%20%E5%92%8C%20Adadelta/"/>
    <id>https://cuiluyi.gitee.io/2024/08/13/[object%20Object]/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/6.RMSProp%20%E5%92%8C%20Adadelta/</id>
    <published>2024-08-12T23:02:27.000Z</published>
    <updated>2024-08-25T10:19:40.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rmsprop-和-adadelta-算法">RMSProp 和 Adadelta 算法</h1><p>​ 在<ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020">深度学习</a>中，RMSProp和 Adadelta 是两种常见的优化算法。它们都是在 AdaGrad的基础上做了改进，以适应深度学习中的大规模参数优化需求。</p><h2 id="rmsprop-算法">RMSProp 算法</h2><h3 id="基本思想">基本思想</h3><p>RMSProp 对 AdaGrad进行改进，通过引入<strong>衰减率</strong>来调整二阶动量的累积。这样可以<strong>避免</strong>AdaGrad 中<strong>学习率减小过快</strong>的问题。</p><p>AdaGrad 的二阶动量计算公式如下：</p><p><span class="math display">\[v_t = v_{t-1} + g_t^2\]</span> 而 RMSProp 采用了带有衰减率的计算方式：</p><p><span class="math display">\[v_t = \beta v_{t-1} + (1 - \beta) g_t^2\]</span> 其中，<span class="math inline">\(\beta\)</span>是衰减率系数。</p><h3 id="优缺点">优缺点</h3><p><strong>优点：</strong></p><ul><li><strong>自动调整学习率</strong>，避免学习率过大或过小的问题</li><li><strong>加速收敛速度</strong></li><li><strong>简单适用</strong>，适用于各种优化问题</li></ul><p><strong>缺点：</strong></p><ul><li>在处理稀疏特征时不够优秀</li><li>需要调整的超参数较多（衰减率 <spanclass="math inline">\(\beta\)</span> i和学习率 <spanclass="math inline">\(\alpha\)</span> ）</li><li>收敛速度可能不如某些更先进的<ahref="https://so.csdn.net/so/search?q=%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95&amp;spm=1001.2101.3001.7020">优化算法</a></li></ul><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义RMSProp优化器</span></span><br><span class="line">optimizer = torch.optim.RMSprop([w, b], lr=learning_rate, alpha=beta)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with RMSProp&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="adadelta-算法">Adadelta 算法</h2><h3 id="基本思想-1">基本思想</h3><p>Adadelta 是对 RMSProp的进一步改进，旨在<strong>自动调整学习率</strong>，避免手动调参。它通过计算梯度和权重更新量的累积值来调整学习率，使得训练过程更加稳定。</p><p>Adadelta 的公式如下：</p><ol type="1"><li>梯度的累积：</li></ol><p><span class="math display">\[E[g^2]_t = \rho E[g^2]_{t-1} + (1 - \rho) g_t^2\]</span></p><ol start="2" type="1"><li>权重更新量的累积：</li></ol><p><span class="math display">\[E[\Delta x^2]_t = \rho E[\Delta x^2]_{t-1} + (1 - \rho) (\Delta x_t)^2\]</span></p><ol start="3" type="1"><li>更新参数：</li></ol><p><span class="math display">\[\Delta x_t = -\frac{\sqrt{E[\Delta x^2]_{t-1} +\epsilon}}{\sqrt{E[g^2]_t + \epsilon}} g_t  \]</span></p><p><span class="math display">\[\theta_{t+1} = \theta_t + \Delta x_t\]</span></p><h3 id="优缺点-1">优缺点</h3><p><strong>优点：</strong><br />- <strong>自动调整学习率</strong>，避免学习率过大或过小的问题 -避免出现学习率饱和现象，使得训练更加稳定</p><p><strong>缺点：</strong></p><ul><li>可能收敛较慢</li><li>需要维护梯度和权重更新量的累积值，增加了空间复杂度</li></ul><h3 id="代码实现-1">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">1.0</span>  <span class="comment"># Adadelta 不需要传统的学习率</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">rho = <span class="number">0.9</span></span><br><span class="line">epsilon = <span class="number">1e-6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义Adadelta优化器</span></span><br><span class="line">optimizer = torch.optim.Adadelta([w, b], rho=rho, eps=epsilon)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with Adadelta&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rmsprop-和-adadelta-算法&quot;&gt;RMSProp 和 Adadelta 算法&lt;/h1&gt;
&lt;p&gt;​ 在&lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9</summary>
      
    
    
    
    
    <category term="优化算法" scheme="https://cuiluyi.gitee.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
