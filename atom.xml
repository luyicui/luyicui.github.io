<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天酬</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-15T15:48:41.459Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tianchou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>INT_MAX，INT_MIN</title>
    <link href="http://example.com/2023/10/15/INT_MAX%EF%BC%8CINT_MIN/"/>
    <id>http://example.com/2023/10/15/INT_MAX%EF%BC%8CINT_MIN/</id>
    <published>2023-10-15T15:50:27.000Z</published>
    <updated>2023-10-15T15:48:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="INT-MAX，INT-MIN"><a href="#INT-MAX，INT-MIN" class="headerlink" title="INT_MAX，INT_MIN"></a>INT_MAX，INT_MIN</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>C中<strong>常量</strong><code>INT_MAX</code>和<code>INT_MIN</code>分别表示int类型的最大值和最小值</p><blockquote><ol><li><code>INT_MAX</code> &#x3D; 2^31-1 &#x3D; 2147483647<code>INT_MIN</code> &#x3D; -2^31 &#x3D; -2147483648</li><li>所有超过该限值的int类型变量，都会出现溢出，出现warning，但是并不会出现error。</li><li>如果想表示的整数超过了该限值，可以使用长整型long long （占8字节64位）表示。</li></ol></blockquote><span id="more"></span><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>由于二进制编码按原码、补码和反码的规则进行运算，所有程序中对INT_MAX和INT_MIN的运算应当格外注意，在出现溢出的时候，不遵循数学规则。</p><ul><li><p><code>INT_MAX + 1 = INT_MIN</code></p></li><li><p><code>INT_MIN - 1 = INT_MAX</code></p></li><li><p><code>abs(INT_MIN) = INT_MIN</code></p></li></ul><p>比较有趣的是，<code>INT_MAX + 1 &lt; INT_MAX</code>， <code>INT_MIN - 1 &gt; INT_MIN</code>， <code>abs(INT_MIN) &lt; 0</code></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=MAX_INT;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a); </span><br><span class="line"><span class="type">int</span> b=INT_MIN;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121414941.png" alt="image-20221003094125792" style="zoom: 67%;" />]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;INT-MAX，INT-MIN&quot;&gt;&lt;a href=&quot;#INT-MAX，INT-MIN&quot; class=&quot;headerlink&quot; title=&quot;INT_MAX，INT_MIN&quot;&gt;&lt;/a&gt;INT_MAX，INT_MIN&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;C中&lt;strong&gt;常量&lt;/strong&gt;&lt;code&gt;INT_MAX&lt;/code&gt;和&lt;code&gt;INT_MIN&lt;/code&gt;分别表示int类型的最大值和最小值&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;INT_MAX&lt;/code&gt; &amp;#x3D; 2^31-1 &amp;#x3D; 2147483647				&lt;code&gt;INT_MIN&lt;/code&gt; &amp;#x3D; -2^31 &amp;#x3D; -2147483648&lt;/li&gt;
&lt;li&gt;所有超过该限值的int类型变量，都会出现溢出，出现warning，但是并不会出现error。&lt;/li&gt;
&lt;li&gt;如果想表示的整数超过了该限值，可以使用长整型long long （占8字节64位）表示。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="http://example.com/2023/10/15/%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2023/10/15/%E6%8C%87%E9%92%88/</id>
    <published>2023-10-15T15:48:27.000Z</published>
    <updated>2023-10-15T15:48:09.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一：</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// p是空指针，没有分配内存单元</span></span><br><span class="line"><span class="comment">//*p=4错误</span></span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二：</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)); <span class="comment">// p分配了内存单元，存有内存单元的地址</span></span><br><span class="line">*p = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>ERROR</title>
    <link href="http://example.com/2023/10/12/ERROR/"/>
    <id>http://example.com/2023/10/12/ERROR/</id>
    <published>2023-10-12T06:33:49.000Z</published>
    <updated>2023-10-12T06:33:38.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><h2 id="reference-to-left-right-is-ambiguous"><a href="#reference-to-left-right-is-ambiguous" class="headerlink" title="reference to &#39;left&#39;/&#39;right&#39; is ambiguous"></a><code>reference to &#39;left&#39;/&#39;right&#39; is ambiguous</code></h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p><strong>自定义的left 变量和right变量 与库中重名</strong></p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>​<strong>修改一下变量名left和right</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Error&quot;&gt;&lt;a href=&quot;#Error&quot; class=&quot;headerlink&quot; title=&quot;Error&quot;&gt;&lt;/a&gt;Error&lt;/h1&gt;&lt;h2 id=&quot;reference-to-left-right-is-ambiguous&quot;&gt;&lt;a href=&quot;#reference-to-left-right-is-ambiguous&quot; class=&quot;headerlink&quot; title=&quot;reference to &amp;#39;left&amp;#39;/&amp;#39;right&amp;#39; is ambiguous&quot;&gt;&lt;/a&gt;&lt;code&gt;reference to &amp;#39;left&amp;#39;/&amp;#39;right&amp;#39; is ambiguous&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;自定义的left 变量和right变量 与库中重名&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;修改一下变量名left和right&lt;/strong&gt;	&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>万能头文件</title>
    <link href="http://example.com/2023/10/12/%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2023/10/12/%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2023-10-12T06:31:49.000Z</published>
    <updated>2023-10-12T06:30:51.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="万能头文件"><a href="#万能头文件" class="headerlink" title="万能头文件"></a>万能头文件</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>万能头文件**<code>#include &lt;bits/stdc++.h&gt;</code>**&#x3D;&#x3D;<strong>包含了目前c++所包含的所有头文件！！！！</strong>&#x3D;&#x3D;</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看我们开挂以后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h2><ol><li>使用场景：当我们&#x3D;&#x3D;<strong>忘记</strong>&#x3D;&#x3D;<strong>某函数的头文件</strong>或者<strong>头文件较多</strong>时，可以用**<code>#include&lt;bits/stdc++.h&gt;</code>**代替。</li><li>缺点：<ul><li><strong>编译时间太长</strong>。</li><li>**<code>#include &lt;bits/stdc++.h&gt;</code>**不是c++的标准头文件，部分编译器不支持。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;万能头文件&quot;&gt;&lt;a href=&quot;#万能头文件&quot; class=&quot;headerlink&quot; title=&quot;万能头文件&quot;&gt;&lt;/a&gt;万能头文件&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介</summary>
      
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>宏定义</title>
    <link href="http://example.com/2023/10/12/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://example.com/2023/10/12/%E5%AE%8F%E5%AE%9A%E4%B9%89/</id>
    <published>2023-10-12T06:29:49.000Z</published>
    <updated>2023-10-12T06:29:29.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><h2 id="宏常量"><a href="#宏常量" class="headerlink" title="宏常量"></a><strong>宏常量</strong></h2><p>  我们最常使用到的#define的用法就是用#define来定义一个符号常量，而要修改时,只需修改#define这条语句就行了,不必每处代码都修改<br>例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR <span class="string">&quot;圆周率约等于&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %f&quot;</span>,STR,PI); <span class="comment">//预处理时会被替换为 printf(&quot;%s %f&quot;,&quot;圆周率约等于&quot;,3.14);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>运行结果:<br><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429733.png" alt="在这里插入图片描述"></p><h2 id="宏语句"><a href="#宏语句" class="headerlink" title="宏语句"></a><strong>宏语句</strong></h2><p>  我们还可以用宏定义一条或多条语句<br>例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Print printf(<span class="string">&quot;hello world!&quot;</span>)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Print;  <span class="comment">//预处理时会被替换为 printf(&quot;hello world!&quot;);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>操作结果:<br><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429680.png" alt="在这里插入图片描述"></p><h2 id="宏函数"><a href="#宏函数" class="headerlink" title="宏函数"></a><strong>宏函数</strong></h2><p>  我还可以用宏来定义函数,因为宏定义也可以带参数<br>例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Print(str) printf(<span class="string">&quot;%s&quot;</span>,str)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Print(<span class="string">&quot;这是一个只有一条语句的宏函数!&quot;</span>);</span><br><span class="line">    <span class="comment">//预处理时会被替换为 printf(&quot;%s&quot;,&quot;这是一个只有一条语句的宏函数!&quot;)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121429685.png" alt="在这里插入图片描述"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a><strong>其它</strong></h2><p><strong>1.#undef 是用来撤销宏定义的，用法如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.141592654</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line"><span class="comment">//下面开始 PI 就失效了</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p><strong>2.使用ifndef防止头文件被重复包含和编译</strong></p><p>  这是宏定义的一种，它可以根据是否已经定义了一个变量来进行分支选择，一般用于调试等等.实际上确切的说这应该是预处理功能中三种（宏定义，文件包含和条件编译）中的一种—-条件编译。 C语言在对程序进行编译时，会先根据预处理命令进行“预处理”。C语言编译系统包括预处理，编译和链接等部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> x <span class="comment">//先测试x是否被宏定义过</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x <span class="comment">//如果没有宏定义下面就宏定义x并编译下面的语句</span></span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//如果已经定义了则编译#endif后面的语句</span></span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>条件指示符#ifndef检查预编译常量在前面是否已经被宏定义。如果在前面没有被宏定义,则条件指示符的值为真，于是从#ifndef到#endif之间的所有语句都被包含进来进行编译处理。相反，如果#ifndef指示符的值为假，则它与#endif指示符之间的行将被忽略。条件指示符#ifndef 的最主要目的是防止头文件的重复包含和编译。<br>　　千万不要忽略了头件的中的#ifndef，这是一个很关键的东西。比如你有两个C文件，这两个C文件都include了同一个头文件。而编译时，这两个C文件要一同编译成一个可运行文件，于是问题来了，大量的声明冲突。</p><p>所以还是把头文件的内容都放在#ifndef和#endif中吧。不管你的头文件会不会被多个文件引用，你都要加上这个。一般格式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> <span class="string">&lt;标识&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="string">&lt;标识&gt;</span></span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>&lt;标识&gt;在理论上来说可以是自由命名的，但每个头文件的这个“标识”都应该是唯一的。标识的命名规则一般是头文件名全大写，前后加下划线，并把文件名中的“.”也变成下划线，如：stdio.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STDIO_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIO_H</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> xxx <span class="comment">//如果没有定义xxx</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xxx <span class="comment">//定义xxx</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//结束如果</span></span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>这个用法主要是在头文件中，主要是为了防止类重复的include，所以在类的头文件之前加上前面两个，用类名替代xxx，在最后加上最后一句</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;宏定义&quot;&gt;&lt;a href=&quot;#宏定义&quot; class=&quot;headerlink&quot; title=&quot;宏定义&quot;&gt;&lt;/a&gt;宏定义&lt;/h1&gt;&lt;h2 id=&quot;宏常量&quot;&gt;&lt;a href=&quot;#宏常量&quot; class=&quot;headerlink&quot; title=&quot;宏常量&quot;&gt;&lt;/a&gt;&lt;strong&gt;宏常量&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;  我们最常使用到的#define的用法就是用#define来定义一个符号常量，而要修改时,只需修改#define这条语句就行了,不必每处代码都修改&lt;br&gt;例:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;stdio.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; PI 3.14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STR &lt;span class=&quot;string&quot;&gt;&amp;quot;圆周率约等于&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s %f&amp;quot;&lt;/span&gt;,STR,PI); &lt;span class=&quot;comment&quot;&gt;//预处理时会被替换为 printf(&amp;quot;%s %f&amp;quot;,&amp;quot;圆周率约等于&amp;quot;,3.14);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12345678&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>转义字符</title>
    <link href="http://example.com/2023/10/12/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2023/10/12/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</id>
    <published>2023-10-12T06:27:49.000Z</published>
    <updated>2023-10-13T02:08:47.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><table><thead><tr><th align="center">转义字符</th><th align="center">字 符 值</th><th align="center">输 出 结 果</th></tr></thead><tbody><tr><td align="center"><code>\&#39;</code></td><td align="center">一个单撇号（’）</td><td align="center">输出单撇号字符’</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">一个双撇号（”）</td><td align="center">输出双撇号字符”</td></tr><tr><td align="center"><code>\?</code></td><td align="center">一个人问号（?）</td><td align="center">输出问号字符?</td></tr><tr><td align="center"><code>\\</code></td><td align="center">一个反斜杠（\）</td><td align="center">输出反斜杠字符\</td></tr><tr><td align="center"><code>\a</code></td><td align="center">警告（alert）</td><td align="center">产生声音或视觉信号</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格（backspace）</td><td align="center">将光标当前位置后退一个字符</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页（from feed）</td><td align="center">将光标当前位置移到下一页的开头</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td><td align="center">将光标当前位置移到下一行的开头</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车（carriagereturn）</td><td align="center">将光标当前位置移到本行的开头</td></tr><tr><td align="center"><code>\t</code></td><td align="center">水平制表符</td><td align="center">将光标当前位置移到下一个Tab位置</td></tr><tr><td align="center"><code>\v</code></td><td align="center">垂直制表符</td><td align="center">将光标当前位置移到下一个垂直表对齐点</td></tr><tr><td align="center"><code>\o</code>、<code>\oo</code>、<code>\ooo</code></td><td align="center">与该八进制码对应的ASCII字符，其中o表示一个八进制数字</td><td align="center">与该八进制码对应的字符</td></tr><tr><td align="center"><code>\xh[h...]</code></td><td align="center">与该十六进制码对应的ASCII字符，其中h代表一个十六进制数字</td><td align="center">与该十六进制码对应的字符</td></tr></tbody></table><p><strong>详解</strong></p><blockquote><p>  <a href="https://blog.csdn.net/qq_61552595/article/details/124109830?ops_request_misc=%7B%22request_id%22:%22169709154416800192287021%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=169709154416800192287021&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-124109830-null-null.142%5Ev96%5Epc_search_result_base3&utm_term=%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6&spm=1018.2226.3001.4187">详解转义字符_小蜗牛~向前冲的博客-CSDN博客</a></p></blockquote><h1 id="输出"><a href="#输出" class="headerlink" title="输出%"></a>输出<code>%</code></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%%&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;转义字符&quot;&gt;&lt;a href=&quot;#转义字符&quot; class=&quot;headerlink&quot; title=&quot;转义字符&quot;&gt;&lt;/a&gt;转义字符&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;转义字符&lt;/th&gt;
&lt;th align=&quot;cent</summary>
      
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>数组初始化</title>
    <link href="http://example.com/2023/10/12/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://example.com/2023/10/12/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2023-10-12T06:12:49.000Z</published>
    <updated>2023-10-12T06:13:28.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h1><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;全局数组：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n局部数组：\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121413439.png" alt="在这里插入图片描述"></p><p><strong>结论</strong></p><ul><li><strong>全局数组的初始值为0</strong></li><li><strong>局部数组的初始值为随机数</strong></li></ul><span id="more"></span><h2 id="1-使用memset函数"><a href="#1-使用memset函数" class="headerlink" title="1. 使用memset函数"></a>1. 使用memset<a href="">函数</a></h2><p><a href="%5B(66%E6%9D%A1%E6%B6%88%E6%81%AF">memset函数用法</a> memset的用法详解_薛定谔的猫ovo的博客-CSDN博客_memset](<a href="https://blog.csdn.net/weixin_44162361/article/details/115790452?spm=1001.2014.3001.5506">https://blog.csdn.net/weixin_44162361/article/details/115790452?spm=1001.2014.3001.5506</a>))</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p><strong><code>#include &lt;cstring&gt;</code></strong></p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p><code>void *memset(void *s, int c, int count)</code></p><ul><li>s：为指针或是数组</li><li>c：是赋给s的值</li><li>count：是s的长度</li><li>返回类型是一个指向存储区s的指针。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>memset是一个初始化函数，作用是<strong>将某一块内存空间全部设置为指定的值</strong>。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>memset可以方便的&#x3D;&#x3D;<strong>清空</strong>或初始化一个<strong>数组</strong>。&#x3D;&#x3D;</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li>将数组初始化为0</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br></pre></td></tr></table></figure><ol start="2"><li>将数组清空</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br></pre></td></tr></table></figure><h2 id="2-赋值"><a href="#2-赋值" class="headerlink" title="2. 赋值"></a>2. 赋值</h2><ol><li>直接给每个元素赋值<br> <code>int arr[5] = &#123;1,2,3,4,5&#125;;</code></li><li>给一部分赋值，后面的全部为0<br> <code>int arr[5] = &#123;1,2&#125;;</code></li><li>由赋值参数个数决定数组的个数<br> <code>int arr[] = &#123;1,2&#125;;</code></li><li>数组元素初始化为0<br> <code>int array[4] = &#123;0&#125;;</code></li></ol><blockquote><p>注意：声明、初始化与赋值的区别</p><ul><li>声明：<code>int a;</code></li><li>初始化：<code>int a = 2;</code>（在声明的时候顺带赋值叫做初始化）</li><li>赋值：<code>a = 2;</code></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数组的初始化&quot;&gt;&lt;a href=&quot;#数组的初始化&quot; class=&quot;headerlink&quot; title=&quot;数组的初始化&quot;&gt;&lt;/a&gt;数组的初始化&lt;/h1&gt;&lt;h2 id=&quot;引例&quot;&gt;&lt;a href=&quot;#引例&quot; class=&quot;headerlink&quot; title=&quot;引例&quot;&gt;&lt;/a&gt;引例&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;全局数组：&#92;n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;n局部数组：&#92;n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121413439.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局数组的初始值为0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部数组的初始值为随机数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【自定义函数】</title>
    <link href="http://example.com/2023/10/12/%E3%80%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E3%80%91/"/>
    <id>http://example.com/2023/10/12/%E3%80%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E3%80%91/</id>
    <published>2023-10-12T05:59:27.000Z</published>
    <updated>2023-10-14T01:27:22.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><h3 id="生成【m，n】（m"><a href="#生成【m，n】（m" class="headerlink" title="生成【m，n】（m&lt;n）的随机数"></a>生成【m，n】（m&lt;n）的随机数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span><span class="comment">//srand(time(0));</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">random</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rand</span>() % (n - m + <span class="number">1</span>) + m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放在主函数main()内部</span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="判断是否为闰年"><a href="#判断是否为闰年" class="headerlink" title="判断是否为闰年"></a>判断是否为闰年</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>闰年：二月29天，一年366天</li><li>非闰年：二月28天，一年365天</li></ul></blockquote><h3 id="求year的天数"><a href="#求year的天数" class="headerlink" title="求year的天数"></a>求year的天数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">days</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">365</span> + <span class="built_in">leap</span>(year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求year年month月的天数"><a href="#求year年month月的天数" class="headerlink" title="求year年month月的天数"></a>求year年month月的天数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    return year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">days</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">28</span> + <span class="built_in">leap</span>(year);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求关键字k的第p位"><a href="#求关键字k的第p位" class="headerlink" title="求关键字k的第p位"></a>求关键字k的第p位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Radix</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k/<span class="built_in">pow</span>(<span class="number">10</span>,p<span class="number">-1</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121356542.png" alt="image-20221209092201927"></p><h3 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)         <span class="comment">//注意是小于等于</span></span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因数个数"><a href="#因数个数" class="headerlink" title="因数个数"></a>因数个数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">divisor</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            cnt += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i * i == n)</span><br><span class="line">        cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数个数"><a href="#分解质因数个数" class="headerlink" title="分解质因数个数"></a>分解质因数个数</h3><p>求正整数$$N(N&gt;1)$$的质因数的个数。 相同的质因数需要重复计算。如$$120&#x3D;2<em>2</em>2<em>3</em>5$$，共有$$5$$个质因数。</p><blockquote><p>  我们求质因子的时候其实没有必要去先判断一个因子是否为质数，为什么呢？</p><ul><li><p>比如说一个因子为 11，是质数，那么无论前面怎么进行除法运算，一定有这个因子，所以质数因子不可能漏掉</p></li><li><p>而对于因子 4，它肯定可以转换成质因子之积：2×2，那么在前面已经被除过了，所以已经没有非质数因子了</p></li></ul><p>  所以我们只需要从 2 开始遍历，遍历到$$\sqrt{n}$$即可，为什么是$$\sqrt{n}$$呢？</p><ul><li>因为任何一个数n至多存在一个大于$$\sqrt{n}$$且$$!&#x3D;n$$的因子，所以如果存在，加1就好了。</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">prime_cnt</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在大于 sqrt(num) 的因子</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数gcd"><a href="#最大公约数gcd" class="headerlink" title="最大公约数gcd"></a>最大公约数gcd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : <span class="built_in">gcd</span>(b,a%b);<span class="comment">//递归+辗转相除法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小公倍数lcm"><a href="#最小公倍数lcm" class="headerlink" title="最小公倍数lcm"></a>最小公倍数lcm</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/<span class="built_in">gcd</span>(a,b)*b;<span class="comment">//有时候两数乘积会超过整数的范围,由此我们可以调整一下顺序:a/gcd(a,b)*b,   先除一下，这样就可以避免在一定程度上避免溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 最小公倍数&#x3D;两数乘积&#x2F;最大公约数，即</p><p> <strong>$$\left[ a,b \right] \cdot \left( a,b \right) &#x3D;a\cdot b$$</strong></p></blockquote><h3 id="四舍五入精确到小数点后i位"><a href="#四舍五入精确到小数点后i位" class="headerlink" title="四舍五入精确到小数点后i位"></a>四舍五入精确到小数点后i位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">rounding</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">//四舍五入保留i位小数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=<span class="number">0</span>)<span class="keyword">return</span>  (<span class="type">int</span>)(a*<span class="built_in">pow</span>(<span class="number">10</span>,i)+<span class="number">0.5</span>)/<span class="built_in">pow</span>(<span class="number">10</span>,i);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">return</span>  (<span class="type">int</span>)(a*<span class="built_in">pow</span>(<span class="number">10</span>,i)- <span class="number">0.5</span>)/<span class="built_in">pow</span>(<span class="number">10</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为“指定字符”"><a href="#判断是否为“指定字符”" class="headerlink" title="判断是否为“指定字符”"></a>判断是否为“指定字符”</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isVowel</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s=<span class="string">&quot;aeiouAEIOU&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">find</span>(ch)!=string::npos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为-闰年"><a href="#判断是否为-闰年" class="headerlink" title="判断是否为 闰年"></a>判断是否为 闰年</h3><blockquote><p>闰年：被 4 整除且不能被 100 整除 或者 可以被 400 整除</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)||n%<span class="number">400</span>==<span class="number">0</span>); <span class="comment">//Attention:最外面必须有一个（）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用sort自定义cmp函数"><a href="#使用sort自定义cmp函数" class="headerlink" title="使用sort自定义cmp函数"></a>使用sort自定义cmp函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score!=b.score)</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.number&lt;b.number;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">return</span> a.score!=b.score ? a.score&gt;b.score : a.number &lt; b.nember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> node a,<span class="keyword">struct</span> node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.height!=b.height ? a.height&gt;b.height : a.name &lt; b.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    string school;</span><br><span class="line">    <span class="type">int</span> tws, ns;<span class="comment">//加权总分total weighted score(tws)    考生人数number of students()</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.tws != b.tws)</span><br><span class="line">        <span class="keyword">return</span> a.tws &gt; b.tws;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.ns != b.ns)</span><br><span class="line">        <span class="keyword">return</span> a.ns &lt; b.ns;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.school &lt; b.school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：类型为void类型时，可以不带return语句，系统会自动加上一个return语句</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;自定义函数&quot;&gt;&lt;a href=&quot;#自定义函数&quot; class=&quot;headerlink&quot; title=&quot;自定义函数&quot;&gt;&lt;/a&gt;自定义函数&lt;/h1&gt;&lt;h3 id=&quot;生成【m，n】（m&quot;&gt;&lt;a href=&quot;#生成【m，n】（m&quot; class=&quot;headerlink&quot; title=&quot;生成【m，n】（m&amp;lt;n）的随机数&quot;&gt;&lt;/a&gt;生成【m，n】（m&amp;lt;n）的随机数&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;//srand(time(0));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rand&lt;/span&gt;() % (n - m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//放在主函数main()内部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;srand&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>字符数组&amp;&amp;字符串</title>
    <link href="http://example.com/2023/10/12/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84&amp;&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2023/10/12/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84&amp;&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-10-12T05:49:27.000Z</published>
    <updated>2023-10-12T06:08:41.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符数组-字符串"><a href="#字符数组-字符串" class="headerlink" title="字符数组&amp;&amp;字符串"></a>字符数组&amp;&amp;字符串</h1><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p>​我们知道定义一个数组时需要为其指定相应的变量类型。也就是说，定义了数组的类型之后这个数组中的所有变量就都是相同的类型。现在我们就来定义一个<strong>字符数组</strong>，如下：</p><p><code>char hello[5] = &#123;&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;</code></p><p>​这样我们就定义了一个字符型的数组，对于数组型的变量这样定义是没有问题的，但有两个方面的不足：</p><ol><li><p>定义的过程比较麻烦，在数组变量初始化时需要逐个写出每一个字符，并在这每一个字符的两端加上一对单引号。</p></li><li><p>在显示字符数组时，我们通常希望能够让其一次性的显示出来，而不是通过循环数组的方式逐个显示这些字符。</p></li></ol><p>​例如上面定义的数组我们想要用printf将其显示出来我们则需要通过循环的方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">5</span>] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, hello[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>​其实，在C语言中支持直接定义<strong>字符串</strong>的方式，定义字符数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">6</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hello);</span><br></pre></td></tr></table></figure><p>​注意，我们在定义这个数组时，指定数组的大小为6，也就是说需要申请6个字节的存储空间，而在等号右侧的双引号中我们却只书写了5个字符。这并不是笔误，C语言规定当使用**<font color='red'>双引号定义字符串</font><strong>时以&#x3D;&#x3D;</strong><code>&#39;\0&#39;</code><strong>&#x3D;&#x3D;作为这个字符串的</strong><font color='blue'>结束标志符</font>**，也就是说这个字符串一共有6个字符，分别是<code>&#39;H&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;l&#39;</code>、<code>&#39;l&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;\0&#39;</code></p><blockquote><p> 关于<code>&#39;\0&#39;</code>读者只需要知道这是一个特殊的字符即可，它表示字符串的结束，它的值为0。</p></blockquote><p>​这样我们就可以通过printf函数将这个字符串直接打印出来。需要注意的是，<strong>当使用<code>printf(“%s”,  )</code>来显示字符串时，我们要确保这个<font color='red'>字符串变量中最后一个结束字符为\0</font>，如果结束字符不是\0则printf在显示这个字符串时，就不知道显示到何处结束，</strong>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> hello[<span class="number">5</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hello);</span><br><span class="line"></span><br><span class="line">Hello#@($<span class="number">0948</span>#.<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>​也就是说，我们虽然定义了一个字符串，但只定义了5个字符的长度，而使用双引号为其初始化时，这个字符串的<strong>实际大小应该是6</strong>，因为要<strong>追加一个<code>\0</code><strong>，但我们在定义数组大小时只指定其大小是5，所以这个数组中的中只有5个元素是<code>&#39;H&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;l&#39;</code>、<code>&#39;l&#39;</code>、<code>&#39;o&#39;</code>。而在’o’之后并没有<code>&#39;\0&#39;</code>，所以在<code>printf</code>显示这个字符串时，显示 Hello之后，并不知道何时结束，所以就会继续显示，直到遇到一个<code>&#39;\0&#39;</code>为止，于是我们程序就出现了非预期的结果。这样的程序并不是我们提倡的，</strong>我们在定义字符串时一定要为其<font color='red'>多分配一个字符的长度</font>，以便存放<font color='blue'>字符串结束符<code>&#39;\0&#39;</code></font>。</strong>当然，使用双引号定义的字符串可以像使用普通数组一样使用其数组元素，例如ABC运行结果可以看到直接显示字符串和循环显示字符数组中的元素的效果是一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">6</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(str); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>​在这里我们使用了另一个重要函数sizeof()，它的作用是可以计算出某一个变量或类型的大小，就是占用的内存字节数，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d\n&quot;</span>, </span><br><span class="line">        <span class="built_in">sizeof</span>(ch), </span><br><span class="line">        <span class="built_in">sizeof</span>(sh), </span><br><span class="line">        <span class="built_in">sizeof</span>(i), </span><br><span class="line">        <span class="built_in">sizeof</span>(<span class="type">long</span>), </span><br><span class="line">        <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>​请注意，long类型的变量在不同的操作系统下占用字节数可能不同，请参数参见《变量大小》。另外在使用sizeof来计算数组大小时，计算的是数组一共占用内存的字节数，而不是数组的元素元素的个数，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure><p>​上面例子的结果是16而不是4。</p><h2 id="输入对比"><a href="#输入对比" class="headerlink" title="输入对比"></a>输入对比</h2><ol><li>字符数组</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">50</span>];<span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">50</span>];<span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121407458.png" alt="image-20221010181124750"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;字符数组-字符串&quot;&gt;&lt;a href=&quot;#字符数组-字符串&quot; class=&quot;headerlink&quot; title=&quot;字符数组&amp;amp;&amp;amp;字符串&quot;&gt;&lt;/a&gt;字符数组&amp;amp;&amp;amp;字符串&lt;/h1&gt;&lt;h2 id=&quot;字符数组&quot;&gt;&lt;a href=&quot;#字符数组&quot; class=&quot;headerlink&quot; title=&quot;字符数组&quot;&gt;&lt;/a&gt;字符数组&lt;/h2&gt;&lt;p&gt;​	我们知道定义一个数组时需要为其指定相应的变量类型。也就是说，定义了数组的类型之后这个数组中的所有变量就都是相同的类型。现在我们就来定义一个&lt;strong&gt;字符数组&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char hello[5] = &amp;#123;&amp;#39;H&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;o&amp;#39;&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	这样我们就定义了一个字符型的数组，对于数组型的变量这样定义是没有问题的，但有两个方面的不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义的过程比较麻烦，在数组变量初始化时需要逐个写出每一个字符，并在这每一个字符的两端加上一对单引号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在显示字符数组时，我们通常希望能够让其一次性的显示出来，而不是通过循环数组的方式逐个显示这些字符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	例如上面定义的数组我们想要用printf将其显示出来我们则需要通过循环的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; hello[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;H&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;e&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;, hello[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【C++标准库函数】</title>
    <link href="http://example.com/2023/10/12/%E3%80%90C++%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%91/"/>
    <id>http://example.com/2023/10/12/%E3%80%90C++%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%91/</id>
    <published>2023-10-12T05:35:27.000Z</published>
    <updated>2023-10-15T08:58:10.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-标准库函数"><a href="#C-标准库函数" class="headerlink" title="C++标准库函数"></a>C++标准库函数</h1><h2 id="max-element、min-element函数"><a href="#max-element、min-element函数" class="headerlink" title="max_element、min_element函数"></a>max_element、min_element函数</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h5 id="1-求数组的最大值或最小值"><a href="#1-求数组的最大值或最小值" class="headerlink" title="1. 求数组的最大值或最小值"></a>1. 求数组的最大值或最小值</h5><ul><li>普通数组</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = *<span class="built_in">max_element</span>(a, a + <span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> min = *<span class="built_in">min_element</span>(a, a + <span class="number">8</span>);</span><br></pre></td></tr></table></figure><ul><li>vector容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = *<span class="built_in">max_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">int</span> min = *<span class="built_in">min_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());<span class="comment">//获取最小值</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="2-求数组最大值最小值对应的下标"><a href="#2-求数组最大值最小值对应的下标" class="headerlink" title="2. 求数组最大值最小值对应的下标"></a>2. 求数组最大值最小值对应的下标</h4><ul><li>普通数组</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max_index = <span class="built_in">max_element</span>(a, a + <span class="number">8</span>) - a; </span><br><span class="line"><span class="type">int</span> min_index = <span class="built_in">min_element</span>(a, a + <span class="number">8</span>) - a;</span><br></pre></td></tr></table></figure><ul><li>vector容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> max_index = <span class="built_in">max_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>(); <span class="comment">//获取最大值对应的下标</span></span><br><span class="line"><span class="type">int</span> min_index = <span class="built_in">min_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>();<span class="comment">//获取最小值对应的下标</span></span><br></pre></td></tr></table></figure><h2 id="fill函数"><a href="#fill函数" class="headerlink" title="fill函数"></a>fill函数</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p><a href="https://blog.csdn.net/liu16659/article/details/87152348?ops_request_misc=%7B%22request_id%22:%22167715751316800188555444%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167715751316800188555444&biz_id=0&spm=1018.2226.3001.4187">(96条消息) C++ 中 fill() 的使用_LawsonAbs的博客-CSDN博客_c++ fill</a></p><h2 id="memset函数"><a href="#memset函数" class="headerlink" title="memset函数"></a>memset函数</h2><h4 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h4><p><strong><code>#include &lt;cstring&gt;</code></strong></p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p><code>void *memset(void *s, int c, int count)</code></p><ul><li>s：为指针或是数组</li><li>c：是赋给s的值</li><li>count：是s的长度</li><li>返回类型是一个指向存储区s的指针。</li></ul><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>memset是一个初始化函数，作用是<strong>将某一块内存空间全部设置为指定的值</strong>。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>memset可以方便的&#x3D;&#x3D;<strong>清空</strong>或初始化一个<strong>数组</strong>。&#x3D;&#x3D;</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ol><li>将数组初始化为0</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br></pre></td></tr></table></figure><ol start="2"><li>将数组清空</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br></pre></td></tr></table></figure><blockquote><p>  <a href="https://blog.csdn.net/weixin_44162361/article/details/115790452?ops_request_misc=%7B%22request_id%22:%22169735623116800180650624%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169735623116800180650624&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115790452-null-null.142%5Ev96%5Epc_search_result_base3&utm_term=memset&spm=1018.2226.3001.4187">memset的用法详解_薛定谔的猫ovo的博客-CSDN博客</a></p></blockquote><h2 id="new函数"><a href="#new函数" class="headerlink" title="new函数"></a>new函数</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p><code>new()</code>使计算机开辟一块内存空间，并返回<strong>内存空间的首地址</strong></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol><li><p>使用new来分配内存</p><pre><code>     `ElementType*p=new ElementType;`</code></pre></li><li><p>使用new来分配内存并赋值</p><pre><code>     `ElementType*p=new ElementType(data);`</code></pre></li><li><p>使用new函数创建数组</p><pre><code>     `ElementType*p=new ElementType [size];`</code></pre></li><li><p><code>ElementType*p=new ElementType [size]&#123;&#125;;</code></p></li></ol><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ol><li>new开辟的空间在堆上，而一般声明的变量存放在栈上</li><li><strong><font color='red'>通常用new函数代替malloc函数</font></strong></li><li>new不需要头文件</li></ol><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">example1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//可以在new后面直接赋值</span></span><br><span class="line">  <span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//也可以单独赋值</span></span><br><span class="line">  <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">  *p = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">example2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//用new创建数组</span></span><br><span class="line">  <span class="type">int</span> *q = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    q[i] = i;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function">student* <span class="title">example3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//这里是用一个结构体指针接住结构体数组的首地址</span></span><br><span class="line">  <span class="comment">//对于结构体指针，个人认为目前这种赋值方法比较方便</span></span><br><span class="line">  student *stlist = <span class="keyword">new</span> student[<span class="number">3</span>]&#123;&#123;<span class="string">&quot;abc&quot;</span>, <span class="number">90</span>&#125;, &#123;<span class="string">&quot;bac&quot;</span>, <span class="number">78</span>&#125;, &#123;<span class="string">&quot;ccd&quot;</span>, <span class="number">93</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> stlist;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> e1 = <span class="built_in">example1</span>();</span><br><span class="line">  cout &lt;&lt;<span class="string">&quot;e1: &quot;</span>&lt;&lt; e1 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> *e2 = <span class="built_in">example2</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    cout &lt;&lt; e2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  student *st1 = <span class="built_in">example3</span>();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    cout &lt;&lt; st1[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st1[i].score &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121336992.png" alt="image-20220927232953995"></p><h2 id="swap函数"><a href="#swap函数" class="headerlink" title="swap函数"></a>swap函数</h2><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>**<code>swap(a,b);</code><strong>交换两个变量</strong><code>a,b</code>**的值</p><blockquote><p><strong><code>a,b</code><strong>可以是</strong><font color='red'>任何数据类型</font></strong></p></blockquote><h3 id="原型-1"><a href="#原型-1" class="headerlink" title="原型"></a>原型</h3><p><strong><code>void swap ( ElementType &amp;a, ElementType &amp;b);</code></strong></p><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a,b);</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b; <span class="comment">// 2 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121336975.png" alt="image-20221208182201962"></p><h4 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a = <span class="string">&quot;ABCD&quot;</span>;     string b = <span class="string">&quot;function&quot;</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121336032.png" alt="image-20221208182533843"></p><h2 id="reverse函数"><a href="#reverse函数" class="headerlink" title="reverse函数"></a>reverse函数</h2><h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h3><p>反转在**<font color='red'> [ first,last ) </font>**范围内的顺序（包括first指向的元素，不包括last指向的元素）</p><h3 id="原型-2"><a href="#原型-2" class="headerlink" title="原型"></a>原型</h3><p><strong><code>void reverse (BidirectionalIterator first,BidirectionalIterator last);</code></strong></p><ul><li>参数first：待排区域的**<font color='blue'>起始地址</font>**</li><li>参数last：待排区域的**<font color='blue'>末尾地址</font>**</li></ul><h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><ul><li>反转<strong>向量</strong><font color='blue'><strong>vector</strong></font></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>( v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//v的值为1,2,3,4,5</span></span><br></pre></td></tr></table></figure><ul><li>反转数组**<code>ElementType A[]</code>**</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> A[]=&#123;<span class="number">12</span>,<span class="number">-5</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(A, A+<span class="number">6</span>);<span class="comment">//数组A为19,1,7,0,-5,12</span></span><br></pre></td></tr></table></figure><ul><li>反转<strong>字符串<font color='blue'>string</font></strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;www.mathor.top&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());<span class="comment">//str结果为pot.rohtam.wwww</span></span><br></pre></td></tr></table></figure><h2 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h2><h3 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h3><p><strong><code>#include &lt;algorithm&gt;</code></strong></p><h3 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h3><p>对&#x3D;&#x3D;<strong><font color='red'>数组排序</font></strong>&#x3D;&#x3D;</p><blockquote><ul><li>数组可以是**<code>ElementType A[]</code>**，也可以是 <strong><code>vector &lt;ElementType&gt; A</code></strong><ul><li><strong><code>ElementType A[]</code><strong>：</strong><code>A</code><strong>表示</strong><font color='blue'>数组首地址</font><strong>，</strong><code>A+n</code><strong>表示</strong><font color='blue'>数组尾部</font></strong></li><li><strong><code>vector &lt;ElementType&gt; A</code><strong>：</strong><code>A.begin()</code><strong>和</strong><code>A.end()</code><strong>表示</strong><font color='blue'>头尾</font></strong></li></ul></li></ul></blockquote><h3 id="原型-3"><a href="#原型-3" class="headerlink" title="原型"></a>原型</h3><table><thead><tr><th>默认</th><th><strong><code>void sort(RandomAccessIterator first,RandomAccessIterator last);</code></strong></th></tr></thead><tbody><tr><td><strong>自定义</strong></td><td><strong><code>void sort(RandomAccessIterator first,RandomAccessIterator last,Compare comp);</code></strong></td></tr></tbody></table><ul><li>参数first：待排数组的**<font color='blue'>起始地址</font>**</li><li>参数last：待排数组的**<font color='blue'>末尾地址</font>**</li><li>参数comp：自定义排序方法<ul><li>如果第三个参数不写，则<strong>默认的排序方法</strong>是**<font color='red'>从小到大</font>**排序。</li></ul></li></ul><h3 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// cmp函数返回的值是bool类型</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">// 从大到⼩排列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">cin &gt;&gt; v[i];</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">// 因为这里没有传入参数cmp，所以按照默认,v从小到大排列</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + <span class="number">10</span>, cmp); <span class="comment">// arr从大到小排列，因为cmp函数排序规则设置了从大到小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见cmp函数"><a href="#常见cmp函数" class="headerlink" title="常见cmp函数"></a>常见cmp函数</h3><p>- </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br></pre></td></tr></table></figure><p>- </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score!=b.score)</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.number&lt;b.number;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">return</span> a.score!=b.score ? a.score&gt;b.score : a.number &lt; b.nember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>- </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> node a,<span class="keyword">struct</span> node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.height!=b.height ? a.height&gt;b.height : a.name &lt; b.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>- </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    string school;</span><br><span class="line">    <span class="type">int</span> tws, ns;<span class="comment">//加权总分total weighted score(tws)    考生人数number of students()</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.tws != b.tws)</span><br><span class="line">        <span class="keyword">return</span> a.tws &gt; b.tws;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.ns != b.ns)</span><br><span class="line">        <span class="keyword">return</span> a.ns &lt; b.ns;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.school &lt; b.school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注： <strong><code>sort</code></strong> 函数的 <strong><code>cmp</code></strong> 必须按照规定来写，即必须只是 <strong><code>&gt;</code></strong> 或者 <strong><code>&lt;</code></strong> ，比如： <strong><code>return a &gt; b;</code></strong> 或者 <strong><code>return a &lt; b;</code></strong> 而不能是 <strong><code>&lt;=</code></strong> 或者 <strong><code>&gt;=</code></strong> </p></blockquote><h2 id="find函数"><a href="#find函数" class="headerlink" title="find函数"></a>find函数</h2><h2 id="copy函数"><a href="#copy函数" class="headerlink" title="copy函数"></a>copy函数</h2><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code>使用关键字`typedef`可以为数据类型起一个新的别名</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  oldName  newName;</span><br><span class="line">newName a,b;</span><br></pre></td></tr></table></figure><ul><li><code>oldName</code> 是类型原来的名字，</li><li><code>newName</code> 是类型新的名字</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  oldName  newName;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<code>typedef</code>去掉，<code>oldname</code>保留，<code>newname</code>换成a,b&#x3D;&#x3D;</p></blockquote><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oldName a,b;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ol><li>typedef 是赋予<strong>现有类型</strong>一个<strong>新的名字</strong>，而&#x3D;&#x3D;<strong>不是创建新的类型</strong>&#x3D;&#x3D;。</li><li>为了“见名知意”，请尽量使用含义明确的标识符，并且尽量大写。</li><li>&#x3D;&#x3D;<font color='red'><strong>最后的分号<code>;</code>不要忘记</strong></font>&#x3D;&#x3D;</li></ol></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>typedef给如<code>int</code>，<code>double</code>，<code>char</code>，<code>long</code>，<code>float</code> 等类型定义别名</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER;</span><br><span class="line">INTEGER a, b;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li><strong>typedef 给数组类型定义别名</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> array[<span class="number">20</span>];</span><br><span class="line">array a1, a2, s1, s2;</span><br></pre></td></tr></table></figure><p>它等价于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[<span class="number">20</span>], a2[<span class="number">20</span>], s1[<span class="number">20</span>], s2[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><blockquote><p>注：数组也是有类型的。例如char a1[20];定义了一个数组 a1，它的类型就是 &#x3D;&#x3D;<strong>char [20]</strong>&#x3D;&#x3D;。</p></blockquote><hr><ol start="3"><li><strong>typedef 给结构体类型定义别名</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125; stu;</span><br></pre></td></tr></table></figure><p><code>stu</code>  是 <code>struct node</code> 的别名，可以用 <code>stu</code> 定义结构体变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu x;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> x;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li><strong>typedef 给结构数组类型定义别名</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span></span><br><span class="line">&#123;</span><br><span class="line">VertexType data;<span class="comment">//顶点信息</span></span><br><span class="line">ArcNode* firstarc;<span class="comment">//指向第一条依附该顶点的边</span></span><br><span class="line">&#125;VNode,AdjList[MVNum];<span class="comment">//AdjList表示邻接表类型</span></span><br><span class="line"><span class="comment">//AdjList v相当于VNode v[MVNum]</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>typedef 给指针类型定义别名</strong></li></ol><ul><li>例一</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_ARR)</span>[4]</span>;</span><br></pre></td></tr></table></figure><blockquote><p>表示 PTR_TO_ARR 是类型<code>int [4] * </code>的别名，它是一个&#x3D;&#x3D;<strong>二维数组指针</strong>&#x3D;&#x3D;类型。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTR_TO_ARR p;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p)[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><hr><ul><li>例二</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> * PTR_TO_ARR [<span class="number">4</span>];</span><br></pre></td></tr></table></figure><blockquote><p>表示 PTR_TO_ARR 是类型<code>int * [4]</code>的别名，它是一个&#x3D;&#x3D;<strong>元素指向整形数据的指针数组</strong>&#x3D;&#x3D;类型。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTR_TO_ARR p;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * p [<span class="number">4</span>];</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>typedef为函数指针类型定义别名</strong></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_FUNC)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">PTR_TO_FUNC pfunc;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">char</span> <span class="params">(*PTR_TO_ARR)</span>[30]</span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PTR_TO_FUNC)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">3</span>][<span class="number">30</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;百度搜索引擎&quot;</span>,</span><br><span class="line">    <span class="string">&quot;C-Language&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PTR_TO_ARR parr = str;</span><br><span class="line">    PTR_TO_FUNC pfunc = max;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max: %d\n&quot;</span>, (*pfunc)(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str[%d]: %s\n&quot;</span>, i, *(parr+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">max: <span class="number">20</span></span><br><span class="line">str[<span class="number">0</span>]: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">str[<span class="number">1</span>]: 百度搜索引擎</span><br><span class="line">str[<span class="number">2</span>]: C-Language</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><ol><li><a href="https://blog.csdn.net/weixin_51635753/article/details/115434999?ops_request_misc=%7B%22request_id%22:%22167049370716782414992762%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=167049370716782414992762&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-21-115434999-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=C++%E8%87%AA%E5%B8%A6swap%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">(82条消息) C++ STL 常用函数_Mr.bei的博客-CSDN博客_c++stl常用函数</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;C-标准库函数&quot;&gt;&lt;a href=&quot;#C-标准库函数&quot; class=&quot;headerlink&quot; title=&quot;C++标准库函数&quot;&gt;&lt;/a&gt;C++标准库函数&lt;/h1&gt;&lt;h2 id=&quot;max-element、min-element函数&quot;&gt;&lt;a href=&quot;#max-element、min-element函数&quot; class=&quot;headerlink&quot; title=&quot;max_element、min_element函数&quot;&gt;&lt;/a&gt;max_element、min_element函数&lt;/h2&gt;&lt;h3 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;h5 id=&quot;1-求数组的最大值或最小值&quot;&gt;&lt;a href=&quot;#1-求数组的最大值或最小值&quot; class=&quot;headerlink&quot; title=&quot;1. 求数组的最大值或最小值&quot;&gt;&lt;/a&gt;1. 求数组的最大值或最小值&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;普通数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max = *&lt;span class=&quot;built_in&quot;&gt;max_element&lt;/span&gt;(a, a + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min = *&lt;span class=&quot;built_in&quot;&gt;min_element&lt;/span&gt;(a, a + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;vector容器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; a = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max = *&lt;span class=&quot;built_in&quot;&gt;max_element&lt;/span&gt;(a.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), a.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//获取最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min = *&lt;span class=&quot;built_in&quot;&gt;min_element&lt;/span&gt;(a.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), a.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;());&lt;span class=&quot;comment&quot;&gt;//获取最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>【C++ STL】</title>
    <link href="http://example.com/2023/10/12/%E3%80%90C++%20STL%E3%80%91/"/>
    <id>http://example.com/2023/10/12/%E3%80%90C++%20STL%E3%80%91/</id>
    <published>2023-10-12T05:29:27.000Z</published>
    <updated>2023-10-12T06:01:02.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vector-数组"><a href="#vector-数组" class="headerlink" title="vector 数组"></a>vector 数组</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><strong><code>#include &lt;vector&gt;</code></strong></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong><code>vector&lt;ElementType&gt; v;</code></strong> </p><blockquote><p> 这里的<code>ElementType</code>可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。 </p></blockquote><ul><li><strong><code>vector&lt;int&gt; v;</code></strong></li></ul><p>​ 定义一个向量v，**<font color='red'>大小为0</font>** </p><ul><li><p><strong><code>vector&lt;int&gt; v;   v.resize(8);</code></strong> </p><p>  先定义⼀个向量v，然后**<font color='red'>将长度resize为8</font>**，默认这8个元素都是0</p></li><li><p><strong><code>vector&lt;int&gt; v(10);</code></strong> </p><p>   定义具有10个int元素的向量v，**<font color='red'>默认这10个元素值都为0</font>**</p></li></ul><span id="more"></span><ul><li><p><strong><code>vector&lt;int&gt; v(10, 1);</code></strong></p><p>   定义具有10个int元素的向量v，且**<font color='red'>这10个元素值都为</font>**1</p></li><li><p><strong><code>vector&lt;int&gt;a(b);</code></strong></p></li></ul><p>​        先定义⼀个向量a，然后**<font color='red'>将向量b赋值给向量a</font>**（a的值完全等价于b的值）</p><ul><li><p><strong><code>vector&lt;int&gt;a(b.begin(),b.begin+3);</code></strong></p><p>  将向量b中从0-2（**<font color='blue'>共3个</font>**）的元素赋值给a，a的类型为int型</p></li><li><p><strong><code>int b[7]=&#123;1,2,3,4,5,6,7&#125;; vector&lt;int&gt; a(b,b+7);</code></strong></p><p>  从数组中获得初值</p></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><a href="https://blog.csdn.net/weixin_41743247/article/details/90635931?ops_request_misc=%7B%22request_id%22:%22167064353616800184186226%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167064353616800184186226&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90635931-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=vector&spm=1018.2226.3001.4187">(82条消息) C++_vector操作_会敲代码的地质汪的博客-CSDN博客_计算一组vector的每个元素的power次方的和,加到初始值init上。采用函数对象(s</a></p><ul><li><h3 id="v-size-：返回-vector数组大小-类型unsigned-int"><a href="#v-size-：返回-vector数组大小-类型unsigned-int" class="headerlink" title="v.size()：返回**vector数组大小**类型unsigned int"></a><code>v.size()</code>：返回**<font color='red'>vector数组大小</font>**类型unsigned int</h3></li></ul><blockquote><p>如果v.size()&#x3D;&#x3D;1，则v.size()-3为正数，必须int(a.size()) - 3才行</p></blockquote><ul><li><h3 id="v-resize-n-：将向量-v的-元素个数调整为n个，多则删，少则补（其值为0）"><a href="#v-resize-n-：将向量-v的-元素个数调整为n个，多则删，少则补（其值为0）" class="headerlink" title="v.resize(n)：将向量 v的 元素个数调整为n个，多则删，少则补（其值为0）"></a><code>v.resize(n)</code>：将向量 v的 <strong><font color='red'>元素个数调整为n个</font><strong>，</strong><font color='blue'>多则删，少则补（其值为0）</font></strong></h3></li><li><h3 id="v-resize-n-x-：将向量-v-的-元素个数调整为n个，多则删，少则补（其值为x）"><a href="#v-resize-n-x-：将向量-v-的-元素个数调整为n个，多则删，少则补（其值为x）" class="headerlink" title="v.resize(n,x)：将向量 v 的**元素个数调整为n个，多则删，少则补（其值为x）**"></a><code>v.resize(n,x)</code>：将向量 v 的**<font color='red'>元素个数调整为n个</font><strong>，</strong><font color='blue'>多则删，少则补（其值为x）</font>**</h3></li><li><h3 id="v-clear-：-清空向量v"><a href="#v-clear-：-清空向量v" class="headerlink" title="v.clear()：**清空向量v**"></a><code>v.clear()</code>：**<font color='red'>清空</font><strong>向量</strong>v**</h3></li><li><h3 id="v-front-：返回v的第一个元素"><a href="#v-front-：返回v的第一个元素" class="headerlink" title="**v.front()**：返回v的第一个元素"></a>**<code>v.front()</code>**：返回v的<font color='red'><strong>第一个元素</strong></font></h3></li><li><h3 id="v-back-：返回v的最后一个元素"><a href="#v-back-：返回v的最后一个元素" class="headerlink" title="**v.back()**：返回v的最后一个元素"></a>**<code>v.back()</code>**：返回v的<font color='red'><strong>最后一个元素</strong></font></h3></li><li><h3 id="v-empty-：检测-vector-是否为空：-返回-true-则空，返回-false-则非空-。"><a href="#v-empty-：检测-vector-是否为空：-返回-true-则空，返回-false-则非空-。" class="headerlink" title="v.empty()：检测 vector 是否为空：&#x3D;&#x3D;返回 true 则空，返回 false 则非空&#x3D;&#x3D; 。"></a><code>v.empty()</code>：检测 vector 是否为空：&#x3D;&#x3D;<strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong>&#x3D;&#x3D; 。</h3></li><li><h3 id="v-push-back-x-：将-x-添加到-向量-v-最后-（v-size会加1）"><a href="#v-push-back-x-：将-x-添加到-向量-v-最后-（v-size会加1）" class="headerlink" title="v.push_back(x)：将 x 添加到**向量 v 最后**（v.size会加1）"></a><code>v.push_back(x)</code>：将 <strong>x</strong> 添加到**<font color='red'>向量 v 最后</font>**（<code>v.size</code>会加1）</h3></li><li><h3 id="v-pop-back-：删除向量-v-的最后一个元素-（v-size会减1）"><a href="#v-pop-back-：删除向量-v-的最后一个元素-（v-size会减1）" class="headerlink" title="**v.pop_back();：删除向量 v 的最后一个元素**（v.size会减1）"></a>**<code>v.pop_back();</code><strong>：</strong><font color='red'>删除</font><strong>向量 v 的</strong><font color='red'>最后一个元素</font>**（<code>v.size</code>会减1）</h3></li></ul><blockquote><p>注意：</p><ul><li>使用<code>v.pop_back()</code>之前要<code>v.empty()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!v.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    ..........</span><br><span class="line">    v.<span class="built_in">pop_back</span>();</span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>v.pop_back();</code>无返回值，**<font color='blue'>仅删除</font><strong>向量 v 的最后一个元素。要</strong><font color='gree'>获得</font>**<font color='red'><strong>向量 v 的最后一个元素</strong></font><strong>需要<code>v.back()</code></strong></li></ul></blockquote><ul><li><h3 id="v-insert-v-begin-1-5-：在-v-的第一个元素（从第0个算起）-位置插入数值5"><a href="#v-insert-v-begin-1-5-：在-v-的第一个元素（从第0个算起）-位置插入数值5" class="headerlink" title="**v.insert(v.begin()+1,5)：在 v 的第一个元素（从第0个算起）**位置插入数值5"></a>**<code>v.insert(v.begin()+1,5)</code><strong>：在 v 的</strong><font color='red'>第一个元素（从第0个算起）</font>**位置插入数值5</h3></li><li><h3 id="v-insert-v-begin-1-3-5-：在v的-第一个元素（从第0个算起）位置插入3个数，其值都为5"><a href="#v-insert-v-begin-1-3-5-：在v的-第一个元素（从第0个算起）位置插入3个数，其值都为5" class="headerlink" title="v.insert(v.begin()+1,3,5)：在v的**第一个元素（从第0个算起）位置插入3个数，其值都为5**"></a><code>v.insert(v.begin()+1,3,5)</code>：在v的**<font color='red'>第一个元素（从第0个算起）</font><strong>位置插入</strong><font color='blue'>3个数</font><strong>，其</strong><font color='blue'>值都为5</font>**</h3></li><li><h3 id="v-erase-v-begin-1-v-begin-5-：删除原来向量-v-中v-1-v-4-这4个元素"><a href="#v-erase-v-begin-1-v-begin-5-：删除原来向量-v-中v-1-v-4-这4个元素" class="headerlink" title="**v.erase(v.begin()+1,v.begin()+5)**：删除原来向量 v 中v[1]~v[4]这4个元素"></a>**<code>v.erase(v.begin()+1,v.begin()+5)</code>**：<font color='red'>删除</font><strong>原来向量 v 中</strong><font color='blue'>v[1]~v[4]这4个元素</font></h3></li><li><h3 id="a-swap-b-：b为向量，将a中的元素和b中的元素-整体交换"><a href="#a-swap-b-：b为向量，将a中的元素和b中的元素-整体交换" class="headerlink" title="a.swap(b)：b为向量，将a中的元素和b中的元素**整体交换**"></a><code>a.swap(b)</code>：b为向量，将a中的元素和b中的元素**<font color='red'>整体交换</font>**</h3></li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a; <span class="comment">//定义的时候不指定vector的大小</span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">// 这个时候size是0 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">        a.<span class="built_in">push_back</span>(i); <span class="comment">//在vector a的末尾添加一个元素i </span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">// 此时会发现a的size变成了10 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">15</span>)</span></span>; <span class="comment">//定义的时候指定vector的大小，默认b里面元素都是0</span></span><br><span class="line">    cout &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) </span><br><span class="line">        b[i]= <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) </span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">20</span>, <span class="number">2</span>)</span></span>; <span class="comment">//定义的时候指定vector的大小并把所有的元素赋一个指定的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++) </span><br><span class="line">        cout &lt;&lt; c[i] &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">begin</span>(); it != c.<span class="built_in">end</span>(); it++) <span class="comment">//使用迭代器的方式访问vector </span></span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//vector相等判断与赋值    </span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line"><span class="keyword">if</span> (vec1 == vec2)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec1与vec2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">vec2 = vec1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;赋值后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (vec1 == vec2)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec1与vec2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323091.png" alt="在这里插入图片描述"></p><blockquote><ul><li>vector的赋值会把<strong>一个vector的所有元素</strong>赋值到<strong>另一个vector中</strong>，并<font color='red'><strong>替代所有元素</strong></font>；</li><li>而vector的相等也是需要**逐个元素<font color='red'>依次比较</font><strong>并</strong><font color='blue'>全部相等</font>**才算相等。</li></ul></blockquote><h1 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h1><p><a href="https://blog.csdn.net/sevenjoin/article/details/81943864?ops_request_misc=%7B%22request_id%22:%22169708750416800215061817%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169708750416800215061817&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81943864-null-null.142%5Ev96%5Epc_search_result_base3&utm_term=map&spm=1018.2226.3001.4187">C++ map用法总结（整理）_c++map用法-CSDN博客</a></p><h1 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h1><blockquote><p>遍历**<font color='blue'>容器</font><strong><code>vector</code>、<code>set</code>、<code>map</code>要使用</strong><font color='red'>迭代器</font>**访问</p><ul><li><strong><code>c.begin()</code><strong>是一个指针，指向容器的</strong><font color='purple'>第一个元素</font></strong></li><li><strong><code>c.end()</code><strong>是一个指针，指向容器&#x3D;&#x3D;</strong><font color='red'>最后一个元素的后一个位置</font></strong>&#x3D;&#x3D;</li><li>所以**<font color='blue'>迭代器指针it</font>**的for循环判断条 件是 <strong><code>it != c.end()</code></strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">begin</span>(); it != c.<span class="built_in">end</span>(); it++)  <span class="comment">// 使⽤用迭代器的方式访问vector </span></span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323092.png" alt="image-20221210124616615"></p></blockquote><h1 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h1><h2 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong><code>queue&lt;ElementType&gt; q;</code></strong> </p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul><li><h3 id="q-size-：返回-队列大小"><a href="#q-size-：返回-队列大小" class="headerlink" title="q.size()：返回**队列大小**"></a><code>q.size()</code>：返回**<font color='red'>队列大小</font>**</h3></li><li><h3 id="q-push-：将-x-插入队尾"><a href="#q-push-：将-x-插入队尾" class="headerlink" title="q.push()：将 x 插入队尾"></a><code>q.push()</code>：将 x <strong><font color='red'>插入队尾</font></strong></h3></li><li><h3 id="q-front-与-q-back-：分别返回队首元素和队尾元素"><a href="#q-front-与-q-back-：分别返回队首元素和队尾元素" class="headerlink" title="q.front() 与 q.back()：分别返回队首元素和队尾元素"></a><code>q.front()</code> 与 <code>q.back()</code>：分别返回<font color='red'>队首元素</font><strong>和</strong><font color='red'>队尾元素</font></h3></li><li><h3 id="q-pop-：令队首元素出队，删除队首元素"><a href="#q-pop-：令队首元素出队，删除队首元素" class="headerlink" title="q.pop()：令队首元素出队，删除队首元素"></a><code>q.pop()</code>：令队首元素<strong>出队，</strong><font color='blue'>删除</font>队首元素</h3></li></ul><blockquote><p><code>q.pop()</code>无返回值，仅删除队首元素。要**<font color='gree'>获得</font>**<font color='red'><strong>队首元素</strong></font><strong>还需<code>q.front()</code></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 0</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 1</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, q.<span class="built_in">front</span>(),q.<span class="built_in">back</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="q-empty-：检测-queue-是否为空：-返回-true-则空，返回-false-则非空-。"><a href="#q-empty-：检测-queue-是否为空：-返回-true-则空，返回-false-则非空-。" class="headerlink" title="q.empty()：检测 queue 是否为空：&#x3D;&#x3D;返回 true 则空，返回 false 则非空&#x3D;&#x3D; 。"></a><code>q.empty()</code>：检测 queue 是否为空：&#x3D;&#x3D;<strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong>&#x3D;&#x3D; 。</h3></li><li><h3 id="q-size-：返回-queue-中元素个数"><a href="#q-size-：返回-queue-中元素个数" class="headerlink" title="q.size()：返回 queue 中元素个数"></a><code>q.size()</code>：返回 queue 中<font color='red'><strong>元素个数</strong></font></h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">if</span> (q.<span class="built_in">empty</span>()==<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EMPTY! \n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NOT EMPTY! \n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;EMPTY! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NOT EMPTY! \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121333840.png" alt="img"></p><blockquote><p> 注意： 使用 <code>q.front()</code>和 <code>q.pop()</code>函数前，必须用 <code>q.empty()</code>判断队列&#x3D;&#x3D;<strong>是否为空</strong>&#x3D;&#x3D;，否则可能因为<strong>队空</strong>而出现错误。</p></blockquote><hr><h1 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack 栈"></a>stack 栈</h1><h2 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h2><p><strong><code>#include &lt;stack&gt;</code></strong></p><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p><strong><code>stack&lt;ElementType&gt; s;</code></strong> </p><blockquote><p>这里的<code>ElementType</code>可以是<strong>任意类型</strong>，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。 </p></blockquote><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><ul><li><h3 id="s-size-：返回-栈的大小"><a href="#s-size-：返回-栈的大小" class="headerlink" title="s.size()：返回**栈的大小**"></a><code>s.size()</code>：返回**<font color='red'>栈的大小</font>**</h3></li><li><h3 id="s-push-：将-x-压入栈顶"><a href="#s-push-：将-x-压入栈顶" class="headerlink" title="s.push()：将 x 压入栈顶"></a><code>s.push()</code>：将 x <strong><font color='red'>压入栈顶</font></strong></h3></li><li><h3 id="s-top-：返回栈顶元素"><a href="#s-top-：返回栈顶元素" class="headerlink" title="s.top() ：返回栈顶元素"></a><code>s.top()</code> ：返回<font color='red'>栈顶元素</font></h3></li><li><h3 id="s-pop-：令栈顶元素出栈，删除栈顶元素"><a href="#s-pop-：令栈顶元素出栈，删除栈顶元素" class="headerlink" title="s.pop()：令栈顶元素出栈，删除栈顶元素"></a><code>s.pop()</code>：令<font color='red'>栈顶元素</font><strong>出栈，</strong><font color='blue'>删除</font>栈顶元素</h3></li></ul><blockquote><p><code>s.pop()</code>无返回值，仅删除栈顶元素。要**<font color='blue'>获得</font>**<font color='red'><strong>栈顶元素</strong></font><strong>还需<code>s.top()</code></strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i); <span class="comment">//push(i) 用来将 i 压入队列，因此依次入队 0 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 0</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 1</span></span><br><span class="line">q.<span class="built_in">pop</span>();  <span class="comment">// 出队首元素 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, q.<span class="built_in">front</span>(),q.<span class="built_in">back</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="s-empty-检测-stack-是否为空：-返回-true-则空，返回-false-则非空-。"><a href="#s-empty-检测-stack-是否为空：-返回-true-则空，返回-false-则非空-。" class="headerlink" title="s.empty(): 检测 stack 是否为空：&#x3D;&#x3D;返回 true 则空，返回 false 则非空&#x3D;&#x3D; 。"></a><code>s.empty()</code>: 检测 stack 是否为空：&#x3D;&#x3D;<strong><font color='red'>返回 true 则空，返回 false 则非空</font></strong>&#x3D;&#x3D; 。</h3></li><li><h3 id="s-size-：返回-stack-中的元素个数。"><a href="#s-size-：返回-stack-中的元素个数。" class="headerlink" title="s.size()：返回 stack 中的元素个数。"></a><code>s.size()</code>：返回 stack 中的<font color='red'><strong>元素个数</strong></font>。</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;  q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.size &quot;</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.top &quot;</span>&lt;&lt;q.<span class="built_in">top</span>()&lt;&lt;endl;   <span class="comment">//输出栈顶元素 </span></span><br><span class="line"></span><br><span class="line">q.<span class="built_in">pop</span>();<span class="comment">//删除栈顶元素</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.size &quot;</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;  </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;q.top &quot;</span>&lt;&lt;q.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323093.png" alt="img"></p><blockquote><p> 注意： 使用 **<code>s.top()</code>**和 **<code>s.pop()</code>**函数前，必须用 <strong><code>s.empty()</code><strong>判断队列&#x3D;&#x3D;<strong>是否为空</strong>&#x3D;&#x3D;，否则可能因为</strong>队空</strong>而出现错误。</p></blockquote><h1 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h1><h2 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h2><p><strong><code>#include &lt;string&gt;</code></strong></p><blockquote><p>头文件不写也可以</p></blockquote><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><ol><li><code>string str</code>：生成<strong>空字符串</strong></li></ol><hr><ol start="2"><li><code>string s(str)</code>：将字符串str的内容复制给s；</li></ol><blockquote><p>注：<code>string s(str);</code>&lt;&#x3D;&#x3D;&gt;<code>string s = str;</code></p></blockquote><hr><ol start="3"><li><code>string s(str, i, len)</code>：将字符串str中从<strong>下标i开始</strong>、<strong>长度为len</strong>的部分作为字符串初值</li></ol><hr><ol start="4"><li><code>string s(str, i)</code>：将字符串str中从<strong>下标i开始</strong>到<strong>字符串结束</strong>的部分作为字符串初值</li></ol><blockquote><p>这里的cstr是<strong>字符串变量</strong>，eg：<code>string s(str,3);</code></p></blockquote><hr><ol start="5"><li><code>string s(cstr, len)</code>：以<strong>C_string类型</strong>cstr的<strong>前len个字符</strong>作为字符串s的初值</li></ol><blockquote><p>这里的&#x3D;&#x3D;C_string类型是<strong>字符串常量</strong>类型&#x3D;&#x3D;，eg：<code>string s(&quot;abcde&quot;,3);</code></p></blockquote><hr><ol start="6"><li>**<code>string s(num ,c)</code>**：生成<font color='red'><strong>num个 c 字符</strong></font>的字符串，c为char类型</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1;               <span class="comment">//生成空字符串</span></span><br><span class="line">    <span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;123456789&quot;</span>)</span></span>;  <span class="comment">//生成&quot;1234456789&quot;的复制品</span></span><br><span class="line">    <span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;12345&quot;</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span>;<span class="comment">//结果为&quot;123&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str4</span><span class="params">(<span class="string">&quot;0123456&quot;</span>, <span class="number">5</span>)</span></span>;  <span class="comment">//结果为&quot;01234&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str5</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;1&#x27;</span>)</span></span>;       <span class="comment">//结果为&quot;11111&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">str6</span><span class="params">(str2, <span class="number">2</span>)</span></span>;      <span class="comment">//结果为&quot;3456789&quot;</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str2:&quot;</span>&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str4:&quot;</span>&lt;&lt;str4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str5:&quot;</span>&lt;&lt;str5&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str6:&quot;</span>&lt;&lt;str6&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323094.png" alt="这里写图片描述"></p><h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h2><ul><li><h3 id="s-size-s-length-s-max-size-s-capacity"><a href="#s-size-s-length-s-max-size-s-capacity" class="headerlink" title="s.size(),s.length(),s.max_size(),s.capacity()"></a><code>s.size()</code>,<code>s.length()</code>,<code>s.max_size()</code>,<code>s.capacity()</code></h3></li></ul><ol><li><p><code>s.size()</code>和<code>s.length()</code>：返回字符串s的<strong>长度</strong>。</p></li><li><p><code>s.max_size()</code>：返回string对象最多包含的字符数，超出编译器会抛出length_error异常</p></li><li><p><code>capacity()</code>：返回当前string类在<strong>不重新分配内存</strong>的情况下，能存多少字符（即当前内存支持多少）。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;1234567&quot;</span>)</span></span>;<span class="comment">//string s=&quot;1234567&quot;;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;length=&quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max_size=&quot;</span> &lt;&lt; s.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;capacity=&quot;</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310121323095.png" alt="这里写图片描述"></p><ul><li><h3 id="s-compare"><a href="#s-compare" class="headerlink" title="s.compare()"></a><code>s.compare()</code></h3></li></ul><ol><li>C ++字符串支持<strong>比较</strong>操作符（&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;,&#x3D;&#x3D;,!&#x3D;），甚至支持string与C-string的比较(如 str&lt;”hello”)。</li></ol><blockquote><p>string比较的原则是从左往右，按&#x3D;&#x3D;<strong>字典序</strong>&#x3D;&#x3D;，<strong>逐个字符</strong>比较，直到不同</p></blockquote><ol start="2"><li><ul><li>另一个功能强大的比较函数是<code>s.compare()</code>。他支持多参数处理，支持用索引值和长度定位子串来进行比较。</li></ul></li></ol><ul><li><p>他返回一个整数来表示比较结果，返回值意义如下：</p><ul><li><p><strong>0：相等</strong> </p></li><li><p><strong>1：大于</strong></p></li><li><p><strong>-1：小于</strong></p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// (A的ASCII码是65，a的ASCII码是97)</span></span><br><span class="line">    <span class="comment">// 前面减去后面的ASCII码，&gt;0返回1，&lt;0返回-1，相同返回0</span></span><br><span class="line">    <span class="function">string <span class="title">A</span><span class="params">(<span class="string">&quot;aBcd&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">B</span><span class="params">(<span class="string">&quot;Abcd&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">C</span><span class="params">(<span class="string">&quot;123456&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">D</span><span class="params">(<span class="string">&quot;123dfg&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;aBcd&quot; 和 &quot;Abcd&quot;比较------ a &gt; A</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(B)：&quot;</span> &lt;&lt; A.<span class="built_in">compare</span>(B)&lt;&lt; endl;                          <span class="comment">// 结果：1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;cd&quot; 和 &quot;Abcd&quot;比较------- c &gt; A</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(2, 3, B):&quot;</span> &lt;&lt;A.<span class="built_in">compare</span>(<span class="number">2</span>, <span class="number">3</span>, B)&lt;&lt; endl;                <span class="comment">// 结果：1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;cd&quot; 和 &quot;cd&quot;比较 </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A.compare(2, 3, B, 2, 3):&quot;</span> &lt;&lt; A.<span class="built_in">compare</span>(<span class="number">2</span>, <span class="number">3</span>, B, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;  <span class="comment">// 结果：0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由结果看出来：0表示下标，3表示长度</span></span><br><span class="line">    <span class="comment">// &quot;123&quot; 和 &quot;123&quot;比较 </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C.compare(0, 3, D, 0, 3)&quot;</span> &lt;&lt;C.<span class="built_in">compare</span>(<span class="number">0</span>, <span class="number">3</span>, D, <span class="number">0</span>, <span class="number">3</span>) &lt;&lt; endl;    <span class="comment">// 结果：0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="s-push-back"><a href="#s-push-back" class="headerlink" title="s.push_back()"></a><code>s.push_back()</code></h3></li><li><h3 id="s-erase"><a href="#s-erase" class="headerlink" title="s.erase()"></a><strong><code>s.erase()</code></strong></h3></li></ul><blockquote><ul><li>c语言里没有**<code>string</code><strong>型的，</strong><code>string</code><strong>在c++里面。但有时候在c++里要用</strong><code>scanf()</code>** 和 **<code>printf()</code><strong>输入输出</strong><code>string</code>**型字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s[<span class="number">0</span>]); <span class="comment">//不能用&amp;s</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>**<code>printf</code>**输出 <strong><code>string s</code></strong> 类的字符串，可以使用 <strong>string</strong> 的成员函数 <strong><code>s.c_str()</code></strong> ，该函数返回字符串的首字符的地址</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vector-数组&quot;&gt;&lt;a href=&quot;#vector-数组&quot; class=&quot;headerlink&quot; title=&quot;vector 数组&quot;&gt;&lt;/a&gt;vector 数组&lt;/h1&gt;&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;vector&amp;lt;ElementType&amp;gt; v;&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 这里的&lt;code&gt;ElementType&lt;/code&gt;可以是&lt;strong&gt;任意类型&lt;/strong&gt;，例如 int、double、char、结构体等，也可以是STL标准容器，例如vector、set、queue等。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; v;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		 定义一个向量v，**&lt;font color=&#39;red&#39;&gt;大小为0&lt;/font&gt;** &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; v;   v.resize(8);&lt;/code&gt;&lt;/strong&gt; 	&lt;/p&gt;
&lt;p&gt;  先定义⼀个向量v，然后**&lt;font color=&#39;red&#39;&gt;将长度resize为8&lt;/font&gt;**，默认这8个元素都是0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; v(10);&lt;/code&gt;&lt;/strong&gt;	 &lt;/p&gt;
&lt;p&gt;   定义具有10个int元素的向量v，**&lt;font color=&#39;red&#39;&gt;默认这10个元素值都为0&lt;/font&gt;**&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>引用符号&amp;</title>
    <link href="http://example.com/2023/10/12/%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7&amp;/"/>
    <id>http://example.com/2023/10/12/%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7&amp;/</id>
    <published>2023-10-12T05:28:27.000Z</published>
    <updated>2023-10-12T05:49:46.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用符号"><a href="#引用符号" class="headerlink" title="引用符号&amp;"></a>引用符号&amp;</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>C++里面的引用时在变量名之前加一个<code>&amp;</code>符号，比如在函数传入的参数中<code>int &amp;a</code>,那么对这个引用变量<code>a</code>做的所以操作都是直接对传入的原变量进行操作，并没有像原来<code>int a</code>一样只是拷贝一个副本（传值）</p><span id="more"></span><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span><span class="comment">//传入的是n的引用，相当于直接对n进行了操作,只不过在func函数中换了个名字叫a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">func</span>(n);<span class="comment">//n由0变成了99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span><span class="comment">//传入的是0这个值，并不会改变main函数中n的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">func</span>(n);<span class="comment">//并不会改变n的值，n还是0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引用符号&quot;&gt;&lt;a href=&quot;#引用符号&quot; class=&quot;headerlink&quot; title=&quot;引用符号&amp;amp;&quot;&gt;&lt;/a&gt;引用符号&amp;amp;&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;C++里面的引用时在变量名之前加一个&lt;code&gt;&amp;amp;&lt;/code&gt;符号，比如在函数传入的参数中&lt;code&gt;int &amp;amp;a&lt;/code&gt;,那么对这个引用变量&lt;code&gt;a&lt;/code&gt;做的所以操作都是直接对传入的原变量进行操作，并没有像原来&lt;code&gt;int a&lt;/code&gt;一样只是拷贝一个副本（传值）&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>hello 算法</title>
    <link href="http://example.com/2023/10/03/hello%20%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/10/03/hello%20%E7%AE%97%E6%B3%95/</id>
    <published>2023-10-03T07:27:16.000Z</published>
    <updated>2023-10-03T07:27:12.041Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hello-algo.com/">Hello 算法 (hello-algo.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.hello-algo.com/&quot;&gt;Hello 算法 (hello-algo.com)&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【318家国家5A级风景区】</title>
    <link href="http://example.com/2023/10/03/5A%E6%99%AF%E5%8C%BA/"/>
    <id>http://example.com/2023/10/03/5A%E6%99%AF%E5%8C%BA/</id>
    <published>2023-10-03T01:46:27.000Z</published>
    <updated>2023-10-03T01:54:46.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030939877.jpeg" alt="img"></p><span id="more"></span><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030949257.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030939648.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030939378.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030939756.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030940425.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030940146.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030940323.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030940140.jpeg" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030950797.jpeg" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202310030939877.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="旅游" scheme="http://example.com/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>【排序】</title>
    <link href="http://example.com/2023/09/29/%E3%80%90%E6%8E%92%E5%BA%8F%E3%80%91/"/>
    <id>http://example.com/2023/09/29/%E3%80%90%E6%8E%92%E5%BA%8F%E3%80%91/</id>
    <published>2023-09-29T00:15:27.000Z</published>
    <updated>2023-09-29T02:40:50.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序<img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900163.png" alt="img"></h1><span id="more"></span><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p> <code>void XSort ( ElementType A[], int N )</code></p><ul><li>为简单起见，讨论**<font color='red'>从小大的整数</font>**排序</li><li>只讨论基于比较的排序（&gt; &#x3D; &lt; 有定义）</li><li>&#x3D;&#x3D;<strong>没有一种排序是任何情况下都表现最好的</strong>&#x3D;&#x3D;</li></ul><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290857254.png" alt="image-20230929085748167"></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900164.png" alt="image-20221021191151215"></p><blockquote><p>注：</p><ol><li>直接插入排序是从**<font color='red'>第二个元素</font>**开始的</li><li>直接插入排序**<code>L</code><strong>趟后，前</strong><code>L+1</code><strong>个元素是</strong><font color='blue'>有序的</font>**。</li><li>总共需要&#x3D;&#x3D;<strong><font color='blue'>n-1</font></strong>&#x3D;&#x3D;趟排序</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ElementType t = A[i];<span class="type">int</span> j=i<span class="number">-1</span>;<span class="comment">//t为待插入元素</span></span><br><span class="line"><span class="comment">//寻找待插入元素的位置，同时移动元素</span></span><br><span class="line"><span class="keyword">while</span>( A[j] &gt; t &amp;&amp; j &gt;= <span class="number">0</span> )<span class="comment">//必须是t&lt;a[j]，不能是a[i]&lt;a[j] </span></span><br><span class="line">        &#123;</span><br><span class="line">            A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">A[j+<span class="number">1</span>] = t;<span class="comment">//j+1即为待插入的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong><code>while( a[j] &gt; t &amp;&amp; j &gt;= 0 )</code><strong>决定了该算法是</strong><font color='red'>稳定的排序算法</font></strong></li><li>移动位置时**<font color='blue'>从后往前</font>**移动</li></ol></blockquote><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900165.png" alt="image-20221021194038472" style="zoom:70%;" /><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900166.png" alt="image-20221021194054276"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900167.png" alt="image-20221021194336606"></p><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900168.png" alt="image-20221021194551088"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900169.png" alt="image-20221208164824621"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BinarySearch</span><span class="params">(ElementType A[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] == t)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; t)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ModInsertSort</span><span class="params">(ElementType A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = A[i];</span><br><span class="line">        <span class="comment">// 折半插入排序采用--折半查找</span></span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">BinarySearch</span>(A, <span class="number">0</span>, i - <span class="number">1</span>, t);</span><br><span class="line">        <span class="comment">// 从后往前移动</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= k; j--)</span><br><span class="line">            A[j + <span class="number">1</span>] = A[j];</span><br><span class="line">        A[k] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：折半插入排序采用–折半查找，查找效率提高，但**<font color='blue'>元素移动次数不变</font><strong>（</strong><font color='blue'>元素比较次数减少</font><strong>），仅仅将</strong><font color='red'>分散移动</font><strong>改为</strong><font color='red'>集体移动</font>**     </p></blockquote><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="思想：缩小增量排序"><a href="#思想：缩小增量排序" class="headerlink" title="思想：缩小增量排序"></a>思想：缩小增量排序</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900170.png" alt="image-20221208165741872"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900171.png" alt="image-20221208183557556"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(ElementType A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=gap; i&lt;n; i++) <span class="comment">//插入排序,从第二个元素开始,对所有组进行</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElementType t=A[i];<span class="type">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = i-gap; j &gt;= <span class="number">0</span> &amp;&amp; t &lt; A[j]; j -= gap) <span class="comment">//从后往前移动</span></span><br><span class="line">                A[j+gap]=A[j];</span><br><span class="line">            A[j+gap]=t;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>冒泡排序一趟后，<font color='red'><strong>最大元素沉底</strong></font>且<strong>位于最终位置</strong></li><li>总共需要**<font color='blue'>n-1</font>**趟</li></ul><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>冒泡法排序：（数字&#x2F;字符） </p><ol><li>相邻两个元素作比较，大的元素放在后面，</li><li>对n个数进行排序<font color='blue'><strong>需n-1次排序</strong></font></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(ElementType A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++) <span class="comment">//n-1次排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> j=<span class="number">0</span>; j&lt;n-i; j++)</span><br><span class="line"><span class="keyword">if</span>( A[j] &gt; A[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t=A[j];A[j]=A[j+<span class="number">1</span>];A[j+<span class="number">1</span>]=t;<span class="comment">// swap(A[j],A[j+1]);</span></span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若某一趟排序中没有元素交换,则说明所有元素已经有序，不需要再排序</span></span><br><span class="line"><span class="keyword">if</span> (flag)<span class="keyword">return</span>;<span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="法一（推荐）"><a href="#法一（推荐）" class="headerlink" title="法一（推荐）"></a>法一（推荐）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Median3</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (A[left] &gt; A[mid])</span><br><span class="line">        <span class="built_in">swap</span>(A[left], A[mid]);</span><br><span class="line">    <span class="keyword">if</span> (A[left] &gt; A[right])</span><br><span class="line">        <span class="built_in">swap</span>(A[left], A[right]);</span><br><span class="line">    <span class="keyword">if</span> (A[mid] &gt; A[right])</span><br><span class="line">        <span class="built_in">swap</span>(A[mid], A[right]);</span><br><span class="line">    <span class="built_in">swap</span>(A[mid], A[left]); <span class="comment">// 把中值放在数组的首位，便于取主元</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Median3</span>(A, left, right);</span><br><span class="line">    <span class="type">int</span> k = left;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//必须是先right再left</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; A[right] &gt;= A[k])</span><br><span class="line">            right--;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; A[left] &lt;= A[k])</span><br><span class="line">            left++;</span><br><span class="line">        <span class="built_in">swap</span>(A[left], A[right]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(A[k], A[right]); <span class="comment">// swap(A[k], A[left]);也可以</span></span><br><span class="line">    <span class="keyword">return</span> right;<span class="comment">// return left;也可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">partition</span>(A, left, right);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A, left, pivot - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A, pivot + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">QuickSort</span>(A, <span class="number">0</span>, n<span class="number">-1</span>);<span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Median3</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(A[left] &gt; A[mid])</span><br><span class="line">        <span class="built_in">swap</span>(A[left],A[mid]);</span><br><span class="line">    <span class="keyword">if</span>(A[left]&gt;A[right])</span><br><span class="line">        <span class="built_in">swap</span>(A[left],A[right]);</span><br><span class="line">    <span class="keyword">if</span>(A[mid]&gt;A[right])</span><br><span class="line">        <span class="built_in">swap</span>(A[mid],A[right]);    </span><br><span class="line">    <span class="built_in">swap</span>(A[mid],A[left]);<span class="comment">//把中值放在数组的首位，便于取主元</span></span><br><span class="line">    <span class="keyword">return</span> A[left];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">Median3</span>(A,left,right);</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; A[right]&gt;=t)</span><br><span class="line">            right--;</span><br><span class="line">        A[left]=A[right];</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; A[left]&lt;=t)</span><br><span class="line">          left++;</span><br><span class="line">        A[right]=A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    A[left]=t;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivot=<span class="built_in">partition</span>(A,left,right);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,left,pivot<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,pivot+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">QuickSort</span>(A, <span class="number">0</span>, n<span class="number">-1</span>);<span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="type">int</span> min=i;<span class="comment">//min是用来记录a[i]后面最小元素的下标</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line"><span class="keyword">if</span>(A[j]&lt;A[min])</span><br><span class="line">min=j;</span><br><span class="line"><span class="keyword">if</span>(min!=i)</span><br><span class="line"><span class="built_in">swap</span>(A[i],A[min]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul><li><h3 id="以大根堆为例"><a href="#以大根堆为例" class="headerlink" title="以大根堆为例"></a>以<font color='purple'>大根堆</font>为例</h3></li></ul><blockquote><p>堆排序**<code>ElementType A[]</code>从<code>A[1]</code><font color='red'>开始存储</font><strong>，</strong><font color='blue'>A[0]充当哨兵</font>**</p><ul><li><p><strong><font color='red'>A[1]到A[n]</font><strong>存储</strong><font color='cyan'>待排元素</font></strong></p></li><li><p>此时堆满足：</p></li></ul><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900172.png" alt="image-20221208224655254"></p></blockquote><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><ol><li>构造初始堆：将给定的无序序列构造成**<font color='red'>大根堆</font>**：A[1] 、A[2]……..A[n]；</li><li>将堆顶元素A[1]与末尾元素进行交换，使末尾元素最大；</li><li>然后再将A[ ]调整为最大堆，重复步骤2，反复调整、交换、调整，直到整个序列有序</li></ol><h3 id="筛选算法"><a href="#筛选算法" class="headerlink" title="筛选算法"></a>筛选算法</h3><h4 id="上滤"><a href="#上滤" class="headerlink" title="上滤"></a>上滤</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(ElementType A[],<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType t = A[s];</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=s/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i/=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt;= t)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;A[s]=A[i];s=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[s]=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>下滤</font>：用于<font color='blue'>删除堆顶元素</font>后，调整堆</strong></p></blockquote><h4 id="下滤"><a href="#下滤" class="headerlink" title="下滤"></a>下滤</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(ElementType A[],<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType t = A[s];</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">2</span>*s; i&lt;=n; i*=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n &amp;&amp; A[i]&lt;A[i+<span class="number">1</span>])<span class="comment">//i&lt;n说明A[i+1]存在</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(t &gt;= A[i])<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;A[s]=A[i];s=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[s]=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>下滤</font>：用于<font color='blue'>删除堆顶元素</font>后，调整堆</strong></p></blockquote><hr><hr><hr><blockquote><p>从**<font color='red'>最后一个非终端结点</font>**开始建堆；</p><ul><li>n个结点 ,最后一个非终端结点的下标是 <img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900173.png" alt="image-20221208235618668"></li><li>归并排序采用**<font color='blue'>下滤筛选</font>**算法</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调整为初始堆</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=n/<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(A,n,i);</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=n; i&gt;<span class="number">1</span>; i--)  <span class="comment">//i表示当前最大堆的末尾元素，也是当前堆的大小</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//堆顶元素A[1]与末尾元素A[i]交换，使最大元素沉底        </span></span><br><span class="line">        ElementType t=A[i];A[i]=A[<span class="number">1</span>];A[<span class="number">1</span>]=t;</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(A,i<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900174.png" alt="image-20221209083227737"></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900175.png" alt="image-20221209083336292"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900176.jpg" alt="微信图片_20221209083037"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(ElementType A[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType B[n]; <span class="comment">// 构造辅助数组B,n为A数组大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++)</span><br><span class="line">        B[i] = A[i]; <span class="comment">// 复制A中元素到B中</span></span><br><span class="line">    <span class="type">int</span> i = low, j = mid + <span class="number">1</span>, k = low;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (B[i] &lt;= B[j])</span><br><span class="line">            A[k++] = B[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            A[k++] = B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有剩余元素，则一一复制到数组A中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        A[k++] = B[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">        A[k++] = B[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(ElementType A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(A, low, mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(A, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">Merge</span>(A, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MergeSort</span>(A, <span class="number">0</span>, n - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900177.png" alt="image-20221209090502894"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900178.png" alt="image-20221209090418302"></p><h3 id="算法-3"><a href="#算法-3" class="headerlink" title="算法"></a>算法</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900179.png" alt="image-20221209091734211"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Radix</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(k/<span class="built_in">pow</span>(<span class="number">10</span>,p<span class="number">-1</span>)%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RadixSort</span><span class="params">(ElementType A[],<span class="type">int</span> figure,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> pass=<span class="number">1</span>; pass&lt;=figure; pass++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900180.png" alt="img"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900181.jpg" alt="13315216532604079"></p><blockquote><ul><li>不稳定排序：**<font color='red'>选择排序，希尔排序，快速排序，堆排序</font>**</li></ul></blockquote><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900182.png" alt="image-20221111123448323"></p><h3 id="问题抽象"><a href="#问题抽象" class="headerlink" title="问题抽象"></a>问题抽象</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900183.png" alt="image-20221111123540642"></p><h3 id="算法-4"><a href="#算法-4" class="headerlink" title="算法"></a>算法</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900184.png" alt="image-20221111123621514"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(ElementType A[i],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>, j=n, h=<span class="number">1</span>;<span class="comment">//h代表颜色</span></span><br><span class="line">    <span class="keyword">while</span>(h&lt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>( i&lt;j &amp;&amp; A[i].key==h )</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">while</span>( i&lt;j &amp;&amp; A[j].key!=h )</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            &#123;ElementType t=A[i];A[i]=A[j];A[j]=t;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j=n;h++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>此题采用了———**<font color='red'>快速排序</font>**的部分思想</p></blockquote><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900185.png" alt="image-20221211154954610"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="下滤筛选"><a href="#下滤筛选" class="headerlink" title="下滤筛选"></a>下滤筛选</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(ElementType A[],<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType t = A[s];</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">2</span>*s; i&lt;=n; i*=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n &amp;&amp; A[i] &lt; A[i+<span class="number">1</span>])<span class="comment">//i &lt; n 说明A[i+1]存在</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(t &gt;= A[i])<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;A[s] = A[i];s=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[s]=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆调整"><a href="#堆调整" class="headerlink" title="堆调整"></a>堆调整</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildHeap</span> <span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(A,n,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>下滤</font>：用于<font color='blue'>删除堆顶元素</font>后，调整堆</strong></p></blockquote><h4 id="上滤筛选"><a href="#上滤筛选" class="headerlink" title="上滤筛选"></a>上滤筛选</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(ElementType A[],<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType t = A[s];</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=s/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i/=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt;= t)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;A[s] = A[i];s=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[s]=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆调整-1"><a href="#堆调整-1" class="headerlink" title="堆调整"></a>堆调整</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildHeap</span> <span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(A,n,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>上滤</font>：用于<font color='blue'>向堆中插入一个元素</font></strong></p></blockquote><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><ul><li>&#x3D;&#x3D;<strong><font color='red'>上滤算法</font></strong>  +  <strong><font color='red'>调整算法</font></strong>&#x3D;&#x3D;</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(ElementType A[],<span class="type">int</span> n,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType t = A[s];</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i=s/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i/=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt;= t)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;A[s] = A[i];s=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[s]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildHeap</span> <span class="params">(ElementType A[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">HeapAdjust</span>(A,n,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="重点参考"><a href="#重点参考" class="headerlink" title="重点参考"></a>重点参考</h1></li></ul><p><a href="https://blog.csdn.net/weixin_53011574/article/details/125964731?spm=1001.2014.3001.5506">(72条消息) 数据结构学习笔记（第八章 排序-内部排序）_低调$(生活)的博客-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内部排序&quot;&gt;&lt;a href=&quot;#内部排序&quot; class=&quot;headerlink&quot; title=&quot;内部排序&quot;&gt;&lt;/a&gt;内部排序&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290900163.png&quot; alt=&quot;img&quot;&gt;&lt;/h1&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【对列】</title>
    <link href="http://example.com/2023/09/28/%E3%80%90%E5%AF%B9%E5%88%97%E3%80%91/"/>
    <id>http://example.com/2023/09/28/%E3%80%90%E5%AF%B9%E5%88%97%E3%80%91/</id>
    <published>2023-09-28T13:18:45.000Z</published>
    <updated>2023-09-29T02:38:13.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一：循环队列"><a href="#一：循环队列" class="headerlink" title="一：循环队列"></a>一：循环队列</h1><p>循环队列的引入是为了克服&#x3D;&#x3D;<strong><font color='red'>“假上溢”现象</font></strong>&#x3D;&#x3D;。</p><h3 id="1、存储结构"><a href="#1、存储结构" class="headerlink" title="1、存储结构"></a>1、存储结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">ElementType* base;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color='red'>front和rear</font><strong>是头尾指针（相对于数组），front指向</strong>第一个元素</strong>，rear指向<strong>最后一个元素的&#x3D;&#x3D;<font color='blue'>下一个位置</font>&#x3D;&#x3D;</strong></p></blockquote><span id="more"></span><h3 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(Queue&amp; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.base = <span class="keyword">new</span> ElementType[MASQSIZE];<span class="comment">//开辟空间</span></span><br><span class="line"><span class="keyword">if</span> (!q.base) <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//存储分配失败</span></span><br><span class="line">q.front = q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、入队"><a href="#3、入队" class="headerlink" title="3、入队"></a>3、入队</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(Queue&amp; q, ElementType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((q.rear + <span class="number">1</span>) % MAXQSIZE == q.front)</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//队满</span></span><br><span class="line">q.base[q.rear] = e;</span><br><span class="line">q.rear = (q.rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、出队"><a href="#3、出队" class="headerlink" title="3、出队"></a>3、出队</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(Queue&amp; q, ElementType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q.front == q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//队空</span></span><br><span class="line">e = q.base[q.front];</span><br><span class="line">q.front = (q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、队列长度"><a href="#4、队列长度" class="headerlink" title="4、队列长度"></a>4、队列长度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueLength</span><span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( q.rear - q.front + MAXQSIZE ) % MAXQSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、队满"><a href="#5、队满" class="headerlink" title="5、队满"></a>5、队满</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueFull</span><span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( q.rear + <span class="number">1</span> ) % MAXQSIZE == q.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、链队列"><a href="#二、链队列" class="headerlink" title="二、链队列"></a>二、链队列</h1><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282119858.png" alt="image-20230928211711116"></p><blockquote><p><strong><font color='red'>链队</font><strong>带</strong><font color='blue'>头结点</font></strong></p></blockquote><h3 id="1、存储结构-1"><a href="#1、存储结构-1" class="headerlink" title="1、存储结构"></a>1、存储结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">ElementType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">Node* front;<span class="comment">//队头指针</span></span><br><span class="line">Node* rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="2、链队的初始化"><a href="#2、链队的初始化" class="headerlink" title="2、链队的初始化"></a>2、链队的初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(Queue&amp; Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.front = Q.rear = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span>(!Q.front) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、链队的入队"><a href="#3、链队的入队" class="headerlink" title="3、链队的入队"></a>3、链队的入队</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282119834.png" alt="image-20230928211729867"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(Queue&amp; Q, ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//存储分配失败</span></span><br><span class="line">p-&gt;data = x;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//头插法    </span></span><br><span class="line">Q.rear-&gt;next = p;</span><br><span class="line">Q.rear = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、链队的出队"><a href="#4、链队的出队" class="headerlink" title="4、链队的出队"></a>4、链队的出队</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282119867.png" alt="image-20230928211745037"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(Queue&amp; Q, ElementType&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//队列为空</span></span><br><span class="line">p = Q.front-&gt;next;<span class="comment">//p指向队头元素</span></span><br><span class="line">x = p-&gt;data;<span class="comment">//e保存队头元素的值</span></span><br><span class="line">Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p)<span class="comment">//如果最后一个元素被删，则队尾指针为空</span></span><br><span class="line">Q.rear = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放原队头元素的空间</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><pre><code>    如果队列Q中==**&lt;font color=&#39;red&#39;&gt;最后一个元素被删除&lt;/font&gt;**==了，则队列中没有元素了，- **`Q.rear`**不指向任何元素，要修改并赋值**`NULL`**- **`Q.front`**由于是**&lt;font color=&#39;red&#39;&gt;头结点&lt;/font&gt;**，所以其值始终不会改变</code></pre></blockquote><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282119854.png" alt="image-20221216122834047"></p><blockquote><p>**<font color='red'>不设置头结点</font>**，就必须考虑</p><ol><li>初始时&#x3D;&#x3D;<strong><font color='blue'>链表是否为空</font></strong>&#x3D;&#x3D;</li><li>是否在**<font color='orange'>第一个结点前插入新结点</font>**</li><li>是否**<font color='red'>删除</font><strong>结点后</strong><font color='blue'>链表为空</font>**</li></ol></blockquote><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282119888.jpeg" alt="13315216532604079"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(node* rear,ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* p=<span class="keyword">new</span> node;</span><br><span class="line">    p-&gt;data=x;</span><br><span class="line">    <span class="keyword">if</span>(rear==<span class="literal">NULL</span>)<span class="comment">//队列为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next=p;</span><br><span class="line">        rear=p;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next=rear-&gt;next;</span><br><span class="line">        rear-&gt;next=p;</span><br><span class="line">        rear=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">status <span class="title">DeQueue</span><span class="params">(ElementType &amp;x,node* rear)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear==<span class="literal">NULL</span>)<span class="keyword">return</span> ERROR;       </span><br><span class="line">    node* p=rear-&gt;next;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(p==rear)<span class="comment">//删除后队列为空</span></span><br><span class="line">        rear=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rear-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一：循环队列&quot;&gt;&lt;a href=&quot;#一：循环队列&quot; class=&quot;headerlink&quot; title=&quot;一：循环队列&quot;&gt;&lt;/a&gt;一：循环队列&lt;/h1&gt;&lt;p&gt;循环队列的引入是为了克服&amp;#x3D;&amp;#x3D;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;“假上溢”现象&lt;/font&gt;&lt;/strong&gt;&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;h3 id=&quot;1、存储结构&quot;&gt;&lt;a href=&quot;#1、存储结构&quot; class=&quot;headerlink&quot; title=&quot;1、存储结构&quot;&gt;&lt;/a&gt;1、存储结构&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; MAXQSIZE 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ElementType* base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; front;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rear;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;Queue;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;front和rear&lt;/font&gt;&lt;strong&gt;是头尾指针（相对于数组），front指向&lt;/strong&gt;第一个元素&lt;/strong&gt;，rear指向&lt;strong&gt;最后一个元素的&amp;#x3D;&amp;#x3D;&lt;font color=&#39;blue&#39;&gt;下一个位置&lt;/font&gt;&amp;#x3D;&amp;#x3D;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ALV树画法</title>
    <link href="http://example.com/2023/09/28/AVL%E6%A0%91%E7%94%BB%E6%B3%95/"/>
    <id>http://example.com/2023/09/28/AVL%E6%A0%91%E7%94%BB%E6%B3%95/</id>
    <published>2023-09-28T12:36:49.000Z</published>
    <updated>2023-10-03T01:57:57.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AVL树画法"><a href="#AVL树画法" class="headerlink" title="AVL树画法"></a>AVL树画法</h1><h2 id="基本理论："><a href="#基本理论：" class="headerlink" title="基本理论："></a><strong>基本理论：</strong></h2><h3 id="一：AVL树的前身"><a href="#一：AVL树的前身" class="headerlink" title="一：AVL树的前身"></a>一：AVL树的前身</h3><p>平衡二叉树（AVL树）的前身是<strong>二叉排序树（二叉查找树）</strong>。</p><blockquote><p>二叉排序树的一个重要性质：左子树上的所有结点都小于根结点，右子树上的所有结点都大于根节点。<strong>简而言之，左小右大。</strong></p></blockquote><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916761.jpeg" alt="img"></p><p>​图1</p><span id="more"></span><p>如图1。10左边的数都比它小，右边的数都比它大。对于9和15来说也是一样。<strong>所以如果要插入一个数字14，那么该如何做呢？</strong></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916545.webp" alt="img"></p><p>​图2</p><p>如图2。14比10大，所以在10的右边。比15小，所以在15的左边。比12大，所以在12的右边。</p><h3 id="二、何来“平衡”？"><a href="#二、何来“平衡”？" class="headerlink" title="二、何来“平衡”？"></a>二、何来“平衡”？</h3><p>引入概念，<strong>平衡因子。即左子树与右子树的高度（深度）差。</strong>请为上图，标上平衡因子。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916731.webp" alt="img"></p><p>​图3</p><p>如图3所示。<strong>平衡二叉树要求平衡因子的绝对值不大于1</strong>，所以该图就是一个标准的平衡二叉树。</p><hr><h3 id="三：不平衡与旋转："><a href="#三：不平衡与旋转：" class="headerlink" title="三：不平衡与旋转："></a>三：<strong>不平衡与旋转：</strong></h3><p><strong>不平衡即出现了绝对值大于1的平衡因子。</strong></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916119.webp" alt="img"></p><p>​图4（LL旋转）</p><p>插入3之后，9的平衡因子变为2。<strong>二叉树失去平衡，需要通过旋转来重新平衡。</strong></p><h3 id="四：旋转类型的判定："><a href="#四：旋转类型的判定：" class="headerlink" title="四：旋转类型的判定："></a>四：<strong>旋转类型的判定：</strong></h3><p><font color='red'><strong>离插入点最近的</strong></font>，平衡因子的绝对值大于1的点称为<strong>失衡点</strong>。</p><p>&#x3D;&#x3D;<font color='blue'><strong>从失衡点开始，沿树“寻找”插入点。且只记录“寻找”的前两步的路径方向。由此判定旋转类型。</strong></font>&#x3D;&#x3D;</p><p>以图4为例。插入点为3，失衡点为9。从9开始，“寻找”3。<strong>发现3在9的左子树的左子树上。</strong>将路径简记为“左左”。所以需要<strong>LL旋转</strong>。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916606.webp" alt="img"></p><p>​图5（LR旋转）</p><p>如图5。从失衡点5开始，“寻找”插入点4。将路径简记为“左右”。所以需要<strong>LR旋转</strong>。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916620.webp" alt="img"></p><p>​图6（RR旋转）</p><p>如图6。“寻找”路径简记为“右右”。所以需要<strong>RR旋转</strong>。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916869.webp" alt="img"></p><p>​图7（RL旋转）</p><p>如图7。“寻找”路径简记为“右左”。所以需要<strong>RL旋转</strong>。</p><hr><h2 id="旋转方法："><a href="#旋转方法：" class="headerlink" title="旋转方法："></a><strong>旋转方法：</strong></h2><p>方法与旋转类型无关。且一种方法就可应对四种旋转类型。</p><p><strong><font color='red'>从失衡点开始，经过两步“寻找”，则必然遇到两个结点。加上失衡点，总共三个结点。</font>假设为A、B、C，并规定A&lt;B&lt;C。将这三个结点单独拿出来。把其中的“中位数”B作为根结点，A作为B的左子树，C作为B的右子树，构建一个新的平衡二叉树。并将该新树的根B放到原来的失衡点上。其中，A和C的子树不动。【当B原来的左子树根≠A时，把它接到A的右边。当B原来的右子树根≠C时，把它接到C的左边。】</strong>（框内步骤不一定会用到，需要具体问题具体分析。）</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916234.webp" alt="img"></p><p>旋转方法图解</p><p>问：那A原来的右子树和C原来的左子树怎么办？</p><p>答：它们不存在，或者A原来的右子树根&#x3D;B or C，C原来的左子树根&#x3D;A or B。</p><p>问：B的右子树恰好是C</p><p>答：这个时候就<strong>不用将</strong>B的右子树“顺理成章”的放在新树C的左边了</p><h3 id="具体示例："><a href="#具体示例：" class="headerlink" title="具体示例："></a><strong>具体示例：</strong></h3><p><strong>1.将图4重新平衡</strong></p><p>失衡点为9。<strong>“寻找”路径上的三个点为9、4、3。取“中位数”4为树根，</strong>生成新的平衡二叉树。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916846.webp" alt="img"></p><p>把树根4替换到失衡点上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916902.webp" alt="img"></p><p>二叉树重新获得平衡。</p><p>*<strong>2.画出以序列{25,27,30,12,11,18,14,20,15,22}构造的一棵平衡二叉树*</strong></p><p>首先，<strong>按照左小右大的原则，画二叉树。依次插入25,27,30。</strong></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916188.webp" alt="img"></p><p>插入30后，二叉树失衡。显然，需要进行<strong>RR旋转。</strong>取“中位数”27作树根，25作左子树，30作右子树，生成新的平衡二叉树。并替换到失衡点25上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916309.webp" alt="img"></p><p>继续插入12，11。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916724.webp" alt="img"></p><p>插入11后，二叉树又失衡了。显然，需要进行<strong>LL旋转。</strong>取“中位数”12作树根，11作左子树，25作右子树，生成新的平衡二叉树。并替换到失衡点25上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916723.webp" alt="img"></p><p>继续插入18。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916161.webp" alt="img"></p><p>插入18后，二叉树双失衡了。插入点为18，失衡点为27。“寻找”路径记为“左右”，因此需要<strong>LR旋转</strong>。<strong>在27,12,25中</strong>，取“中位数”25作树根，12作左子树，27作右子树，生成新的平衡二叉树。<strong>且25的左子树根18“顺理成章”地放在12的右侧。</strong>（不懂请看旋转方法图解）并替换到失衡点27上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915364.webp" alt="img"></p><p>继续插入14，20，15。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915337.webp" alt="img"></p><p>插入15后，二叉树叒失衡了。插入点为15，失衡点为12。“寻找”路径记为“右左”，因此需要<strong>RL旋转</strong>。<strong>在12,18,14中</strong>，取“中位数”14作树根，12作左子树，18作右子树，生成新的平衡二叉树。<strong>且14的右子树根15“顺利成章”地放在18的左侧。</strong>（不懂请看旋转方法图解）并替换到失衡点12上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915412.webp" alt="img"></p><p>最后插入22。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915594.webp" alt="img"></p><p>插入22后，二叉树叕失衡了。插入点为22，失衡点为25。“寻找”路径记为“左右”，因此需要<strong>LR旋转</strong>。<strong>在25,14,18中</strong>，取“中位数”18作树根，14作左子树，25作右子树，生成新的平衡二叉树。<strong>且18的左子树根15“顺理成章”地放在14的右侧，18的右子树根20“顺利成章”地放在25的左侧。</strong>（不懂请看旋转方法图解）并替换到失衡点25上。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915415.webp" alt="img"></p><p>最终的平衡二叉树，如图。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915234.png" alt="image-20221111200549327"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290915235.jpg" alt="59b2f7b53f3380a64c814219d3e04bb"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;AVL树画法&quot;&gt;&lt;a href=&quot;#AVL树画法&quot; class=&quot;headerlink&quot; title=&quot;AVL树画法&quot;&gt;&lt;/a&gt;AVL树画法&lt;/h1&gt;&lt;h2 id=&quot;基本理论：&quot;&gt;&lt;a href=&quot;#基本理论：&quot; class=&quot;headerlink&quot; title=&quot;基本理论：&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本理论：&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;一：AVL树的前身&quot;&gt;&lt;a href=&quot;#一：AVL树的前身&quot; class=&quot;headerlink&quot; title=&quot;一：AVL树的前身&quot;&gt;&lt;/a&gt;一：AVL树的前身&lt;/h3&gt;&lt;p&gt;平衡二叉树（AVL树）的前身是&lt;strong&gt;二叉排序树（二叉查找树）&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉排序树的一个重要性质：左子树上的所有结点都小于根结点，右子树上的所有结点都大于根节点。&lt;strong&gt;简而言之，左小右大。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290916761.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;​															图1&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【串】</title>
    <link href="http://example.com/2023/09/28/%E3%80%90%E4%B8%B2%E3%80%91/"/>
    <id>http://example.com/2023/09/28/%E3%80%90%E4%B8%B2%E3%80%91/</id>
    <published>2023-09-28T12:36:49.000Z</published>
    <updated>2023-09-29T02:40:35.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><h2 id="模式串匹配算法"><a href="#模式串匹配算法" class="headerlink" title="模式串匹配算法"></a>模式串匹配算法</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041971.png" alt="image-20221110210307366"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041953.png" alt="image-20221110210326808"></p><span id="more"></span><h3 id="next函数算法"><a href="#next函数算法" class="headerlink" title="next函数算法"></a>next函数算法</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041149.png" alt="image-20221110210506712"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041095.png" alt="image-20221110210707246"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(string T,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;<span class="type">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||T[i]==T[j])</span><br><span class="line">        &#123;i++;j++;next[i]=j;&#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模式串next函数**<font color='red'>从1号单元开始，0号单元存放串的长度</font>**</p></blockquote><hr><hr><hr><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string S, string T, <span class="type">int</span> pos, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=pos, j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S[<span class="number">0</span>] &amp;&amp; j&lt;=T[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> || S[i]==T[j])</span><br><span class="line">        &#123;i++;j++;&#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        j=next[j];<span class="comment">//i不变，j后退</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(j&gt;T[<span class="number">0</span>])<span class="comment">//匹配成功</span></span><br><span class="line">        <span class="keyword">return</span> i-T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>若匹配成功，返回<strong>模式串T</strong>在<strong>目标串S</strong>中**<font color='red'>首次出现的有效位移</font>**</li><li>若匹配失败，返回1</li></ol></blockquote><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041230.jpeg" alt="307d2ae478633f0ab69b5f4ea7662e1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsReverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断输入的字符串中‘&amp;’前后两部分是否为逆串，是则返回1，否则返回0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;s;<span class="type">char</span> c,t;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())!=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        s.<span class="built_in">push</span>(c);</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())!=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        t=s.<span class="built_in">top</span>();s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t!=c)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!s.<span class="built_in">empty</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>判断是否为逆序通常需要使用**<code>stack</code>**</li><li>注意<strong>第9，第13行</strong>。</li></ol></blockquote><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p> <strong>1095 解码PAT准考证</strong></p><p><strong>题目</strong></p><p>PAT 准考证号由 4 部分组成：</p><ul><li>第 1 位是级别，即 <code>T</code> 代表顶级；<code>A</code> 代表甲级；<code>B</code> 代表乙级；</li><li>第 2~4 位是考场编号，范围从 101 到 999；</li><li>第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；</li><li>最后 11~13 位是考生编号，范围从 000 到 999。</li></ul><p>现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。</p><p><strong>输入格式：</strong></p><p>输入首先在一行中给出两个正整数 <em>N</em>（≤104）和 <em>M</em>（≤100），分别为考生人数和统计要求的个数。</p><p>接下来 <em>N</em> 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。</p><p>考生信息之后，再给出 <em>M</em> 行，每行给出一个统计要求，格式为：<code>类型 指令</code>，其中</p><ul><li><code>类型</code> 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 <code>指令</code> 则给出代表指定级别的字母；</li><li><code>类型</code> 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 <code>指令</code> 则给出指定考场的编号；</li><li><code>类型</code> 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 <code>指令</code> 则给出指定日期，格式与准考证上日期相同。</li></ul><p><strong>输出格式：</strong></p><p>对每项统计要求，首先在一行中输出 <code>Case #: 要求</code>，其中 <code>#</code> 是该项要求的编号，从 1 开始；<code>要求</code> 即复制输入给出的要求。随后输出相应的统计结果：</p><ul><li><code>类型</code> 为 1 的指令，输出格式与输入的考生信息格式相同，即 <code>准考证号 成绩</code>。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；</li><li><code>类型</code> 为 2 的指令，按 <code>人数 总分</code> 的格式输出；</li><li><code>类型</code> 为 3 的指令，输出按人数非递增顺序，格式为 <code>考场编号 总人数</code>。若人数并列则按考场编号递增顺序输出。</li></ul><p>如果查询结果为空，则输出 <code>NA</code>。</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">8 4</span><br><span class="line">B123180908127 99</span><br><span class="line">B102180908003 86</span><br><span class="line">A112180318002 98</span><br><span class="line">T107150310127 62</span><br><span class="line">A107180908108 100</span><br><span class="line">T123180908010 78</span><br><span class="line">B112160918035 88</span><br><span class="line">A107180908021 98</span><br><span class="line">1 A</span><br><span class="line">2 107</span><br><span class="line">3 180908</span><br><span class="line">2 999</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 1 A</span><br><span class="line">A107180908108 100</span><br><span class="line">A107180908021 98</span><br><span class="line">A112180318002 98</span><br><span class="line">Case 2: 2 107</span><br><span class="line">3 260</span><br><span class="line">Case 3: 3 180908</span><br><span class="line">107 2</span><br><span class="line">123 2</span><br><span class="line">102 1</span><br><span class="line">Case 4: 2 999</span><br><span class="line">NA</span><br></pre></td></tr></table></figure><p>代码长度限制</p><p>16 KB</p><p>时间限制</p><p>200 ms</p><p>内存限制</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    string t;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node &amp;a, node &amp;b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value != b.value ? a.value &gt; b.value : a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;node&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; v[i].t &gt;&gt; v[i].value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; num &gt;&gt; s;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d %s\n&quot;</span>, i, num, s.<span class="built_in">c_str</span>());      <span class="comment">//Attention!    s.c_str()</span></span><br><span class="line">        vector&lt;node&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (v[j].t[<span class="number">0</span>] == s[<span class="number">0</span>])      ans.<span class="built_in">push_back</span>(v[j]); <span class="comment">//S[0]即为字符‘A’....</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(),cmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans.<span class="built_in">size</span>(); j++)    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, ans[j].t.<span class="built_in">c_str</span>(), ans[j].value);</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">0</span>)     <span class="built_in">printf</span>(<span class="string">&quot;NA\n&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">2</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[j].t.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>) == s) </span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    sum += v[j].value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt)   <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, cnt, sum);</span><br><span class="line">            <span class="keyword">else</span>       <span class="built_in">printf</span>(<span class="string">&quot;NA\n&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">3</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            unordered_map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (v[j].t.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">6</span>) == s)   m[v[j].t.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>)]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : m)   </span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;it.first, it.second&#125;);   <span class="comment">//Attention!!   &#123;it.first,it.second&#125;直接插入结构体</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(),cmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans.<span class="built_in">size</span>(); j++)    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, ans[j].t.<span class="built_in">c_str</span>(), ans[j].value);</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">0</span>)     <span class="built_in">printf</span>(<span class="string">&quot;NA\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>27行：<code>string</code>类型的变量s用printf输出必须是<code>printf(“%s”,s.c_str());</code>即<strong>s.c_str()</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;串&quot;&gt;&lt;a href=&quot;#串&quot; class=&quot;headerlink&quot; title=&quot;串&quot;&gt;&lt;/a&gt;串&lt;/h1&gt;&lt;h2 id=&quot;模式串匹配算法&quot;&gt;&lt;a href=&quot;#模式串匹配算法&quot; class=&quot;headerlink&quot; title=&quot;模式串匹配算法&quot;&gt;&lt;/a&gt;模式串匹配算法&lt;/h2&gt;&lt;h3 id=&quot;引例&quot;&gt;&lt;a href=&quot;#引例&quot; class=&quot;headerlink&quot; title=&quot;引例&quot;&gt;&lt;/a&gt;引例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041971.png&quot; alt=&quot;image-20221110210307366&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309282041953.png&quot; alt=&quot;image-20221110210326808&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>前缀、中缀、后缀表达式</title>
    <link href="http://example.com/2023/09/28/%E5%89%8D%E7%BC%80%EF%BC%8C%E4%B8%AD%E7%BC%80%EF%BC%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2023/09/28/%E5%89%8D%E7%BC%80%EF%BC%8C%E4%B8%AD%E7%BC%80%EF%BC%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2023-09-28T12:36:49.000Z</published>
    <updated>2023-09-29T02:49:55.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>前缀表达式（波兰式），中缀表达式，后缀表达式（逆波兰式）</p><ul><li>区别在于<strong>运算符</strong>相对与<strong>操作数</strong>的位置不同：<ul><li>前缀表达式的<strong>运算符</strong>位于与其相关的操作数<strong>之前</strong>；</li><li>中缀表达式的<strong>运算符</strong>位于与其相关的操作数<strong>之间</strong>；</li><li>后缀表达式的<strong>运算符</strong>位于与其相关的操作数<strong>之后</strong>；</li></ul></li><li>举例：<br>  (3 + 4) × 5 - 6 就是中缀表达式<br>  - × + 3 4 5 6 前缀表达式<br>  3 4 + 5 × 6 - 后缀表达式</li></ul><span id="more"></span><h2 id="1、中缀表达式转后缀表达式："><a href="#1、中缀表达式转后缀表达式：" class="headerlink" title="1、中缀表达式转后缀表达式："></a>1、中缀表达式转后缀表达式：</h2><p>假定有中缀表达式A：1 + (( 2 + 3)* 4 ) – 5，请将它转化为后缀表达式。</p><h3 id="方法一：直接转换法"><a href="#方法一：直接转换法" class="headerlink" title="方法一：直接转换法"></a>方法一：直接转换法</h3><p>  （1）首先确定表达式表达式A的运算顺序，然后加括号：（（1 + (( 2 + 3)* 4 )） – 5 ）</p><p>  （2）从最里面的一层括号开始运算，转换成后缀表达式的方法为：（忽略括号）数字在前，符号在后。</p><p>​       1）( 2 + 3) &#x3D;&gt; 23+</p><p>​       2) (( 2 + 3)* 4 ) &#x3D;&gt; 23+4*</p><p>​       3) （1 + (( 2 + 3)* 4 )）&#x3D;&gt; 123+4*+   [按照运算次序，从左到右排列]</p><p>​       4）（（1 + (( 2 + 3)* 4 )） – 5 ）&#x3D;&gt; 123+4*+ 5-</p><p>​    后缀表达式为：12 3 + 4 * + 5 –</p><h3 id="方法二：利用表达式树"><a href="#方法二：利用表达式树" class="headerlink" title="方法二：利用表达式树"></a>方法二：利用表达式树</h3><p>​ 首先将中缀表达式转换为表达式树，然后<strong>后序遍历</strong>表达式树，所得结果就是后缀表达式。详细过程见<a href="C:\Users\cuiluyi\Desktop\编程随想\DAG和二叉树描述表达式.md">DAG和二叉树描述表达式</a>如上述表达式的表达式树为：</p><blockquote><p><a href="%E8%B7%AF%E5%BE%84....................................">自定义名称</a>跳转文件，详细见<a href="%5B(69%E6%9D%A1%E6%B6%88%E6%81%AF">Typora使用技巧 | 各种跳转 </a> Typora使用技巧 | 各种跳转 【必备】_想要腹肌的熊的博客-CSDN博客_typora链接跳转到其他文件](<a href="https://blog.csdn.net/qq_41907769/article/details/121722716">https://blog.csdn.net/qq_41907769/article/details/121722716</a>))</p></blockquote><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290925432.png" alt="img"></p><h3 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290941178.png" alt="image-20230929094150044"></p><blockquote><p>任意时刻<strong>栈顶的优先级</strong>都要<strong>大于</strong>其**<font color='red'>下面一个</font>**的优先级</p></blockquote><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290942146.png" alt="image-20230929094204000"></p><h4 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290942448.png" alt="image-20221103161920147"></p><blockquote><p><strong><font color='red'>B</font></strong></p></blockquote><h2 id="2、中缀表达式转为前缀表达式"><a href="#2、中缀表达式转为前缀表达式" class="headerlink" title="2、中缀表达式转为前缀表达式"></a>2、中缀表达式转为前缀表达式</h2><p>  假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为前缀表达式。</p><h3 id="方法一：直接转换法-1"><a href="#方法一：直接转换法-1" class="headerlink" title="方法一：直接转换法"></a>方法一：直接转换法</h3><p>  （1）首先确定表达式表达式A的运算顺序，然后加括号：（（1 + (( 2 + 3)* 4 )） – 5 ）</p><p>  （2）从最里面的一层括号开始运算，转换成前缀表达式的方法为：（忽略括号）符号在前，数字在后。</p><p>​       1）( 2 + 3) &#x3D;&gt; +23</p><p>​       \2) (( 2 + 3)* 4 ) &#x3D;&gt; *+234</p><p>​       \3) （1 + (( 2 + 3)* 4 )）&#x3D;&gt;  +1*+234  </p><p>​       4）（（1 + (( 2 + 3)* 4 )） – 5 ）&#x3D;&gt; -+1*+2345</p><p>​    前缀表达式为：-+1*+2345</p><h3 id="方法二：利用表达式树-1"><a href="#方法二：利用表达式树-1" class="headerlink" title="方法二：利用表达式树"></a>方法二：利用表达式树</h3><p>  首先将中缀表达式转换为表达式树，然后先序遍历表达式树，所得结果就是前缀表达式。</p><p>  将中缀表达式转化为表达式树的方法：表达式树的树叶是操作数，而其他节点为操作符，根结点为优先级最低且靠右的操作符（如上述表达式优先级最低是-和+，但-最靠右，所以根为-），圆括号不包括。</p><p>   经过前序遍历所得前缀表达式为：- + 1 * + 2 3 4 5</p><h2 id="3、后缀表达式-转-中缀表达式"><a href="#3、后缀表达式-转-中缀表达式" class="headerlink" title="3、后缀表达式 转 中缀表达式"></a>3、后缀表达式 转 中缀表达式</h2><p>  假定有后缀表达式1 2 3 + 4 * +5 – ，请将它转化为前缀表达式。</p><h3 id="方法一：利用表达式树："><a href="#方法一：利用表达式树：" class="headerlink" title="方法一：利用表达式树："></a>方法一：利用表达式树：</h3><p>​    从左到右扫面后缀表达式，一次一个符号读入表达式。如果符号是操作数，那么就建立一个单节点树并将它推入栈中。如果符号是操作符，那么就从栈中弹出两个树T1和T2（T1先弹出）并形成一颗新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。然后将指向这棵新树的指针压入栈中。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290943091.png" alt="img">扫描123后</p><p>前三个符号是操作数，因此创建三颗单节点树并将指向它们的指针压入栈中。 </p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290943201.png" alt="img">扫描+后</p><p> “+”被读入，因此指向最后两颗树的指针被弹出，形成一颗新树，并将指向新树的指针压入栈中。以下的流程图以相同原理执行。</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290943954.png" alt="img">扫描4和*后</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290943074.png" alt="img">扫描+和5后</p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290943478.png" alt="img">扫描-后</p><p>最后再中序遍历所得的表达式树即得到我们所需的中缀表达式：1+（（2+3）*4）-5 </p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="表达式转换"><a href="#表达式转换" class="headerlink" title="表达式转换"></a>表达式转换</h3><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行中给出不含空格的中缀表达式，可包含<code>+</code>、<code>-</code>、<code>*</code>、<code>\</code>以及左右括号<code>()</code>，表达式不超过20个字符。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2+3*(7-4)+8/4</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 7 4 - * + 8 4 / +</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string c;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;p;</span><br><span class="line">p[<span class="string">&quot;+&quot;</span>]=<span class="number">1</span>;p[<span class="string">&quot;-&quot;</span>]=<span class="number">1</span>;p[<span class="string">&quot;*&quot;</span>]=<span class="number">2</span>;p[<span class="string">&quot;/&quot;</span>]=<span class="number">2</span>;p[<span class="string">&quot;(&quot;</span>]=<span class="number">3</span>;p[<span class="string">&quot;)&quot;</span>]=<span class="number">3</span>;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    vector&lt;string&gt;l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(c[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c[i]&lt;=<span class="string">&#x27;9&#x27;</span>||i==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;c.<span class="built_in">size</span>()&amp;&amp;(c[j]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c[j]&lt;=<span class="string">&#x27;9&#x27;</span>||c[j]==<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">j++;</span><br><span class="line">            l.<span class="built_in">push_back</span>(c.<span class="built_in">substr</span>(i,j-i));    </span><br><span class="line">            i=j<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]==<span class="string">&#x27;(&#x27;</span>&amp;&amp;c[i+<span class="number">1</span>]==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> j=i+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;c.<span class="built_in">size</span>()&amp;&amp;c[j]!=<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">j++;</span><br><span class="line">    l.<span class="built_in">push_back</span>(c.<span class="built_in">substr</span>(i+<span class="number">2</span>,j-i<span class="number">-2</span>));</span><br><span class="line">    i=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;(&#x27;</span>&amp;&amp;c[i+<span class="number">1</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j=i+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;c.<span class="built_in">size</span>()&amp;&amp;c[j]!=<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">j++;</span><br><span class="line">    l.<span class="built_in">push_back</span>(c.<span class="built_in">substr</span>(i+<span class="number">1</span>,j-i<span class="number">-1</span>));</span><br><span class="line">    i=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l.<span class="built_in">push_back</span>(c.<span class="built_in">substr</span>(i,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">stack&lt;string&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l[i]==<span class="string">&quot;+&quot;</span>||l[i]==<span class="string">&quot;-&quot;</span>||l[i]==<span class="string">&quot;*&quot;</span>||l[i]==<span class="string">&quot;/&quot;</span>||l[i]==<span class="string">&quot;(&quot;</span>||l[i]==<span class="string">&quot;)&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">empty</span>()||(p[l[i]]&gt;p[s.<span class="built_in">top</span>()]&amp;&amp;l[i]!=<span class="string">&quot;)&quot;</span>)||s.<span class="built_in">top</span>()==<span class="string">&quot;(&quot;</span>)</span><br><span class="line">s.<span class="built_in">push</span>(l[i]);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l[i]==<span class="string">&quot;)&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(s.<span class="built_in">top</span>()!=<span class="string">&quot;(&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s.<span class="built_in">top</span>();</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>()&amp;&amp;p[l[i]]&lt;=p[s.<span class="built_in">top</span>()]&amp;&amp;s.<span class="built_in">top</span>()!=<span class="string">&quot;(&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s.<span class="built_in">top</span>();</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">push</span>(l[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;cout&lt;&lt;(flag==<span class="number">0</span>?<span class="string">&quot;&quot;</span>:<span class="string">&quot; &quot;</span>)&lt;&lt;l[i];flag=<span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s.<span class="built_in">top</span>();s.<span class="built_in">pop</span>();&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;前缀表达式（波兰式），中缀表达式，后缀表达式（逆波兰式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区别在于&lt;strong&gt;运算符&lt;/strong&gt;相对与&lt;strong&gt;操作数&lt;/strong&gt;的位置不同：&lt;ul&gt;
&lt;li&gt;前缀表达式的&lt;strong&gt;运算符&lt;/strong&gt;位于与其相关的操作数&lt;strong&gt;之前&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;中缀表达式的&lt;strong&gt;运算符&lt;/strong&gt;位于与其相关的操作数&lt;strong&gt;之间&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;后缀表达式的&lt;strong&gt;运算符&lt;/strong&gt;位于与其相关的操作数&lt;strong&gt;之后&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例：&lt;br&gt;  (3 + 4) × 5 - 6 就是中缀表达式&lt;br&gt;  - × + 3 4 5 6 前缀表达式&lt;br&gt;  3 4 + 5 × 6 - 后缀表达式&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树结点的计算问题</title>
    <link href="http://example.com/2023/09/28/%E6%A0%91%E7%BB%93%E7%82%B9%E7%9A%84%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/09/28/%E6%A0%91%E7%BB%93%E7%82%B9%E7%9A%84%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98/</id>
    <published>2023-09-28T12:36:49.000Z</published>
    <updated>2023-09-29T02:53:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树结点的计算问题"><a href="#树结点的计算问题" class="headerlink" title="树结点的计算问题"></a>树结点的计算问题</h1><h2 id="树的种数"><a href="#树的种数" class="headerlink" title="树的种数"></a>树的种数</h2><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309291052715.png" alt="image-20230929105248559"></p><span id="more"></span><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309291053249.png" alt="image-20230929105310153"></p><h1 id="一：完全二叉树中结点问题"><a href="#一：完全二叉树中结点问题" class="headerlink" title="一：完全二叉树中结点问题"></a>一：完全二叉树中结点问题</h1><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919576.png" alt="image-20221105154910530"></p><blockquote><h1 id="完全二叉树，n1-0或1"><a href="#完全二叉树，n1-0或1" class="headerlink" title="完全二叉树，n1&#x3D;0或1"></a><font color='red'>完全二叉树，n<del>1</del>&#x3D;0或1</font></h1></blockquote><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>设叶子节点个数为n0,度为1的节点个数为n1,度为2的节点个数为n2</p><p>则 </p><p>n0+n1+n2&#x3D;n                (1)</p><p>n0&#x3D;n2+1                       (2)</p><p>由(1)(2) &#x3D;&#x3D;&gt;&#x3D;&#x3D;<strong>n0&#x3D;(n+1-n1)&#x2F;2</strong>&#x3D;&#x3D;              </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>由**<u>完全二叉树的性质可知：n1&#x3D;0 或 1</u>**</p><ol><li><p>当<strong>n1&#x3D;0</strong>或<strong>n为奇数</strong>时，n0&#x3D; (n+1)&#x2F;2;</p></li><li><p>当<strong>n1&#x3D;1</strong>或<strong>n为偶数</strong>时，n0&#x3D; n&#x2F;2;</p></li></ol><blockquote><p>综合1，2可得：</p><p>一个具有n个节点的<strong>完全二叉树</strong>，其<strong>叶子节点的个数n0</strong>为： &#x3D;&#x3D;<strong>n&#x2F;2 向上取整，或者(n+1)&#x2F;2 向下取整</strong>&#x3D;&#x3D;</p></blockquote><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h4><p>设一棵完全二叉树共有699个节点，则在该二叉树中的叶节点数为？ </p><p>——350</p><hr><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>一棵完全二叉树<u>第六层有</u>8个叶结点（根为第一层），则结点个数<u>最多有</u>（）个。</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ol><li><p><strong>二叉树第k层最多有 2^(k-1) 个节点</strong></p><p> 第一层最多有1个节点</p></li></ol><p>​第二层最多有2个节点</p><p>​第三层最多有4个节点 </p><p>​第四层最多有8个节点</p><p>​第五层最多有16个节点</p><p>​第六层最多有32个节点</p><ol start="2"><li><p><strong>完全二叉树的叶节点只可能出现在后两层</strong>，<strong>除最后一层可能不满，其余层均满</strong></p><p> 第六层有8（&lt;2^6-1^&#x3D;32）个结点，说明<strong>第六层</strong>是完全二叉树的<strong>最后两层</strong>之一</p></li></ol><ul><li><p>&#x3D;&#x3D;<strong>如果完全二叉树有6层</strong>&#x3D;&#x3D;，则前5层是满二叉树，总节点数n&#x3D;（2^5^-1）+8&#x3D;39</p></li><li><p>如果完全二叉树有7层，则</p><ul><li><p>前6层是满二叉树，前六层总节点数目为2^6^-1&#x3D;63</p></li><li><p>第六层有8个叶子节点，则有32-8&#x3D;24个非叶子节点</p></li><li><p>  $$<br>  第七层最多有24*2&#x3D;48个叶子节点<br>  $$</p></li></ul><p>  故总节点数目为63+24*2&#x3D;111</p><p>  <img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919577.jpg" alt="10579c757472bc18bd16578d42dcb1d"></p></li></ul><h1 id="二：树的结点问题"><a href="#二：树的结点问题" class="headerlink" title="二：树的结点问题"></a>二：树的结点问题</h1><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><p>已知在一棵度为4的树T中，若有20个度为4的结点，10个度为3的结点，1个度为2的结点，10个度为1的结点，则树T的叶子结点的个数为？</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919578.jpg" alt="daf0765aa213be23c7bff6d820e6c92"></p><blockquote><p>注：&#x3D;&#x3D;<strong>若树的节点数为n，则边数为n-1</strong>&#x3D;&#x3D;</p></blockquote><h2 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h2><p>一棵度为3的树中，有3度的结点100个，有2度的结点200个，有叶子结点多少个？</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290921109.png" alt="image-20221002222557971" style="zoom: 18%;" /><h3 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h3><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919580.jpg" alt="6eb138545a60b02c6aace0b7aa36ab2"></p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919581.jpg" alt="a07999b6a7af0f1122d73a179281c15"></p><p><img src="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309290919582.jpg" alt="3f1a63bfca3d22b868487ba223510bc"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;树结点的计算问题&quot;&gt;&lt;a href=&quot;#树结点的计算问题&quot; class=&quot;headerlink&quot; title=&quot;树结点的计算问题&quot;&gt;&lt;/a&gt;树结点的计算问题&lt;/h1&gt;&lt;h2 id=&quot;树的种数&quot;&gt;&lt;a href=&quot;#树的种数&quot; class=&quot;headerlink&quot; title=&quot;树的种数&quot;&gt;&lt;/a&gt;树的种数&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202309291052715.png&quot; alt=&quot;image-20230929105248559&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
