<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弘毅 の blog</title>
  
  
  <link href="https://luyicui.github.io/atom.xml" rel="self"/>
  
  <link href="https://luyicui.github.io/"/>
  <updated>2025-01-13T16:08:51.165Z</updated>
  <id>https://luyicui.github.io/</id>
  
  <author>
    <name>弘毅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2025/01/13/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/5%20Tips%20To%20Organize%20Python%20Code/"/>
    <id>https://luyicui.github.io/2025/01/13/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/5%20Tips%20To%20Organize%20Python%20Code/</id>
    <published>2025-01-13T03:41:51.825Z</published>
    <updated>2025-01-13T16:08:51.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tips-to-organize-python-code">5 Tips To Organize PythonCode</h1><ol type="1"><li>Use modules and packages to better organize Python code.</li><li>Place each class in an individual file using Pascal case.</li><li>Group related functionality together in packages.</li><li>Place all utilities in a single file or package.</li><li>Organize import statements by third party, built-in, and localfiles.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tips-to-organize-python-code&quot;&gt;5 Tips To Organize Python
Code&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Use modules and packages to better organize P</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2025/01/12/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90fastchat%E3%80%91/vLLM%20Integration/"/>
    <id>https://luyicui.github.io/2025/01/12/[object%20Object]/%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/%E3%80%90fastchat%E3%80%91/vLLM%20Integration/</id>
    <published>2025-01-12T04:40:15.933Z</published>
    <updated>2025-01-12T04:40:54.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vllm-integration">vLLM Integration</h1><p>You can use <a href="https://vllm.ai/">vLLM</a> as an optimizedworker implementation in FastChat. It offers advanced continuousbatching and a much higher (~10x) throughput. See the supported models<ahref="https://vllm.readthedocs.io/en/latest/models/supported_models.html">here</a>.</p><h2 id="instructions">Instructions</h2><ol type="1"><li><p>Install vLLM.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install vllm</span><br></pre></td></tr></table></figure></li><li><p>When you launch a model worker, replace the normal worker(<code>fastchat.serve.model_worker</code>) with the vLLM worker(<code>fastchat.serve.vllm_worker</code>). All other commands such ascontroller, gradio web server, and OpenAI API server are kept the same.启动模型工作程序时，将普通工作程序 (<code>fastchat.serve.model_worker</code> ) 替换为 vLLM 工作程序 (<code>fastchat.serve.vllm_worker</code> )。控制器、Gradio 网页服务器和OpenAI API 服务器等所有其他命令保持不变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.vllm_worker --model-path lmsys/vicuna-7b-v1.5</span><br></pre></td></tr></table></figure><p>If you see tokenizer errors, try</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fastchat.serve.vllm_worker --model-path lmsys/vicuna-7b-v1.5 --tokenizer hf-internal-testing/llama-tokenizer</span><br></pre></td></tr></table></figure><p>If you use an AWQ quantized model, try<code>python3 -m fastchat.serve.vllm_worker --model-path TheBloke/vicuna-7B-v1.5-AWQ --quantization awq</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vllm-integration&quot;&gt;vLLM Integration&lt;/h1&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://vllm.ai/&quot;&gt;vLLM&lt;/a&gt; as an optimized
worker implementation i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2025/01/11/[object%20Object]/others/%E7%94%9F%E6%B4%BB/%E8%8C%B6%E5%8F%B6/"/>
    <id>https://luyicui.github.io/2025/01/11/[object%20Object]/others/%E7%94%9F%E6%B4%BB/%E8%8C%B6%E5%8F%B6/</id>
    <published>2025-01-11T13:38:35.750Z</published>
    <updated>2025-01-11T13:38:35.750Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2025/01/11/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/OOP/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://luyicui.github.io/2025/01/11/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/OOP/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-01-11T06:10:04.405Z</published>
    <updated>2025-01-11T06:10:04.405Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/29/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/%E3%80%90tutorial%E3%80%91/%E3%80%90Python%20Concurrency%E3%80%91/"/>
    <id>https://luyicui.github.io/2024/12/29/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/%E3%80%90tutorial%E3%80%91/%E3%80%90Python%20Concurrency%E3%80%91/</id>
    <published>2024-12-29T05:26:10.062Z</published>
    <updated>2024-12-29T05:26:24.991Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pythontutorial.net/python-concurrency/">PythonConcurrency</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.pythontutorial.net/python-concurrency/&quot;&gt;Python
Concurrency&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.3%20%E8%AF%BE%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84API/</id>
    <published>2024-12-06T14:39:44.085Z</published>
    <updated>2024-12-06T14:39:44.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="获取json-web-tokenjwt">1. 获取Json Web Token（JWT）</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>: 密码</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li><li><code>refresh</code>: 刷新令牌，有效期14天</li></ul></li></ul><h2 id="刷新jwt令牌">2. 刷新JWT令牌</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/api/token/refresh/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>refresh</code>: 刷新令牌</li></ul></li><li>返回结果：<ul><li><code>access</code>: 访问令牌，有效期5分钟</li></ul></li></ul><h2 id="获取用户列表">3. 获取用户列表</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/userlist/</li><li>方法：<code>GET</code></li><li>是否验证jwt：否</li><li>输入参数：无</li><li>返回结果：返回10个用户的信息</li></ul><h2 id="获取某个用户的信息">4. 获取某个用户的信息</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/getinfo/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的信息</li></ul><h2 id="获取某个用户的所有帖子">5. 获取某个用户的所有帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>GET</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>user_id</code>：用户的ID</li></ul></li><li>返回结果：该用户的所有帖子</li></ul><h2 id="创建一个帖子">6. 创建一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>content</code>：帖子的内容</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="删除一个帖子">7. 删除一个帖子</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/post/</li><li>方法：<code>DELETE</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>post_id</code>：被删除帖子的ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="更改关注状态">8. 更改关注状态</h2><p>如果未关注，则关注；如果已关注，则取消关注。</p><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/follow/</li><li>方法：<code>POST</code></li><li>是否验证jwt：是</li><li>输入参数：<ul><li><code>target_id</code>: 被关注的用户ID</li></ul></li><li>返回结果：<code>result: success</code></li></ul><h2 id="注册账号">9. 注册账号</h2><ul><li>地址：https://app165.acapp.acwing.com.cn/myspace/user/</li><li>方法：<code>POST</code></li><li>是否验证jwt：否</li><li>输入参数：<ul><li><code>username</code>: 用户名</li><li><code>password</code>：密码</li><li><code>password_confirm</code>：确认密码</li></ul></li><li>返回结果：<ul><li><code>result: success</code></li><li><code>result: 用户名和密码不能为空</code></li><li><code>result: 两个密码不一致</code></li><li><code>result: 用户名已存在</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;获取json-web-tokenjwt&quot;&gt;1. 获取Json Web Token（JWT）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;地址：h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.2%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2024-12-06T14:39:44.071Z</published>
    <updated>2024-12-06T14:39:44.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><h2 id="script部分">script部分</h2><p><code>export default</code>对象的属性：</p><ul><li><code>name</code>：组件的名称</li><li><code>components</code>：存储<code>&lt;template&gt;</code>中用到的所有组件</li><li><code>props</code>：存储父组件传递给子组件的数据</li><li><code>watch()</code>：当某个数据发生变化时触发</li><li><code>computed</code>：动态计算某个数据</li><li><code>setup(props, context)</code>：初始化变量、函数<ul><li><code>ref</code>定义变量，可以用<code>.value</code>属性重新赋值</li><li><code>reactive</code>定义对象，不可重新赋值</li><li><code>props</code>存储父组件传递过来的数据</li><li><code>context.emit()</code>：触发父组件绑定的函数</li></ul></li></ul><h2 id="template部分">template部分</h2><ul><li><code>&lt;slot&gt;&lt;/slot&gt;</code>：存放父组件传过来的<code>children</code>。</li><li><code>v-on:click</code>或<code>@click</code>属性：绑定事件</li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>属性：判断</li><li><code>v-for</code>属性：循环，<code>:key</code>循环的每个元素需要有唯一的<code>key</code></li><li><code>v-bind:</code>或<code>:</code>：绑定属性</li></ul><h2 id="style部分">style部分</h2><ul><li><code>&lt;style&gt;</code>标签添加`属性后，不同组件间的css不会相互影响。</li></ul><h2 id="第三方组件">第三方组件</h2><ul><li><code>view-router</code>包：实现路由功能。</li><li><code>vuex</code>：存储全局状态，全局唯一。<ul><li><code>state</code>:存储所有数据，可以用<code>modules</code>属性划分成若干模块</li><li><code>getters</code>：根据<code>state</code>中的值计算新的值</li><li><code>mutations</code>：所有对<code>state</code>的修改操作都需要定义在这里，不支持异步，可以通过<code>$store.commit()</code>触发</li><li><code>actions</code>：定义对<code>state</code>的复杂修改操作，支持异步，可以通过<code>$store.dispatch()</code>触发。注意不能直接修改<code>state</code>，只能通过<code>mutations</code>修改<code>state</code>。</li><li><code>modules</code>：定义<code>state</code>的子模块</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;script部分&quot;&gt;script部分&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;export default&lt;/code&gt;对象的属性：&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://luyicui.github.io/2024/12/06/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/vue/6.1%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2024-12-06T14:39:44.059Z</published>
    <updated>2024-12-06T14:39:44.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航6.-vue3">导航：<a href="../6.%20Vue3.md">6. Vue3</a></h2><p><a href="https://vuejs.org/">Vue官网</a></p><h2 id="终端">终端</h2><p><code>Linux</code>和<code>Mac</code>上可以用自带的终端。</p><p><code>Windows</code>上推荐用<code>powershell</code>或者<code>cmd</code>。<code>Git Bash</code>有些指令不兼容。</p><h2 id="安装nodejs">安装<code>Nodejs</code></h2><p><a href="https://nodejs.org/en/">安装地址</a></p><h2 id="安装vuecli">安装<code>@vue/cli</code></h2><p>打开<code>Git Bash</code>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>如果执行后面的操作有bug，可能是最新版有问题，可以尝试安装早期版本，比如：<code>npm i -g @vue/cli@4</code></p><h2id="启动vue自带的图形化项目管理界面">启动<code>vue</code>自带的图形化项目管理界面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>常见问题1：Windows上运行<code>vue</code>，提示无法加载文件，表示用户权限不足。</p><p>解决方案：用管理员身份打开终端，输入<code>set-ExecutionPolicy RemoteSigned</code>，然后输入<code>y</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导航6.-vue3&quot;&gt;导航：&lt;a href=&quot;../6.%20Vue3.md&quot;&gt;6. Vue3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;终端&quot;&gt;终端&lt;/h2&gt;
&lt;p&gt;&lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/11/27/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/%E3%80%900.Reference%E3%80%91/"/>
    <id>https://luyicui.github.io/2024/11/27/[object%20Object]/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91/%E3%80%900.Reference%E3%80%91/</id>
    <published>2024-11-27T09:32:44.309Z</published>
    <updated>2024-12-31T06:58:08.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reference">【0.Reference】</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs</a></li></ul><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412061056151.png"alt="image-20241206105627960" /><figcaption aria-hidden="true">image-20241206105627960</figcaption></figure><ul><li><a href="https://www.runoob.com/">菜鸟教程 -学的不仅是技术，更是梦想！</a></li></ul><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412061054007.png"alt="image-20241206105434913" /><figcaption aria-hidden="true">image-20241206105434913</figcaption></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202412061055814.png"alt="image-20241206105508651" /><figcaption aria-hidden="true">image-20241206105508651</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;reference&quot;&gt;【0.Reference】&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot;&gt;MDN Web Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://luyicui.github.io/2024/11/24/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Python_Data_Science/%E3%80%90numpy%E3%80%91/astype()/"/>
    <id>https://luyicui.github.io/2024/11/24/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Python_Data_Science/%E3%80%90numpy%E3%80%91/astype()/</id>
    <published>2024-11-24T06:55:36.030Z</published>
    <updated>2024-12-20T09:26:39.894Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【二叉树】</title>
    <link href="https://luyicui.github.io/2024/08/23/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/C++/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91/"/>
    <id>https://luyicui.github.io/2024/08/23/[object%20Object]/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91/C++/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91/</id>
    <published>2024-08-22T17:02:27.000Z</published>
    <updated>2024-11-13T14:13:34.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树">二叉树</h1><h2 id="存储">存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r;<span class="comment">// l[i] 和 r[i] 分别存储节点 i 的左、右孩子编号</span></span><br></pre></td></tr></table></figure><blockquote><p>不定义为 <code>int l[N], r[N]</code> 的原因是：二叉树的结点个数最大为N，但是结点权值可以大于N，此时就会导致段错误，而定义成哈希表就避免了很多麻烦</p></blockquote><h2 id="非递归遍历">非递归遍历</h2><h3 id="结论">结论</h3><p>【<strong>结论</strong>】用 <strong>栈</strong> 模拟实现<strong>中序遍历</strong>，<font color='red'> <strong>Push</strong></font> 操作的数据过程是 <font color='blue'> <strong>先序</strong></font> 遍历，<font color='red'> <strong>Pop</strong> </font>操作的数据过程是 <font color='blue'> <strong>中序</strong> </font>遍历</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408232259283.png"alt="树的遍历.png" /><figcaption aria-hidden="true">树的遍历.png</figcaption></figure><p>​ 如图所示，⊗ 是先序遍历，☆ 是中序遍历，△ 是后序遍历。我们发现：树的<strong>前序、中序、后序</strong> 实际上都是将整棵树以<strong>上图所示的路线</strong> 跑了 <spanclass="math inline">\(1\)</span> 遍，每个结点都碰到了 <spanclass="math inline">\(3\)</span> 次，三者唯一不同之处在于<strong>访问节点的时机不同</strong></p><ul><li><strong>先序</strong> 遍历在第 <spanclass="math inline">\(1\)</span> 次碰到结点时访问</li><li><strong>中序</strong> 遍历在第 <spanclass="math inline">\(2\)</span> 次碰到结点时访问</li><li><strong>后序</strong> 遍历在第 <spanclass="math inline">\(3\)</span> 次碰到结点时访问</li></ul><h3 id="例题">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8792912/">AcWing1576. 再次树遍历 - AcWing</a></li></ul><span id="more"></span><h2 id="层序遍历">层序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> root)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    q[++ tt] = root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">if</span>(l.count(t))<span class="comment">// 存在左孩子</span></span><br><span class="line">            q[++ tt] = l[t];</span><br><span class="line">        <span class="keyword">if</span>(r.count(t))<span class="comment">// 存在右孩子</span></span><br><span class="line">            q[++ tt] = r[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bfs(root);</span><br><span class="line"><span class="comment">// 输出层序序列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br></pre></td></tr></table></figure><h2 id="后序中序建树">后序中序建树</h2><h3 id="模板">模板</h3><ul><li><strong>时间复杂度</strong>：<spanclass="math inline">\(O(n)\)</span></li></ul><blockquote><p>注意：前提是二叉树中<strong>节点编号或权值互不相同</strong>，我们才能用<strong>哈希表</strong>记录中序序列各节点对应的下标，从而将时间复杂度优化为 <spanclass="math inline">\(O(n)\)</span>。如果<strong>二叉树节点编号或权值可能重复</strong>，则只能遍历搜索位置，此时时间复杂度为<span class="math inline">\(O(n^2)\)</span></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> in[N], post[N];<span class="comment">// n 个节点的中序序列、后序序列</span></span><br><span class="line"><span class="type">int</span> pre[N], cnt;<span class="comment">// 建图的同时记录 n 个节点的前序序列</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r, pos;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> il, <span class="type">int</span> ir, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> root = post[pr];</span><br><span class="line">    <span class="type">int</span> k = pos[root];<span class="comment">// 优化时间复杂度 O(1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 记录前序序列 */</span></span><br><span class="line">    <span class="comment">// pre[cnt ++] = root;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(il &lt; k)</span><br><span class="line">        l[root] = build(il, k - <span class="number">1</span>, pl, pl + (k - <span class="number">1</span> - il));</span><br><span class="line">    <span class="keyword">if</span>(k &lt; ir)</span><br><span class="line">        r[root] = build(k + <span class="number">1</span>, ir, pl + (k - <span class="number">1</span> - il) + <span class="number">1</span>, pr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;post[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line">        pos[in[i]] = i;        <span class="comment">// 哈希表记录每个数在中序遍历的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// root 为二叉树的根节点</span></span><br><span class="line">    <span class="type">int</span> root = build(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-1">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790598/">AcWing1497. 树的遍历 - AcWing</a></li><li><ahref="https://www.acwing.com/activity/content/code/content/8790623/">AcWing1620. Z 字形遍历二叉树 - AcWing</a></li></ul><h2 id="中序建树">中序建树</h2><h3 id="模板-1">模板</h3><ul><li><strong>时间复杂度</strong>：<spanclass="math inline">\(O(n)\)</span></li></ul><blockquote><p>注意：前提是二叉树中每个节点的权值互不相同，我们才能用哈希表记录中序序列各节点对应的下标</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> in[N], pre[N];<span class="comment">// n 个节点的中序序列、前序序列</span></span><br><span class="line"><span class="type">int</span> post[N], cnt;<span class="comment">// 建图的同时记录 n 个节点的后序序列</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; l, r, pos;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> il, <span class="type">int</span> ir, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> root = pre[pl];</span><br><span class="line">    <span class="type">int</span> k = pos[root];<span class="comment">// 优化时间复杂度 O(1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(il &lt; k)</span><br><span class="line">        l[root] = build(il, k - <span class="number">1</span>, pl + <span class="number">1</span>, pl + <span class="number">1</span> + k - <span class="number">1</span> - il);</span><br><span class="line">    <span class="keyword">if</span>(k &lt; ir)</span><br><span class="line">        r[root] = build(k + <span class="number">1</span>, ir, pl + <span class="number">1</span> + k - <span class="number">1</span> - il + <span class="number">1</span>, pr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录后序序列 */</span></span><br><span class="line">    <span class="comment">// post[cnt ++] = root;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line">        pos[in[i]] = i;        <span class="comment">// 哈希表记录每个数在中序遍历的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// root 为二叉树的根节点</span></span><br><span class="line">    <span class="type">int</span> root = build(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-2">例题</h3><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790607/">AcWing1631. 后序遍历 - AcWing</a></li><li><a href="https://www.acwing.com/solution/content/251933/">AcWing2019 清华软院 T2. 二叉树算权 - AcWing</a></li></ul><h2 id="前序和后序">前序和后序</h2><p>已知二叉树的前序序列和后序序列，<strong>无法唯一确定</strong>这个二叉树，但是我们可以确定每个子树的形状和个数，仅仅是子树的位置不能确定</p><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8793054/">AcWing1609. 前序和后序遍历 - AcWing</a></li><li><a href="https://www.acwing.com/solution/content/251849/">AcWing3486. 前序和后序 - AcWing</a></li></ul><h1 id="完全二叉树">完全二叉树</h1><h2 id="存储-1">存储</h2><p>完全二叉树采用 <strong>数组</strong> 存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br></pre></td></tr></table></figure><h2 id="性质">性质</h2><p>完全二叉树的性质如下：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408230026116.jpeg"alt="7476a7cbe9d1fbd33df03cf13ab37b4" /><figcaptionaria-hidden="true">7476a7cbe9d1fbd33df03cf13ab37b4</figcaption></figure><ol type="1"><li><strong><font color='red'> 从 1 号单元开始存储树节点</font></strong>（0 号单元存节点的个数）</li><li>节点 <span class="math inline">\(i\)</span> 左子树是 <spanclass="math inline">\(2i\)</span>，右子树是 <spanclass="math inline">\(2i+1\)</span>，根节点是 <spanclass="math inline">\(\lfloor i/2 \rfloor\)</span>，左兄弟是 <spanclass="math inline">\(i-1\)</span>，右兄弟 <spanclass="math inline">\(i+1\)</span></li><li>第 <span class="math inline">\(d\)</span> 层最多有 <spanclass="math inline">\(2^{d-1}\)</span>，<strong>起始节点</strong> 编号为<span class="math inline">\(2^{d-1}\)</span>（<spanclass="math inline">\(d\)</span> 从 <spanclass="math inline">\(1\)</span> 开始）</li><li>如果完全二叉树一共有 <span class="math inline">\(n\)</span>个节点，则 <strong>非</strong> 叶子节点为 <spanclass="math inline">\(T[0…n/2]\)</span>，叶节点为 <spanclass="math inline">\(T[n/2+1,…,n]\)</span></li></ol><h2 id="例题-3">例题</h2><ul><li><a href="https://www.acwing.com/solution/content/251776/">AcWing1240. 完全二叉树的权值 - AcWing</a></li></ul><h1 id="二叉搜索树bst">二叉搜索树(BST)</h1><p>==<strong><font color='blue'> 二叉搜索树 </font></strong> ==<strong><font color='blue'> 二叉查找树 </font></strong> （Binary SearchTree） == <strong><font color='blue'> 二叉排序树 </font></strong>（Binary Sort Tree）==</p><ul><li>若它的左子树不空，则 <strong>左子树</strong> 上<strong>所有</strong> 结点的值均 <font color='red'><strong>小于</strong> </font> 根结点的值;</li><li>若它的右子树不空，则 <strong>右子树</strong> 上<strong>所有</strong> 结点的值均 <font color='red'><strong>大于等于</strong> </font> 根结点的值;</li><li>它的左、右子树也都分别是 <strong>二又搜索树</strong></li></ul><blockquote><p>注意：上述定义在不同题目中，等号的位置可能不一样（即也有可能左子树均小于等于根节点，右子树均大于根节点）</p></blockquote><h2 id="性质-1">性质</h2><ul><li><strong>二叉排序树</strong> 的 <strong><font color='red'> 中序遍历</font></strong> 是 <strong><font color='gree'> 递增 </font></strong>序列</li></ul><blockquote><p>在构造二叉排序树时，若关键字序列有序，则二叉排序树的高度最大</p></blockquote><h2 id="例题-4">例题</h2><ul><li><ahref="https://www.acwing.com/activity/content/code/content/8790764/">AcWing1527. 判断二叉搜索树 - AcWing</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二叉树&quot;&gt;二叉树&lt;/h1&gt;
&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unordered_map&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; l, r;	&lt;span class=&quot;comment&quot;&gt;// l[i] 和 r[i] 分别存储节点 i 的左、右孩子编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不定义为 &lt;code&gt;int l[N], r[N]&lt;/code&gt; 的原因是：二叉树的结点个数最大为
N，但是结点权值可以大于
N，此时就会导致段错误，而定义成哈希表就避免了很多麻烦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;非递归遍历&quot;&gt;非递归遍历&lt;/h2&gt;
&lt;h3 id=&quot;结论&quot;&gt;结论&lt;/h3&gt;
&lt;p&gt;【&lt;strong&gt;结论&lt;/strong&gt;】用 &lt;strong&gt;栈&lt;/strong&gt; 模拟实现
&lt;strong&gt;中序遍历&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt; &lt;strong&gt;Push&lt;/strong&gt;
&lt;/font&gt; 操作的数据过程是 &lt;font color=&#39;blue&#39;&gt; &lt;strong&gt;先序&lt;/strong&gt;
&lt;/font&gt; 遍历，&lt;font color=&#39;red&#39;&gt; &lt;strong&gt;Pop&lt;/strong&gt; &lt;/font&gt;
操作的数据过程是 &lt;font color=&#39;blue&#39;&gt; &lt;strong&gt;中序&lt;/strong&gt; &lt;/font&gt;
遍历&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&quot;https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408232259283.png&quot;
alt=&quot;树的遍历.png&quot; /&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;树的遍历.png&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;​ 如图所示，⊗ 是先序遍历，☆ 是中序遍历，△ 是后序遍历。我们发现：树的
&lt;strong&gt;前序、中序、后序&lt;/strong&gt; 实际上都是将整棵树以
&lt;strong&gt;上图所示的路线&lt;/strong&gt; 跑了 &lt;span
class=&quot;math inline&quot;&gt;&#92;(1&#92;)&lt;/span&gt; 遍，每个结点都碰到了 &lt;span
class=&quot;math inline&quot;&gt;&#92;(3&#92;)&lt;/span&gt; 次，三者唯一不同之处在于
&lt;strong&gt;访问节点的时机不同&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先序&lt;/strong&gt; 遍历在第 &lt;span
class=&quot;math inline&quot;&gt;&#92;(1&#92;)&lt;/span&gt; 次碰到结点时访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中序&lt;/strong&gt; 遍历在第 &lt;span
class=&quot;math inline&quot;&gt;&#92;(2&#92;)&lt;/span&gt; 次碰到结点时访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后序&lt;/strong&gt; 遍历在第 &lt;span
class=&quot;math inline&quot;&gt;&#92;(3&#92;)&lt;/span&gt; 次碰到结点时访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例题&quot;&gt;例题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://www.acwing.com/activity/content/code/content/8792912/&quot;&gt;AcWing
1576. 再次树遍历 - AcWing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://luyicui.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Adam详解</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/8.Adam%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/8.Adam%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-08-13T02:02:27.000Z</published>
    <updated>2024-11-13T14:14:43.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adam-算法详解">Adam 算法详解</h1><p>Adam 算法在 RMSProp 算法基础上对 <ahref="https://so.csdn.net/so/search?q=%E5%B0%8F%E6%89%B9%E9%87%8F&amp;spm=1001.2101.3001.7020">小批量</a>随机梯度也做了指数加权移动平均 [1]。下面我们来介绍这个算法。</p><blockquote><p>所以 Adam 算法可以看做是 RMSProp 算法与动量法的结合。adam算法是一种基于“momentum”思想的随机梯度下降优化方法，通过迭代更新之前每次计算梯度的一阶moment 和二阶moment，并计算滑动平均值，后用来更新当前的参数。这种思想结合了 Adagrad算法的处理稀疏型数据，又结合了 RMSProp 算法的可以处理非稳态的数据。</p></blockquote><p>小tips：跟我一样基础不太好的看起来比较难以理解，建议搭配视频食用，可参考这个<ahref="https://www.bilibili.com/video/BV1HP4y1g7xN/?spm_id_from=pageDriver&amp;vd_source=12c80a98ec9426002a2f54318421082c">优化算法系列合集</a>，个人觉得比较容易听懂</p><h2 id="算法">算法</h2><p>Adam 算法使用了动量变量 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> ​和 RMSProp算法中小批量随机梯度按元素平方的指数加权移动平均变量 <spanclass="math inline">\(\boldsymbol{s}_t\)</span> ​，并在时间步 <spanclass="math inline">\(0\)</span> 将它们中每个元素初始化为 <spanclass="math inline">\(0\)</span>。给定超参数 <spanclass="math inline">\(0 \leq \beta_1 &lt; 1\)</span> （算法作者建议设为<span class="math inline">\(0.9\)</span>），时间步 <spanclass="math inline">\(t\)</span> 的动量变量 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> ​即小批量随机梯度 <spanclass="math inline">\(\boldsymbol{g}_t\)</span> ​的指数加权移动平均：</p><p><span class="math display">\[\boldsymbol{v}_t \leftarrow \beta_1 \boldsymbol{v}_{t-1} + (1 - \beta_1)\boldsymbol{g}_t\]</span> 和 RMSProp 算法中一样，给定超参数 <spanclass="math inline">\(0 \leq \beta_2 &lt; 1\)</span> （算法作者建议设为0.999）</p><p>将小批量随机梯度按元素平方后的项 <spanclass="math inline">\(\boldsymbol{g}_t \odot \boldsymbol{g}_t\)</span>​做指数加权移动平均得到 <spanclass="math inline">\(\boldsymbol{s}_t\)</span>​： <spanclass="math display">\[\boldsymbol{s}_t \leftarrow \beta_2 \boldsymbol{s}_{t-1} + (1 - \beta_2)\boldsymbol{g}_t \odot \boldsymbol{g}_t\]</span> 由于我们将 <spanclass="math inline">\(\boldsymbol{v}_0\)</span> 和 <spanclass="math inline">\(\boldsymbol{s}_0\)</span> 中的元素都初始化为 <spanclass="math inline">\(0\)</span></p><p>在时间步 <span class="math inline">\(t\)</span> 我们得到 <spanclass="math inline">\(\boldsymbol{v}_t = (1-\beta_1) \sum_{i=1}^t\beta_1^{t-i}\boldsymbol{g}_i\)</span>。将过去各时间步小批量随机梯度的权值相加，得到<span class="math inline">\((1-\beta_1) \sum_{i=1}^t \beta_1^{t-i} = 1 -\beta_1^t\)</span>。需要注意的是，当 <spanclass="math inline">\(t\)</span>较小时，过去各时间步小批量随机梯度权值之和会较小。例如，当 <spanclass="math inline">\(\beta_1 = 0.9\)</span> 时，<spanclass="math inline">\(\boldsymbol{v}_1 =0.1\boldsymbol{g}_1\)</span>。为了消除这样的影响，对于任意时间步 <spanclass="math inline">\(t\)</span> ，我们可以将 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> 再除以 <spanclass="math inline">\(1 -\beta_1^t\)</span>，从而使过去各时间步小批量随机梯度权值之和为1。这也叫作 <strong>偏差修正</strong>。在 Adam 算法中，我们对变量 <spanclass="math inline">\(\boldsymbol{v}_t\)</span> 和 <spanclass="math inline">\(\boldsymbol{s}_t\)</span> 均作偏差修正： <spanclass="math display">\[\hat{\boldsymbol{v}}_t \leftarrow \frac{\boldsymbol{v}_t}{1 - \beta_1^t}\]</span></p><p><span class="math display">\[\hat{\boldsymbol{s}}_t \leftarrow \frac{\boldsymbol{s}_t}{1 - \beta_2^t}\]</span></p><p>接下来，Adam 算法使用以上偏差修正后的变量 $_t $ 和 <spanclass="math inline">\(\hat{\boldsymbol{s}}_t\)</span>，将模型参数中每个元素的学习率通过按元素运算重新调整：</p><p><span class="math display">\[\boldsymbol{g}_t&#39; \leftarrow \frac{\eta\hat{\boldsymbol{v}}_t}{\sqrt{\hat{\boldsymbol{s}}_t} + \epsilon}\]</span> 其中 <span class="math inline">\(\eta\)</span> 是学习率，<spanclass="math inline">\(\epsilon\)</span>是为了维持数值稳定性而添加的常数，如 <spanclass="math inline">\(10^{-8}\)</span> 。和 AdaGrad 算法、RMSProp算法以及 AdaDelta算法一样，目标函数自变量中每个元素都分别拥有自己的学习率。最后，使用<span class="math inline">\(\boldsymbol{g}_t&#39;\)</span>​迭代自变量：</p><p><span class="math display">\[\boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \boldsymbol{g}_t&#39;\]</span></p><span id="more"></span><h2 id="从零开始实现">从零开始实现</h2><p>我们按照 Adam 算法中的公式实现该算法。其中时间步 t t t 通过<code>hyperparams</code> 参数传入 <code>adam</code> 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> d2lzh_pytorch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">features, labels = d2l.get_data_ch7()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_adam_states</span>():</span><br><span class="line">    v_w, v_b = torch.zeros((features.shape[<span class="number">1</span>], <span class="number">1</span>), dtype=torch.float32), torch.zeros(<span class="number">1</span>, dtype=torch.float32)</span><br><span class="line">    s_w, s_b = torch.zeros((features.shape[<span class="number">1</span>], <span class="number">1</span>), dtype=torch.float32), torch.zeros(<span class="number">1</span>, dtype=torch.float32)</span><br><span class="line">    <span class="keyword">return</span> ((v_w, s_w), (v_b, s_b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adam</span>(<span class="params">params, states, hyperparams</span>):</span><br><span class="line">    beta1, beta2, eps = <span class="number">0.9</span>, <span class="number">0.999</span>, <span class="number">1e-6</span></span><br><span class="line">    <span class="keyword">for</span> p, (v, s) <span class="keyword">in</span> <span class="built_in">zip</span>(params, states):</span><br><span class="line">        v[:] = beta1 * v + (<span class="number">1</span> - beta1) * p.grad.data</span><br><span class="line">        s[:] = beta2 * s + (<span class="number">1</span> - beta2) * p.grad.data**<span class="number">2</span></span><br><span class="line">        v_bias_corr = v / (<span class="number">1</span> - beta1 ** hyperparams[<span class="string">&#x27;t&#x27;</span>])</span><br><span class="line">        s_bias_corr = s / (<span class="number">1</span> - beta2 ** hyperparams[<span class="string">&#x27;t&#x27;</span>])</span><br><span class="line">        p.data -= hyperparams[<span class="string">&#x27;lr&#x27;</span>] * v_bias_corr / (torch.sqrt(s_bias_corr) + eps)</span><br><span class="line">    hyperparams[<span class="string">&#x27;t&#x27;</span>] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用学习率为 0.01 的 Adam 算法来训练模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.train_ch7(adam, init_adam_states(), &#123;<span class="string">&#x27;lr&#x27;</span>: <span class="number">0.01</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">1</span>&#125;, features, labels)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss: 0.245370, 0.065155 sec per epoch</span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202411132136580.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="简洁实现">简洁实现</h2><p>通过名称为“Adam”的优化器实例，我们便可使用 PyTorch 提供的 Adam算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.train_pytorch_ch7(torch.optim.Adam, &#123;<span class="string">&#x27;lr&#x27;</span>: <span class="number">0.01</span>&#125;, features, labels)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss: 0.242066, 0.056867 sec per epoch</span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202411132136204.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="小结">小结</h2><ul><li>Adam 算法在 RMSProp算法的基础上对小批量随机梯度也做了指数加权移动平均。</li><li>Adam 算法使用了偏差修正。</li></ul><h2 id="参考文献">参考文献</h2><p>[1] Kingma, D. P., &amp; Ba, J. (2014). Adam: A method for stochasticoptimization. arXiv preprint arXiv: 1412.6980.</p><hr /><blockquote><p>注：除代码外本节与原书此节基本相同，<ahref="https://zh.d2l.ai/chapter_optimization/adam.html">原书传送门</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;adam-算法详解&quot;&gt;Adam 算法详解&lt;/h1&gt;
&lt;p&gt;Adam 算法在 RMSProp 算法基础上对 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E5%B0%8F%E6%89%B9%E9%87%8F&amp;amp;spm=1001.2101.3001.7020&quot;&gt;小批量&lt;/a&gt;
随机梯度也做了指数加权移动平均 [1]。下面我们来介绍这个算法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以 Adam 算法可以看做是 RMSProp 算法与动量法的结合。adam
算法是一种基于“momentum”思想的随机梯度下降优化方法，通过迭代更新之前每次计算梯度的一阶
moment 和二阶
moment，并计算滑动平均值，后用来更新当前的参数。这种思想结合了 Adagrad
算法的处理稀疏型数据，又结合了 RMSProp 算法的可以处理非稳态的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小
tips：跟我一样基础不太好的看起来比较难以理解，建议搭配视频食用，可参考这个
&lt;a
href=&quot;https://www.bilibili.com/video/BV1HP4y1g7xN/?spm_id_from=pageDriver&amp;amp;vd_source=12c80a98ec9426002a2f54318421082c&quot;&gt;优化算法系列合集&lt;/a&gt;，个人觉得比较容易听懂&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;算法&lt;/h2&gt;
&lt;p&gt;Adam 算法使用了动量变量 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_t&#92;)&lt;/span&gt; ​和 RMSProp
算法中小批量随机梯度按元素平方的指数加权移动平均变量 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{s}_t&#92;)&lt;/span&gt; ​，并在时间步 &lt;span
class=&quot;math inline&quot;&gt;&#92;(0&#92;)&lt;/span&gt; 将它们中每个元素初始化为 &lt;span
class=&quot;math inline&quot;&gt;&#92;(0&#92;)&lt;/span&gt;。给定超参数 &lt;span
class=&quot;math inline&quot;&gt;&#92;(0 &#92;leq &#92;beta_1 &amp;lt; 1&#92;)&lt;/span&gt; （算法作者建议设为
&lt;span class=&quot;math inline&quot;&gt;&#92;(0.9&#92;)&lt;/span&gt;），时间步 &lt;span
class=&quot;math inline&quot;&gt;&#92;(t&#92;)&lt;/span&gt; 的动量变量 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_t&#92;)&lt;/span&gt; ​即小批量随机梯度 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{g}_t&#92;)&lt;/span&gt; ​的指数加权移动平均：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;boldsymbol{v}_t &#92;leftarrow &#92;beta_1 &#92;boldsymbol{v}_{t-1} + (1 - &#92;beta_1)
&#92;boldsymbol{g}_t
&#92;]&lt;/span&gt; 和 RMSProp 算法中一样，给定超参数 &lt;span
class=&quot;math inline&quot;&gt;&#92;(0 &#92;leq &#92;beta_2 &amp;lt; 1&#92;)&lt;/span&gt; （算法作者建议设为
0.999）&lt;/p&gt;
&lt;p&gt;将小批量随机梯度按元素平方后的项 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{g}_t &#92;odot &#92;boldsymbol{g}_t&#92;)&lt;/span&gt;
​做指数加权移动平均得到 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{s}_t&#92;)&lt;/span&gt;​： &lt;span
class=&quot;math display&quot;&gt;&#92;[
&#92;boldsymbol{s}_t &#92;leftarrow &#92;beta_2 &#92;boldsymbol{s}_{t-1} + (1 - &#92;beta_2)
&#92;boldsymbol{g}_t &#92;odot &#92;boldsymbol{g}_t
&#92;]&lt;/span&gt; 由于我们将 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_0&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{s}_0&#92;)&lt;/span&gt; 中的元素都初始化为 &lt;span
class=&quot;math inline&quot;&gt;&#92;(0&#92;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在时间步 &lt;span class=&quot;math inline&quot;&gt;&#92;(t&#92;)&lt;/span&gt; 我们得到 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_t = (1-&#92;beta_1) &#92;sum_{i=1}^t
&#92;beta_1^{t-i}
&#92;boldsymbol{g}_i&#92;)&lt;/span&gt;。将过去各时间步小批量随机梯度的权值相加，得到
&lt;span class=&quot;math inline&quot;&gt;&#92;((1-&#92;beta_1) &#92;sum_{i=1}^t &#92;beta_1^{t-i} = 1 -
&#92;beta_1^t&#92;)&lt;/span&gt;。需要注意的是，当 &lt;span
class=&quot;math inline&quot;&gt;&#92;(t&#92;)&lt;/span&gt;
较小时，过去各时间步小批量随机梯度权值之和会较小。例如，当 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;beta_1 = 0.9&#92;)&lt;/span&gt; 时，&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_1 =
0.1&#92;boldsymbol{g}_1&#92;)&lt;/span&gt;。为了消除这样的影响，对于任意时间步 &lt;span
class=&quot;math inline&quot;&gt;&#92;(t&#92;)&lt;/span&gt; ，我们可以将 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_t&#92;)&lt;/span&gt; 再除以 &lt;span
class=&quot;math inline&quot;&gt;&#92;(1 -
&#92;beta_1^t&#92;)&lt;/span&gt;，从而使过去各时间步小批量随机梯度权值之和为
1。这也叫作 &lt;strong&gt;偏差修正&lt;/strong&gt;。在 Adam 算法中，我们对变量 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{v}_t&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{s}_t&#92;)&lt;/span&gt; 均作偏差修正： &lt;span
class=&quot;math display&quot;&gt;&#92;[
&#92;hat{&#92;boldsymbol{v}}_t &#92;leftarrow &#92;frac{&#92;boldsymbol{v}_t}{1 - &#92;beta_1^t}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;hat{&#92;boldsymbol{s}}_t &#92;leftarrow &#92;frac{&#92;boldsymbol{s}_t}{1 - &#92;beta_2^t}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接下来，Adam 算法使用以上偏差修正后的变量 $_t $ 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;hat{&#92;boldsymbol{s}}_t&#92;)&lt;/span&gt;
，将模型参数中每个元素的学习率通过按元素运算重新调整：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;boldsymbol{g}_t&amp;#39; &#92;leftarrow &#92;frac{&#92;eta
&#92;hat{&#92;boldsymbol{v}}_t}{&#92;sqrt{&#92;hat{&#92;boldsymbol{s}}_t} + &#92;epsilon}
&#92;]&lt;/span&gt; 其中 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;eta&#92;)&lt;/span&gt; 是学习率，&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;epsilon&#92;)&lt;/span&gt;
是为了维持数值稳定性而添加的常数，如 &lt;span
class=&quot;math inline&quot;&gt;&#92;(10^{-8}&#92;)&lt;/span&gt; 。和 AdaGrad 算法、RMSProp
算法以及 AdaDelta
算法一样，目标函数自变量中每个元素都分别拥有自己的学习率。最后，使用
&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;boldsymbol{g}_t&amp;#39;&#92;)&lt;/span&gt;
​迭代自变量：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;boldsymbol{x}_t &#92;leftarrow &#92;boldsymbol{x}_{t-1} - &#92;boldsymbol{g}_t&amp;#39;
&#92;]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Adam</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/7.Adam/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/7.Adam/</id>
    <published>2024-08-13T01:02:27.000Z</published>
    <updated>2024-11-13T14:14:39.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adam-算法">Adam 算法</h1><p>​ 接下来，我们将介绍目前常用的梯度下降法中的王者——Adam算法。Adam（Adaptive MomentEstimation）是目前深度学习中最常用的优化算法之一。Adam 算法的核心思想是<strong>利用梯度一阶动量和二阶动量来动态自适应调整学习率</strong>，既保持了<strong>Momentum 收敛速度快</strong> 的优点，又结合了 <strong>RMSProp自适应学习率</strong> 的优点</p><h2 id="基本思想">基本思想</h2><p>Adam 算法通过计算梯度的 <strong>一阶动量</strong>（即<strong>梯度的指数加权移动平均）</strong> 和梯度的<strong>二阶动量</strong>（即<strong>梯度平方的指数加权移动平均</strong>）来<strong>动态调整</strong> 每个参数的<strong>学习率</strong>。具体公式如下：</p><ol type="1"><li>梯度的一阶动量：</li></ol><p><span class="math display">\[m_t = \beta_1 m_{t-1} + (1 - \beta_1) g_t\]</span></p><ol start="2" type="1"><li>梯度的二阶动量：</li></ol><p><span class="math display">\[v_t = \beta_2 v_{t-1} + (1 - \beta_2) g_t^2\]</span></p><ol start="3" type="1"><li>偏差修正：</li></ol><p><span class="math display">\[\hat{m}_t = \frac{m_t}{1 - \beta_1^t}  \]</span></p><p><span class="math display">\[\hat{v}_t = \frac{v_t}{1 - \beta_2^t}\]</span></p><ol start="4" type="1"><li>更新参数：</li></ol><p><span class="math display">\[\theta_{t+1} = \theta_t - \frac{\alpha \hat{m}_t}{\sqrt{\hat{v}_t} +\epsilon}\]</span></p><p>其中：<br />- <span class="math inline">\(\beta_1\)</span> 和 <spanclass="math inline">\(\beta_2\)</span> 分别是 <strong>动量</strong> 和<strong>均方根动量</strong> 的衰减率，常用值为 <spanclass="math inline">\(\beta_1 = 0.9\)</span> 和 <spanclass="math inline">\(\beta_2 = 0.999\)</span> - <spanclass="math inline">\(\epsilon\)</span>是一个很小的常数，用于防止分母为零，常用值为 <spanclass="math inline">\(10^{-8}\)</span></p><span id="more"></span><h2 id="优缺点">优缺点</h2><p><strong>优点</strong>：</p><ul><li><strong>自适应调整学习率</strong>：根据一阶动量和二阶动量动态调整每个参数的学习率，使得训练过程更加稳定。</li><li><strong>收敛速度快</strong>：结合动量法的 <strong>加速特性</strong>和 RMSProp 的 <strong>平稳特性</strong>，能够快速收敛到最优解。</li><li>能处理 <strong>稀疏梯度</strong>，适用于大规模数据和参数。</li></ul><p><strong>缺点</strong>：</p><ul><li>对于某些特定问题，Adam 可能会出现不稳定的收敛行为。<br /></li><li>参数较多：Adam 算法需要调整的 <strong>超参数较多</strong>（例如<span class="math inline">\(\beta_1\)</span> , <spanclass="math inline">\(\beta_2\)</span> , <spanclass="math inline">\(\epsilon\)</span>），调参复杂度高。</li></ul><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义Adam优化器</span></span><br><span class="line">optimizer = torch.optim.Adam([w, b], lr=learning_rate)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with Adam&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="adam-与其他算法的比较">Adam 与其他算法的比较</h2><p>Adam 算法集成了 SGD、动量法、Adagrad、Adadelta等多种优化算法的优点，具有快速收敛和稳定的特点。以下是它与其他算法的对比：</p><ol type="1"><li>SGD：基本的随机梯度下降法，收敛速度较慢，易陷入局部最优。</li><li>动量法：在 SGD基础上加入一阶动量，加速收敛，但仍然可能陷入局部最优。</li><li>Adagrad：自适应学习率，但对历史梯度的累积会导致学习率不断减小，后期训练缓慢。</li><li>RMSProp：改进了Adagrad，通过引入衰减系数解决学习率不断减小的问题。</li><li>Adam：结合动量法和 RMSProp的优点，具有快速收敛和稳定的特点，是目前最常用的优化算法。</li></ol><h2 id="小结">小结</h2><p>Adam 算法作为一种自适应的梯度下降优化算法，结合了动量法和 RMSProp的优点，能够有效地加速模型的收敛，同时保持稳定性。它通过计算一阶和二阶动量来动态调整学习率，使得模型在训练过程中能够快速收敛，并适应不同的优化问题。尽管Adam需要调整的超参数较多，但其优越的性能使得它成为深度学习中最广泛使用的优化算法之一。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;adam-算法&quot;&gt;Adam 算法&lt;/h1&gt;
&lt;p&gt;​ 接下来，我们将介绍目前常用的梯度下降法中的王者——Adam
算法。Adam（Adaptive Moment
Estimation）是目前深度学习中最常用的优化算法之一。Adam 算法的核心思想是
&lt;strong&gt;利用梯度一阶动量和二阶动量来动态自适应调整学习率&lt;/strong&gt;，既保持了
&lt;strong&gt;Momentum 收敛速度快&lt;/strong&gt; 的优点，又结合了 &lt;strong&gt;RMSProp
自适应学习率&lt;/strong&gt; 的优点&lt;/p&gt;
&lt;h2 id=&quot;基本思想&quot;&gt;基本思想&lt;/h2&gt;
&lt;p&gt;Adam 算法通过计算梯度的 &lt;strong&gt;一阶动量&lt;/strong&gt;（即
&lt;strong&gt;梯度的指数加权移动平均）&lt;/strong&gt; 和梯度的
&lt;strong&gt;二阶动量&lt;/strong&gt;（即
&lt;strong&gt;梯度平方的指数加权移动平均&lt;/strong&gt;）来
&lt;strong&gt;动态调整&lt;/strong&gt; 每个参数的
&lt;strong&gt;学习率&lt;/strong&gt;。具体公式如下：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;梯度的一阶动量：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
m_t = &#92;beta_1 m_{t-1} + (1 - &#92;beta_1) g_t
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;梯度的二阶动量：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
v_t = &#92;beta_2 v_{t-1} + (1 - &#92;beta_2) g_t^2
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot; type=&quot;1&quot;&gt;
&lt;li&gt;偏差修正：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;hat{m}_t = &#92;frac{m_t}{1 - &#92;beta_1^t}  
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;hat{v}_t = &#92;frac{v_t}{1 - &#92;beta_2^t}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot; type=&quot;1&quot;&gt;
&lt;li&gt;更新参数：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;theta_{t+1} = &#92;theta_t - &#92;frac{&#92;alpha &#92;hat{m}_t}{&#92;sqrt{&#92;hat{v}_t} +
&#92;epsilon}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;br /&gt;
- &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;beta_1&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;beta_2&#92;)&lt;/span&gt; 分别是 &lt;strong&gt;动量&lt;/strong&gt; 和
&lt;strong&gt;均方根动量&lt;/strong&gt; 的衰减率，常用值为 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;beta_1 = 0.9&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;beta_2 = 0.999&#92;)&lt;/span&gt; - &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;epsilon&#92;)&lt;/span&gt;
是一个很小的常数，用于防止分母为零，常用值为 &lt;span
class=&quot;math inline&quot;&gt;&#92;(10^{-8}&#92;)&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AdaGrad</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/5.AdaGrad/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/5.AdaGrad/</id>
    <published>2024-08-13T00:02:27.000Z</published>
    <updated>2024-11-13T14:14:34.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adagrad-算法">AdaGrad 算法</h1><p>在前面我们讲解了 <ahref="https://so.csdn.net/so/search?q=%E5%8A%A8%E9%87%8F%E6%B3%95&amp;spm=1001.2101.3001.7020">动量法</a>（Momentum），也就是动量随机梯度下降法。它使用了一阶动量。然而，我们同时也提到了二阶动量。使用二阶动量的梯度下降算法的改进版就是本节要讲的AdaGrad 算法。二阶动量的出现，才意味着真正的<strong>自适应学习率</strong> 优化算法时代的到来。</p><h2 id="adagrad-算法的基本思想">AdaGrad 算法的基本思想</h2><p>我们先回顾一下传统的 <ahref="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1001.2101.3001.7020">随机梯度下降法</a>（SGD）及其各种变种。它们都是以<strong>同样的学习率</strong> 来更新 <strong>每一个参数</strong>的。但深度神经网络往往包含大量参数，这些参数并不总是<strong>均匀更新</strong> 的。有些参数更新得频繁，有些则很少更新。</p><ul><li>对于 <strong>经常更新</strong>的参数，我们已经积累了大量关于它的知识，希望它不被新的单个样本影响太大，也就是说希望对这些参数的<strong>学习率小一些</strong></li><li>对于 <strong>偶尔更新</strong>的参数，我们了解的信息较少，希望从每一个样本中多学一些，即<strong>学习率大一些</strong></li></ul><p>要动态度量历史更新的频率，我们引入<strong>二阶动量</strong>。二阶动量通过将每一位各自的历史梯度的<strong>平方</strong> 叠加起来来计算。具体公式如下：</p><p><span class="math display">\[v_t = v_{t-1} + g_t^2\]</span></p><p>其中，<span class="math inline">\(g_t\)</span> 是当前的梯度。</p><span id="more"></span><h2 id="算法流程">算法流程</h2><ol type="1"><li><strong>计算当前梯度 <span class="math inline">\(g_t\)</span></strong>：</li></ol><p><span class="math display">\[g_t = \nabla f(w_t)\]</span></p><ol start="2" type="1"><li><strong>更新二阶动量 <span class="math inline">\(v_t\)</span></strong>：</li></ol><p><span class="math display">\[v_t =  v_{t-1} + g_t^2\]</span></p><ol start="3" type="1"><li><strong>计算当前时刻的下降梯度</strong>：</li></ol><p><span class="math display">\[w_{t+1} = w_t - \frac{\alpha}{\sqrt{v_t} + \epsilon} g_t\]</span></p><p>其中，<span class="math inline">\(\alpha\)</span> 是学习率，<spanclass="math inline">\(\epsilon\)</span> 是一个小的平滑项，防止分母为0。</p><h2 id="稀疏特征处理">稀疏特征处理</h2><p>AdaGrad 算法主要针对 <strong>稀疏特征</strong>进行了优化。<strong>稀疏特征</strong>在很多样本中只出现少数几次，在训练模型时，这些稀疏特征的更新很少，但每次更新可能带来较大影响。AdaGrad通过调整每个特征的学习率，针对这种情况进行了优化。</p><h3 id="优缺点">优缺点</h3><p><strong>优点</strong>：</p><ol type="1"><li><strong>有效处理稀疏特征</strong>：自动调整每个参数的学习率，使得稀疏特征的更新更少。<br /></li><li><strong>加速收敛</strong>：在自动调整学习率的同时，使得模型在训练过程中更快收敛。</li></ol><p><strong>缺点</strong>：<br />1.<strong>学习率逐渐减小</strong>：每次迭代中学习率都会减小，导致训练后期学习率变得非常小，从而使收敛速度变慢。<br />2.<strong>固定调整方式</strong>：对于不同参数，学习率调整方式是固定的，无法根据不同任务自动调整。</p><h2 id="代码实现">代码实现</h2><p>下面是一个简单的 PyTorch 实现 AdaGrad 算法的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成一些数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义 AdaGrad 优化器</span></span><br><span class="line">optimizer = torch.optim.Adagrad([w, b], lr=learning_rate)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408112049596.png"alt="image-20240811204910528" /><figcaption aria-hidden="true">image-20240811204910528</figcaption></figure><h2 id="总结">总结</h2><p>本节我们介绍了一种新的梯度下降算法变体——AdaGrad。与动量法相比，它最大的改进在于<strong>使用二阶动量来动态调整学习率</strong>，能够记住历史上的梯度信息，以动态调整学习率。其主要优点是能够处理稀疏特征问题，但也有学习率逐渐减小和调整方式固定的缺点。</p><p>到目前为止，我们一共讲了五种梯度下降算法。AdaGrad 是 2011年提出的，而动量法在 1993 年提出，SGD 在 1951年提出。通过时间轴的对比，我们可以看出人们在不断研究和改进梯度下降算法，从最早的梯度下降法到SGD，再到动量法、小批量梯度下降，最后到 2011 年的 AdaGrad。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;adagrad-算法&quot;&gt;AdaGrad 算法&lt;/h1&gt;
&lt;p&gt;在前面我们讲解了 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E5%8A%A8%E9%87%8F%E6%B3%95&amp;amp;spm=1001.2101.3001.7020&quot;&gt;动量法&lt;/a&gt;（Momentum），也就是动量随机梯度下降法。它使用了一阶动量。然而，我们同时也提到了二阶动量。使用二阶动量的梯度下降算法的改进版就是本节要讲的
AdaGrad 算法。二阶动量的出现，才意味着真正的
&lt;strong&gt;自适应学习率&lt;/strong&gt; 优化算法时代的到来。&lt;/p&gt;
&lt;h2 id=&quot;adagrad-算法的基本思想&quot;&gt;AdaGrad 算法的基本思想&lt;/h2&gt;
&lt;p&gt;我们先回顾一下传统的 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;amp;spm=1001.2101.3001.7020&quot;&gt;随机梯度下降法&lt;/a&gt;（SGD）及其各种变种。它们都是以
&lt;strong&gt;同样的学习率&lt;/strong&gt; 来更新 &lt;strong&gt;每一个参数&lt;/strong&gt;
的。但深度神经网络往往包含大量参数，这些参数并不总是
&lt;strong&gt;均匀更新&lt;/strong&gt; 的。有些参数更新得频繁，有些则很少更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;strong&gt;经常更新&lt;/strong&gt;
的参数，我们已经积累了大量关于它的知识，希望它不被新的单个样本影响太大，也就是说希望对这些参数的
&lt;strong&gt;学习率小一些&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对于 &lt;strong&gt;偶尔更新&lt;/strong&gt;
的参数，我们了解的信息较少，希望从每一个样本中多学一些，即
&lt;strong&gt;学习率大一些&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要动态度量历史更新的频率，我们引入
&lt;strong&gt;二阶动量&lt;/strong&gt;。二阶动量通过将每一位各自的历史梯度的
&lt;strong&gt;平方&lt;/strong&gt; 叠加起来来计算。具体公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
v_t = v_{t-1} + g_t^2
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&quot;math inline&quot;&gt;&#92;(g_t&#92;)&lt;/span&gt; 是当前的梯度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RMSProp 和 Adadelta</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/6.RMSProp%20%E5%92%8C%20Adadelta/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/6.RMSProp%20%E5%92%8C%20Adadelta/</id>
    <published>2024-08-12T23:02:27.000Z</published>
    <updated>2024-11-13T14:14:37.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rmsprop-和-adadelta-算法">RMSProp 和 Adadelta 算法</h1><p>​ 在 <ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020">深度学习</a>中，RMSProp 和 Adadelta 是两种常见的优化算法。它们都是在 AdaGrad的基础上做了改进，以适应深度学习中的大规模参数优化需求。</p><h2 id="rmsprop-算法">RMSProp 算法</h2><h3 id="基本思想">基本思想</h3><p>RMSProp 对 AdaGrad 进行改进，通过引入 <strong>衰减率</strong>来调整二阶动量的累积。这样可以 <strong>避免</strong> AdaGrad 中<strong>学习率减小过快</strong> 的问题。</p><p>AdaGrad 的二阶动量计算公式如下：</p><p><span class="math display">\[v_t = v_{t-1} + g_t^2\]</span> 而 RMSProp 采用了带有衰减率的计算方式：</p><p><span class="math display">\[v_t = \beta v_{t-1} + (1 - \beta) g_t^2\]</span> 其中，<span class="math inline">\(\beta\)</span>是衰减率系数。</p><span id="more"></span><h3 id="优缺点">优缺点</h3><p><strong>优点：</strong></p><ul><li><strong>自动调整学习率</strong>，避免学习率过大或过小的问题</li><li><strong>加速收敛速度</strong></li><li><strong>简单适用</strong>，适用于各种优化问题</li></ul><p><strong>缺点：</strong></p><ul><li>在处理稀疏特征时不够优秀</li><li>需要调整的超参数较多（衰减率 <spanclass="math inline">\(\beta\)</span> i 和学习率 <spanclass="math inline">\(\alpha\)</span> ）</li><li>收敛速度可能不如某些更先进的 <ahref="https://so.csdn.net/so/search?q=%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95&amp;spm=1001.2101.3001.7020">优化算法</a></li></ul><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">beta = <span class="number">0.9</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义 RMSProp 优化器</span></span><br><span class="line">optimizer = torch.optim.RMSprop([w, b], lr=learning_rate, alpha=beta)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with RMSProp&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="adadelta-算法">Adadelta 算法</h2><h3 id="基本思想-1">基本思想</h3><p>Adadelta 是对 RMSProp 的进一步改进，旨在<strong>自动调整学习率</strong>，避免手动调参。它通过计算梯度和权重更新量的累积值来调整学习率，使得训练过程更加稳定。</p><p>Adadelta 的公式如下：</p><ol type="1"><li>梯度的累积：</li></ol><p><span class="math display">\[E [g^2] _t = \rho E [g^2]_{t-1} + (1 - \rho) g_t^2\]</span></p><ol start="2" type="1"><li>权重更新量的累积：</li></ol><p><span class="math display">\[E [\Delta x^2] _t = \rho E [\Delta x^2]_{t-1} + (1 - \rho) (\Deltax_t)^2\]</span></p><ol start="3" type="1"><li>更新参数：</li></ol><p><span class="math display">\[\Delta x_t = -\frac{\sqrt{E [\Delta x^2]_{t-1} + \epsilon}}{\sqrt{E[g^2]_t + \epsilon}} g_t  \]</span></p><p><span class="math display">\[\theta_{t+1} = \theta_t + \Delta x_t\]</span></p><h3 id="优缺点-1">优缺点</h3><p><strong>优点：</strong><br />- <strong>自动调整学习率</strong>，避免学习率过大或过小的问题 -避免出现学习率饱和现象，使得训练更加稳定</p><p><strong>缺点：</strong></p><ul><li>可能收敛较慢</li><li>需要维护梯度和权重更新量的累积值，增加了空间复杂度</li></ul><h3 id="代码实现-1">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">1.0</span>  <span class="comment"># Adadelta 不需要传统的学习率</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">rho = <span class="number">0.9</span></span><br><span class="line">epsilon = <span class="number">1e-6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">x = torch.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">3</span> + torch.randn(<span class="number">100</span>, <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">w = torch.randn(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义 Adadelta 优化器</span></span><br><span class="line">optimizer = torch.optim.Adadelta([w, b], rho=rho, eps=epsilon)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录损失</span></span><br><span class="line">losses = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_pred = x * w + b</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = torch.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line">    losses.append(loss.item())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清空梯度</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可视化训练过程</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(epochs), losses)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training Loss with Adadelta&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;rmsprop-和-adadelta-算法&quot;&gt;RMSProp 和 Adadelta 算法&lt;/h1&gt;
&lt;p&gt;​ 在 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;amp;spm=1001.2101.3001.7020&quot;&gt;深度学习&lt;/a&gt;
中，RMSProp 和 Adadelta 是两种常见的优化算法。它们都是在 AdaGrad
的基础上做了改进，以适应深度学习中的大规模参数优化需求。&lt;/p&gt;
&lt;h2 id=&quot;rmsprop-算法&quot;&gt;RMSProp 算法&lt;/h2&gt;
&lt;h3 id=&quot;基本思想&quot;&gt;基本思想&lt;/h3&gt;
&lt;p&gt;RMSProp 对 AdaGrad 进行改进，通过引入 &lt;strong&gt;衰减率&lt;/strong&gt;
来调整二阶动量的累积。这样可以 &lt;strong&gt;避免&lt;/strong&gt; AdaGrad 中
&lt;strong&gt;学习率减小过快&lt;/strong&gt; 的问题。&lt;/p&gt;
&lt;p&gt;AdaGrad 的二阶动量计算公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
v_t = v_{t-1} + g_t^2
&#92;]&lt;/span&gt; 而 RMSProp 采用了带有衰减率的计算方式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
v_t = &#92;beta v_{t-1} + (1 - &#92;beta) g_t^2
&#92;]&lt;/span&gt; 其中，&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;beta&#92;)&lt;/span&gt;
是衰减率系数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Momentum</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/4.Momentum/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/4.Momentum/</id>
    <published>2024-08-12T22:02:27.000Z</published>
    <updated>2024-11-13T14:14:31.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动量法momentum">动量法（Momentum）</h1><h2 id="背景知识">背景知识</h2><p>在 <ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020">深度学习</a>的优化过程中，梯度下降法（Gradient Descent,GD）是最基本的方法。然而，基本的梯度下降法在实际应用中存在<strong>收敛速度慢</strong>、<strong>容易陷入局部最小值</strong> 以及在<strong>高维空间中震荡较大</strong>的问题。为了解决这些问题，人们提出了动量法（Momentum）。</p><h2 id="动量法的概念">动量法的概念</h2><p>动量（Momentum）最初是一个物理学概念，表示物体的质量与速度的乘积。它的方向与速度的方向相同，并遵循动量守恒定律。尽管深度学习中的动量与物理学中的动量并不完全相同，但它们都强调了一个概念：<strong>在运动方向上保持运动的趋势，从而加速收敛</strong>。</p><h2 id="动量法在深度学习中的应用">动量法在深度学习中的应用</h2><p>在深度学习中，动量法通过记录 <strong>梯度的增量</strong> 并将其与<strong>当前梯度相加</strong>，来 <strong>平滑梯度下降</strong>的路径。这意味着在每一步的迭代中，不仅考虑当前的梯度，还考虑之前梯度的累积效果。</p><p>动量法的更新公式如下：</p><p><span class="math display">\[m_t = \beta m_{t-1} + \nabla L(w_t)\]</span> <span class="math display">\[w_{t+1} = w_t - \alpha m_t\]</span></p><p>其中：</p><ul><li><span class="math inline">\(m_t\)</span>是动量项，记录了之前梯度的累积。<br /></li><li><span class="math inline">\(\beta\)</span> 是动量参数，控制<strong>动量项的衰减</strong>，一般取值为 0.9。<br /></li><li><span class="math inline">\(\nabla L(w_t)\)</span>是当前参数的梯度。</li><li><span class="math inline">\(\alpha\)</span> 是学习率。</li></ul><span id="more"></span><h2 id="动量法的优点">动量法的优点</h2><ol type="1"><li><p><strong>加速收敛</strong>：动量法通过积累之前的梯度信息，使得优化过程更为顺畅，避免了曲折路径，提高了收敛速度。<br /></p></li><li><p><strong>跳过局部最小值</strong>：由于动量的累积作用，可以帮助优化算法跳过一些局部最小值，找到更优的解。<br /></p></li><li><p><strong>减少振荡</strong>：动量法可以有效减小学习过程中梯度震荡的现象，使得模型的训练更加稳定。## 动量法的缺点</p></li><li><p><strong>计算复杂度增加</strong>：由于需要维护动量项，会导致计算复杂度的增加</p></li><li><p><strong>参数调节</strong>：动量法引入了新的超参数（动量系数 <spanclass="math inline">\(\beta\)</span>），需要在实际应用中进行调节</p></li></ol><h2 id="动量法的改进及变种">动量法的改进及变种</h2><p>​ 在动量法的基础上，还有一些改进和变种，如 Nesterov 加速梯度（NesterovAccelerated <ahref="https://so.csdn.net/so/search?q=Gradient&amp;spm=1001.2101.3001.7020">Gradient</a>,NAG）、RMSprop、Adam等。这些方法在动量法的基础上进一步优化了收敛速度和稳定性。</p><h2 id="实验代码示例">实验代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据生成</span></span><br><span class="line">torch.manual_seed(<span class="number">42</span>)</span><br><span class="line">X = torch.randn(<span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">3</span> * X.squeeze() + <span class="number">2</span> + torch.randn(<span class="number">1000</span>) * <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearModel, self).__init__()</span><br><span class="line">        self.linear = nn.Linear(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同梯度下降方法的比较</span></span><br><span class="line">methods = &#123;</span><br><span class="line">    <span class="string">&#x27;SGD&#x27;</span>: <span class="keyword">lambda</span> params: optim.SGD(params, lr=<span class="number">0.01</span>),</span><br><span class="line">    <span class="string">&#x27;Momentum&#x27;</span>: <span class="keyword">lambda</span> params: optim.SGD(params, lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">losses = &#123;method: [] <span class="keyword">for</span> method <span class="keyword">in</span> methods&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line">epochs = <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> method_name, optimizer_fn <span class="keyword">in</span> methods.items():</span><br><span class="line">    model = LinearModel()</span><br><span class="line">    optimizer = optimizer_fn(model.parameters())</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        outputs = model(X)</span><br><span class="line">        loss = criterion(outputs.squeeze(), y)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        losses[method_name].append(loss.item())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制损失曲线</span></span><br><span class="line"><span class="keyword">for</span> method_name, loss_values <span class="keyword">in</span> losses.items():</span><br><span class="line">    plt.plot(loss_values, label=method_name)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;Loss Curve Comparison&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408112029254.png"alt="image-20240811202901191" /><figcaption aria-hidden="true">image-20240811202901191</figcaption></figure><h2 id="结论">结论</h2><p>动量法通过引入动量项，显著提高了 <ahref="https://so.csdn.net/so/search?q=%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1001.2101.3001.7020">梯度下降法</a>的收敛速度和稳定性。尽管在实际应用中引入了额外的计算开销，但其在许多深度学习任务中的表现优异，已经成为常用的优化方法之一。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;动量法momentum&quot;&gt;动量法（Momentum）&lt;/h1&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;在 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;amp;spm=1001.2101.3001.7020&quot;&gt;深度学习&lt;/a&gt;
的优化过程中，梯度下降法（Gradient Descent,
GD）是最基本的方法。然而，基本的梯度下降法在实际应用中存在
&lt;strong&gt;收敛速度慢&lt;/strong&gt;、&lt;strong&gt;容易陷入局部最小值&lt;/strong&gt; 以及在
&lt;strong&gt;高维空间中震荡较大&lt;/strong&gt;
的问题。为了解决这些问题，人们提出了动量法（Momentum）。&lt;/p&gt;
&lt;h2 id=&quot;动量法的概念&quot;&gt;动量法的概念&lt;/h2&gt;
&lt;p&gt;动量（Momentum）最初是一个物理学概念，表示物体的质量与速度的乘积。它的方向与速度的方向相同，并遵循动量守恒定律。尽管深度学习中的动量与物理学中的动量并不完全相同，但它们都强调了一个概念：&lt;strong&gt;在运动方向上保持运动的趋势，从而加速收敛&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;动量法在深度学习中的应用&quot;&gt;动量法在深度学习中的应用&lt;/h2&gt;
&lt;p&gt;在深度学习中，动量法通过记录 &lt;strong&gt;梯度的增量&lt;/strong&gt; 并将其与
&lt;strong&gt;当前梯度相加&lt;/strong&gt;，来 &lt;strong&gt;平滑梯度下降&lt;/strong&gt;
的路径。这意味着在每一步的迭代中，不仅考虑当前的梯度，还考虑之前梯度的累积效果。&lt;/p&gt;
&lt;p&gt;动量法的更新公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
m_t = &#92;beta m_{t-1} + &#92;nabla L(w_t)
&#92;]&lt;/span&gt; &lt;span class=&quot;math display&quot;&gt;&#92;[
w_{t+1} = w_t - &#92;alpha m_t
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(m_t&#92;)&lt;/span&gt;
是动量项，记录了之前梯度的累积。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;beta&#92;)&lt;/span&gt; 是动量参数，控制
&lt;strong&gt;动量项的衰减&lt;/strong&gt;，一般取值为 0.9。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;nabla L(w_t)&#92;)&lt;/span&gt;
是当前参数的梯度。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;alpha&#92;)&lt;/span&gt; 是学习率。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mini-batch GD</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/3.Mini-batch%20GD/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/3.Mini-batch%20GD/</id>
    <published>2024-08-12T21:02:27.000Z</published>
    <updated>2024-11-13T14:14:28.508Z</updated>
    
    <content type="html"><![CDATA[<h1id="小批量梯度下降法mini-batch-gradient-descent">小批量梯度下降法（Mini-batchGradient Descent）</h1><p>在 <ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020">深度学习模型</a>的训练过程中，梯度下降法是最常用的优化算法之一。我们前面介绍了梯度下降法（BatchGradient Descent）和随机梯度下降法（Stochastic GradientDescent），两者各有优缺点。为了在 <strong>计算速度</strong> 和<strong>收敛稳定性</strong> 之间找到<strong>平衡</strong>，<strong>小批量梯度下降法</strong>（Mini-batchGradientDescent）应运而生。下面我们详细介绍其基本思想、优缺点，并通过代码实现来比较三种梯度下降法。</p><h2 id="小批量梯度下降法的基本思想">小批量梯度下降法的基本思想</h2><p>​ 小批量梯度下降法在每次迭代中，使用<strong>一小部分随机样本（称为小批量）</strong>来计算梯度，并更新参数值。具体来说，算法步骤如下：</p><ol type="1"><li><p>初始化参数 <span class="math inline">\(w\)</span> 和 <spanclass="math inline">\(b\)</span></p></li><li><p>在每次迭代中，从训练集中随机抽取 <spanclass="math inline">\(m\)</span> 个样本。</p></li><li><p>使用这 <span class="math inline">\(m\)</span>个样本计算损失函数的梯度</p></li><li><p>更新参数 <span class="math inline">\(w\)</span> 和 <spanclass="math inline">\(b\)</span></p></li></ol><p>其梯度计算公式如下：</p><p><span class="math display">\[w_{t+1}= w_{t}-\alpha \cdot \frac{1}{m}\sum_{i = 1}^m{\nabla _w}L(w_{t},b_{t}, x_i, y_i),\\b_{t+1}= b_{t}-\alpha \cdot \frac{1}{m}\sum_{i = 1}^m{\nabla _b}L(w_{t},b_{t}, x_i, y_i),\]</span> 其中，<span class="math inline">\(\alpha\)</span> 是学习率，<span class="math inline">\(m\)</span> 是小批量的大小。</p><ul><li>当 <span class="math inline">\(m=1\)</span> 时，Mini-batch GradientDescent 转换为 SGD</li><li>当 <span class="math inline">\(m=n\)</span> 时，Mini-batch GradientDescent 转换为 GD</li></ul><span id="more"></span><h2 id="优缺点">优缺点</h2><h3 id="优点">优点</h3><ol type="1"><li><strong>计算速度快</strong>：与批量梯度下降法相比，每次迭代只需计算小批量样本的梯度，速度更快。<br /></li><li><strong>减少振荡</strong>：与 <ahref="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1001.2101.3001.7020">随机梯度下降法</a>相比，梯度的计算更加稳定，减少了参数更新时的振荡。<br /></li><li><strong>控制灵活</strong>：可以调整小批量的大小，使得训练速度和精度之间达到平衡。</li></ol><h3 id="缺点">缺点</h3><ol type="1"><li><strong>需要调整学习率和小批量大小</strong>：学习率决定每次更新的步长，小批量大小决定每次计算梯度使用的样本数量。<br /></li><li><strong>内存消耗</strong>：小批量大小的选择受限于内存容量，尤其在使用GPU 运算时，需要选择合适的小批量大小。</li></ol><h3 id="代码实现">代码实现</h3><p>下面通过代码实现和比较三种梯度下降法的执行效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, TensorDataset</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义数据集</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">X = np.random.rand(<span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">3</span>*X + <span class="number">2</span> + np.random.randn(<span class="number">1000</span>, <span class="number">1</span>) * <span class="number">0.1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 转换为 tensor</span></span><br><span class="line">X_tensor = torch.tensor(X, dtype=torch.float32)</span><br><span class="line">y_tensor = torch.tensor(y, dtype=torch.float32)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 封装为数据集</span></span><br><span class="line">dataset = TensorDataset(X_tensor, y_tensor)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearRegressionModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearRegressionModel, self).__init__()</span><br><span class="line">        self.linear = nn.Linear(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear(x)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义梯度下降法的批量大小</span></span><br><span class="line">batch_sizes = [<span class="number">1000</span>, <span class="number">1</span>, <span class="number">128</span>]</span><br><span class="line">batch_labels = [<span class="string">&#x27;Batch Gradient Descent&#x27;</span>, <span class="string">&#x27;Stochastic Gradient Descent&#x27;</span>, <span class="string">&#x27;Mini-batch Gradient Descent&#x27;</span>]</span><br><span class="line">colors = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">num_epochs = <span class="number">1000</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 存储损失值</span></span><br><span class="line">losses = &#123;label: [] <span class="keyword">for</span> label <span class="keyword">in</span> batch_labels&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">for</span> batch_size, label, color <span class="keyword">in</span> <span class="built_in">zip</span>(batch_sizes, batch_labels, colors):</span><br><span class="line">    model = LinearRegressionModel()</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=learning_rate)</span><br><span class="line">    </span><br><span class="line">    data_loader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num_epochs), desc=label):</span><br><span class="line">        epoch_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> batch_x, batch_y <span class="keyword">in</span> data_loader:</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            outputs = model(batch_x)</span><br><span class="line">            loss = criterion(outputs, batch_y)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line">        </span><br><span class="line">        losses[label].append(epoch_loss / <span class="built_in">len</span>(data_loader))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 绘制损失值变化曲线</span></span><br><span class="line"><span class="keyword">for</span> label, color <span class="keyword">in</span> <span class="built_in">zip</span>(batch_labels, colors):</span><br><span class="line">    plt.plot(losses[label], color=color, label=label)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="结果分析">结果分析</h3><p>运行上述代码后，会显示三种梯度下降法在每个迭代周期（epoch）中的损失变化曲线。可以看到：</p><figure><imgsrc="https://tianchou.oss-cn-beijing.aliyuncs.com/img/202408112012585.png"alt="image-20240811201255444" /><figcaption aria-hidden="true">image-20240811201255444</figcaption></figure><ol type="1"><li>批量梯度下降法：损失曲线平滑，但训练速度较慢。<br /></li><li>随机梯度下降法：训练速度快，但损失曲线波动较大。<br /></li><li>小批量梯度下降法：在训练速度和损失曲线的稳定性之间达到了平衡，效果较为理想。</li></ol><h2 id="总结">总结</h2><p>​小批量梯度下降法结合了批量梯度下降法和随机梯度下降法的优点，是深度学习中常用的<ahref="https://so.csdn.net/so/search?q=%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95&amp;spm=1001.2101.3001.7020">优化算法</a>。通过调整小<strong>批量大小</strong> 和 <strong>学习率</strong>，可以在<strong>训练速度</strong> 和 <strong>收敛稳定性</strong>之间找到最佳平衡。在实际应用中，小批量梯度下降法由于其较高的效率和较好的收敛效果，被广泛应用于各类深度学习模型的训练中。</p>]]></content>
    
    
    <summary type="html">&lt;h1
id=&quot;小批量梯度下降法mini-batch-gradient-descent&quot;&gt;小批量梯度下降法（Mini-batch
Gradient Descent）&lt;/h1&gt;
&lt;p&gt;在 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B&amp;amp;spm=1001.2101.3001.7020&quot;&gt;深度学习模型&lt;/a&gt;
的训练过程中，梯度下降法是最常用的优化算法之一。我们前面介绍了梯度下降法（Batch
Gradient Descent）和随机梯度下降法（Stochastic Gradient
Descent），两者各有优缺点。为了在 &lt;strong&gt;计算速度&lt;/strong&gt; 和
&lt;strong&gt;收敛稳定性&lt;/strong&gt; 之间找到
&lt;strong&gt;平衡&lt;/strong&gt;，&lt;strong&gt;小批量梯度下降法&lt;/strong&gt;（Mini-batch
Gradient
Descent）应运而生。下面我们详细介绍其基本思想、优缺点，并通过代码实现来比较三种梯度下降法。&lt;/p&gt;
&lt;h2 id=&quot;小批量梯度下降法的基本思想&quot;&gt;小批量梯度下降法的基本思想&lt;/h2&gt;
&lt;p&gt;​ 小批量梯度下降法在每次迭代中，使用
&lt;strong&gt;一小部分随机样本（称为小批量）&lt;/strong&gt;
来计算梯度，并更新参数值。具体来说，算法步骤如下：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;初始化参数 &lt;span class=&quot;math inline&quot;&gt;&#92;(w&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(b&#92;)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在每次迭代中，从训练集中随机抽取 &lt;span
class=&quot;math inline&quot;&gt;&#92;(m&#92;)&lt;/span&gt; 个样本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用这 &lt;span class=&quot;math inline&quot;&gt;&#92;(m&#92;)&lt;/span&gt;
个样本计算损失函数的梯度&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新参数 &lt;span class=&quot;math inline&quot;&gt;&#92;(w&#92;)&lt;/span&gt; 和 &lt;span
class=&quot;math inline&quot;&gt;&#92;(b&#92;)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其梯度计算公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
w_{t+1}= w_{t}-&#92;alpha &#92;cdot &#92;frac{1}{m}&#92;sum_{i = 1}^m{&#92;nabla _w}L(w_{t},
b_{t}, x_i, y_i),
&#92;&#92;
b_{t+1}= b_{t}-&#92;alpha &#92;cdot &#92;frac{1}{m}&#92;sum_{i = 1}^m{&#92;nabla _b}L(w_{t},
b_{t}, x_i, y_i),
&#92;]&lt;/span&gt; 其中，&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;alpha&#92;)&lt;/span&gt; 是学习率，
&lt;span class=&quot;math inline&quot;&gt;&#92;(m&#92;)&lt;/span&gt; 是小批量的大小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;span class=&quot;math inline&quot;&gt;&#92;(m=1&#92;)&lt;/span&gt; 时，Mini-batch Gradient
Descent 转换为 SGD&lt;/li&gt;
&lt;li&gt;当 &lt;span class=&quot;math inline&quot;&gt;&#92;(m=n&#92;)&lt;/span&gt; 时，Mini-batch Gradient
Descent 转换为 GD&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SGD</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/2.SGD/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/2.SGD/</id>
    <published>2024-08-12T20:02:27.000Z</published>
    <updated>2024-11-13T14:14:25.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随机梯度下降法sgd">随机梯度下降法（SGD）</h1><p>​ 在 <ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020">深度学习</a>中，梯度下降法（GradientDescent）是最常用的模型参数优化方法。然而，传统的梯度下降法（Full BatchLearning）存在一些缺点，例如训练时间过长和容易陷入局部最小值。为了解决这些问题，随机梯度下降法（StochasticGradient Descent，简称 SGD）应运而生。</p><h2 id="传统梯度下降法的问题">传统梯度下降法的问题</h2><ol type="1"><li><strong>训练时间长</strong>：传统梯度下降法需要使用所有训练数据来计算梯度，因此数据量大时耗时严重。<br /></li><li><strong>容易陷入局部最小值</strong>：复杂的损失函数可能会导致算法在局部最小值附近来回震荡，无法快速收敛。<br /></li><li><strong>对初始值敏感</strong>：初始值选择不当可能导致算法被卡在局部最小值。</li></ol><h2 id="随机梯度下降法-的基本思想"><ahref="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1001.2101.3001.7020">随机梯度下降法</a>的基本思想</h2><p>SGD 每次迭代仅 <strong>使用一个样本</strong> 的<strong>损失值</strong>来计算梯度，而不是全数据集损失值的求和平均来计算梯度。</p><span id="more"></span><h2 id="sgd-的优缺点">SGD 的优缺点</h2><h3 id="优点">优点</h3><ol type="1"><li><strong>速度快</strong>：每次迭代只需计算一个样本的梯度，速度比传统方法快很多。<br /></li><li><strong>避免局部最小值</strong>：因为每次更新参数只使用一个样本，随机性使得算法不容易陷入局部最小值。</li><li><strong>更易实现和调整</strong>：每个样本的梯度可以分别计算，并行处理更加高效。</li></ol><h3 id="缺点">缺点</h3><ol type="1"><li><strong>收敛不稳定</strong>：每次迭代梯度都会有噪声，可能导致收敛不稳定。</li><li><strong>方差较大</strong>：每次更新参数只使用一个样本的梯度，可能导致算法方差较大，难以收敛。</li></ol><h2 id="动态学习率">动态学习率</h2><p>为了提高 SGD的收敛性，可以使用动态学习率。常见的动态学习率策略包括：</p><ol type="1"><li><p><strong>反比例学习率</strong>：初始学习率随着迭代次数增加而减小。</p></li><li><p><strong>反比例平方学习率</strong>：类似反比例学习率，但减小速度更快。</p></li></ol><p><span class="math display">\[\alpha_t = \frac{\alpha_0}{1 + k \cdot t^2}\]</span></p><ol start="3" type="1"><li><strong>指数衰减学习率</strong>：学习率以指数形式衰减。</li></ol><p><span class="math display">\[\alpha_t = \alpha_0 \cdot e^{-\lambda t}\]</span></p><h2 id="实现示例">实现示例</h2><p>下面是使用 Python 实现随机梯度下降法的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stochastic_gradient_descent</span>(<span class="params">X, y, lr=<span class="number">0.01</span>, epochs=<span class="number">1000</span></span>):</span><br><span class="line">    m, n = X.shape</span><br><span class="line">    w = np.zeros(n)</span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            random_index = np.random.randint(m)</span><br><span class="line">            xi = X[random_index:random_index+<span class="number">1</span>]</span><br><span class="line">            yi = y[random_index:random_index+<span class="number">1</span>]</span><br><span class="line">            gradient_w = <span class="number">2</span> * xi.T.dot(xi.dot(w) + b - yi)</span><br><span class="line">            gradient_b = <span class="number">2</span> * (xi.dot(w) + b - yi)</span><br><span class="line">            w = w - lr * gradient_w</span><br><span class="line">            b = b - lr * gradient_b</span><br><span class="line">        <span class="comment"># 可选：动态学习率调整</span></span><br><span class="line">        lr = lr / (<span class="number">1</span> + epoch / epochs)</span><br><span class="line">    <span class="keyword">return</span> w, b</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">X = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">y = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用 SGD 函数</span></span><br><span class="line">w, b = stochastic_gradient_descent(X, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;权重:&quot;</span>, w)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;偏置:&quot;</span>, b)</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>SGD 通过每次迭代使用一个 <strong>随机样本</strong>来计算梯度，从而加快了计算速度并避免陷入局部最小值。动态学习率的使用可以进一步提高SGD 的收敛性。在实际应用中，SGD已成为深度学习领域最常用的优化算法之一。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;随机梯度下降法sgd&quot;&gt;随机梯度下降法（SGD）&lt;/h1&gt;
&lt;p&gt;​ 在 &lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;amp;spm=1001.2101.3001.7020&quot;&gt;深度学习&lt;/a&gt;
中，梯度下降法（Gradient
Descent）是最常用的模型参数优化方法。然而，传统的梯度下降法（Full Batch
Learning）存在一些缺点，例如训练时间过长和容易陷入局部最小值。为了解决这些问题，随机梯度下降法（Stochastic
Gradient Descent，简称 SGD）应运而生。&lt;/p&gt;
&lt;h2 id=&quot;传统梯度下降法的问题&quot;&gt;传统梯度下降法的问题&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;训练时间长&lt;/strong&gt;：传统梯度下降法需要使用所有训练数据来计算梯度，因此数据量大时耗时严重。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容易陷入局部最小值&lt;/strong&gt;：复杂的损失函数可能会导致算法在局部最小值附近来回震荡，无法快速收敛。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对初始值敏感&lt;/strong&gt;：初始值选择不当可能导致算法被卡在局部最小值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;随机梯度下降法-的基本思想&quot;&gt;&lt;a
href=&quot;https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;amp;spm=1001.2101.3001.7020&quot;&gt;随机梯度下降法&lt;/a&gt;
的基本思想&lt;/h2&gt;
&lt;p&gt;SGD 每次迭代仅 &lt;strong&gt;使用一个样本&lt;/strong&gt; 的
&lt;strong&gt;损失值&lt;/strong&gt;
来计算梯度，而不是全数据集损失值的求和平均来计算梯度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GD</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/1.GD/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/1.GD/</id>
    <published>2024-08-12T19:02:27.000Z</published>
    <updated>2024-11-13T14:14:22.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梯度下降法gradient-descent">梯度下降法（Gradient Descent）</h1><h2 id="引言">引言</h2><p>​ 在深度学习中，<ahref="https://so.csdn.net/so/search?q=%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020">损失函数</a>的求解是一个关键步骤。损失函数通常没有解析解，因此需要通过最优化算法来逼近求解。其中，梯度下降法是最常用的优化算法之一。本文将详细介绍梯度下降法的基本概念、理论基础、及其在深度学习中的应用。</p><h2 id="梯度下降法的基本概念">梯度下降法的基本概念</h2><p>梯度下降法（GradientDescent）是一种基于一阶导数的优化算法，用于最小化目标函数。在深度学习中，目标函数通常是损失函数，其目的是通过调整参数来使损失最小化。</p><h3 id="损失函数的定义">损失函数的定义</h3><p>假设损失函数 <span class="math inline">\(L\)</span> 是参数 <spanclass="math inline">\(W\)</span> 的函数：<spanclass="math inline">\(L(W)\)</span>，我们的目标是找到参数 <spanclass="math inline">\(W\)</span> 使得 <spanclass="math inline">\(L(W)\)</span> 最小化。</p><span id="more"></span><h3 id="梯度的定义">梯度的定义</h3><p>梯度是损失函数的导数，表示函数在某一点处的最陡下降方向。对于参数<span class="math inline">\(W\)</span> 的每个分量 <spanclass="math inline">\(w_i\)</span> ，梯度表示为：</p><p><span class="math display">\[\nabla L(W)=\left [\frac{\partial L}{\partial w_1},\frac{\partialL}{\partial w_2},\ldots,\frac{\partial L}{\partial w_n}\right]\]</span></p><blockquote><p><strong>梯度的维度</strong> = <strong>参数的个数</strong></p></blockquote><h3 id="梯度下降算法">梯度下降算法</h3><p>梯度下降法通过以下步骤更新参数：</p><p><span class="math display">\[w_{t+1}= w_{t}-\alpha \cdot \frac{1}{n}\sum_{i = 1}^n{\nabla _w}L(w_{t},b_{t}, x_i, y_i),\\b_{t+1}= b_{t}-\alpha \cdot \frac{1}{n}\sum_{i = 1}^n{\nabla _b}L(w_{t},b_{t}, x_i, y_i),\]</span> 其中，<span class="math inline">\(\alpha\)</span>是学习率（Learning Rate），决定了每次更新的步长；<spanclass="math inline">\(n\)</span> 是样本大小。</p><h2 id="梯度下降法的应用">梯度下降法的应用</h2><h3 id="简单示例二次损失函数">简单示例：二次损失函数</h3><p>为了便于理解，我们假设损失函数是一个简单的二次函数</p><p><span class="math display">\[L(W) = W^2\]</span> 梯度为：</p><p><span class="math display">\[\nabla L(W) = 2W\]</span> 根据梯度下降法的更新规则，参数更新为：</p><p><span class="math display">\[W_{t+1} = W_t - \alpha \cdot 2W_t = W_t(1 - 2\alpha)\]</span></p><h3 id="高维度情况下的梯度下降">高维度情况下的梯度下降</h3><p>​在实际应用中，损失函数往往是高维度的。梯度下降法可以扩展到高维度情况，其中<strong>梯度是一个向量，表示每个参数</strong>的导数。我们将梯度表示为一个向量，并对每个参数进行更新。</p><h3 id="学习率的选择">学习率的选择</h3><p>学习率 <span class="math inline">\(\alpha\)</span>对梯度下降法的收敛速度和稳定性有重大影响。选择合适的学习率非常重要。</p><ul><li>如果学习率过大，算法可能会在最小值附近来回<strong>震荡</strong>；</li><li>如果学习率过小，算法的 <strong>收敛速度会非常慢</strong>。</li></ul><h2 id="梯度下降法的变体">梯度下降法的变体</h2><p>在实际应用中，梯度下降法有多种变体，以提高收敛速度和稳定性。常见的变体包括：</p><ul><li><strong>随机梯度下降法（SGD）</strong>：每次迭代使用一个或几个样本来更新参数，而不是使用整个训练集。这种方法可以显著加快计算速度。<br /></li><li><strong>动量法（Momentum）</strong>：在每次更新时，加入之前更新的动量，以加速收敛。<br /></li><li><strong>自适应学习率</strong> 方法：例如 Adagrad、RMSprop、Adam等，通过 <strong>动态调整学习率</strong> 来提高收敛效果。</li></ul><h2 id="总结">总结</h2><p>梯度下降法是深度学习中最常用的优化算法之一。通过计算损失函数的梯度，确定参数的更新方向和步长，不断逼近损失函数的最小值。<strong>选择合适的学习率和初始点是梯度下降法（GD）成功的关键。</strong>理解梯度下降法的基本概念和应用，对于深入学习 <ahref="https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95&amp;spm=1001.2101.3001.7020">深度学习算法</a>有重要意义。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;梯度下降法gradient-descent&quot;&gt;梯度下降法（Gradient Descent）&lt;/h1&gt;
&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;​ 在深度学习中，&lt;a
href=&quot;https://so.csdn.net/so/search?q=%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&amp;amp;spm=1001.2101.3001.7020&quot;&gt;损失函数&lt;/a&gt;
的求解是一个关键步骤。损失函数通常没有解析解，因此需要通过最优化算法来逼近求解。其中，梯度下降法是最常用的优化算法之一。本文将详细介绍梯度下降法的基本概念、理论基础、及其在深度学习中的应用。&lt;/p&gt;
&lt;h2 id=&quot;梯度下降法的基本概念&quot;&gt;梯度下降法的基本概念&lt;/h2&gt;
&lt;p&gt;梯度下降法（Gradient
Descent）是一种基于一阶导数的优化算法，用于最小化目标函数。在深度学习中，目标函数通常是损失函数，其目的是通过调整参数来使损失最小化。&lt;/p&gt;
&lt;h3 id=&quot;损失函数的定义&quot;&gt;损失函数的定义&lt;/h3&gt;
&lt;p&gt;假设损失函数 &lt;span class=&quot;math inline&quot;&gt;&#92;(L&#92;)&lt;/span&gt; 是参数 &lt;span
class=&quot;math inline&quot;&gt;&#92;(W&#92;)&lt;/span&gt; 的函数：&lt;span
class=&quot;math inline&quot;&gt;&#92;(L(W)&#92;)&lt;/span&gt;，我们的目标是找到参数 &lt;span
class=&quot;math inline&quot;&gt;&#92;(W&#92;)&lt;/span&gt; 使得 &lt;span
class=&quot;math inline&quot;&gt;&#92;(L(W)&#92;)&lt;/span&gt; 最小化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深度学习中的优化算法探讨</title>
    <link href="https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%9C%80%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA/"/>
    <id>https://luyicui.github.io/2024/08/13/[object%20Object]/AI/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%9C%80%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA/</id>
    <published>2024-08-12T18:02:27.000Z</published>
    <updated>2024-11-13T14:14:46.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习中的优化算法探讨">深度学习中的优化算法探讨</h1><p>​ 在深度学习的过程中，<strong>优化算法</strong>扮演着至关重要的角色。训练神经网络通常需要投入大量的时间和资源，而优化算法的选择和应用直接影响模型的训练效率和效果。数值优化是一个庞大的数学学科，本篇文章将探讨与深度学习，特别是训练过程密切相关的优化算法。</p><h2id="最优化理论和深度学习优化算法的区别">最优化理论和深度学习优化算法的区别</h2><h3 id="度量和损失函数">度量和损失函数</h3><ul><li><strong>最优化理论</strong>：研究如何找到函数的<strong>最优解</strong>，即最大值或最小值，通常有明确的度量标准。</li><li><strong>深度学习</strong>：使用代理损失函数（如负对数似然或交叉熵）来进行优化，通过<strong>最小化代理损失函数</strong> 来最大化原始度量。</li></ul><h3 id="数据关注点">数据关注点</h3><ul><li><strong>最优化理论</strong>：只关心现有数据的最优解。</li><li><strong>深度学习</strong>：关注模型的泛化能力，即模型<strong>在测试集</strong> 上的表现，避免过拟合现象。</li></ul><h3 id="研究内容">研究内容</h3><ul><li><strong>最优化理论</strong>：注重算法本身的研究。</li><li><strong>深度学习</strong>：关注实现细节，包括神经网络的结构、参数调整等。</li></ul><span id="more"></span><h2 id="训练误差与泛化误差">训练误差与泛化误差</h2><ul><li><strong>训练误差</strong>：模型在 <strong>训练集</strong>上的误差，只关注 <strong>训练过程</strong> 中的表现。</li><li><strong>泛化误差</strong>：模型在未见过的数据（<strong>测试集</strong>）上的误差，关注模型的<strong>泛化能力</strong>。</li></ul><p>泛化误差的衡量是深度学习优化的<strong>核心</strong>，理想的模型应该在新数据上也能表现良好。</p><h2 id="经验风险与真实风险">经验风险与真实风险</h2><ul><li><strong>经验风险（Empirical Risk）</strong>：<strong>训练集</strong>上的期望 <strong>损失</strong>，通过 <strong>最小化经验风险</strong>来优化模型。</li><li><strong>真实风险（Expected Risk）</strong>：使用<strong>真实数据</strong> 计算损失函数的期望值，由于无法直接计算<strong>真实风险</strong>，因此通过 <strong>优化经验风险</strong>来尽量减少泛化误差。</li></ul><h2 id="深度学习优化中的挑战">深度学习优化中的挑战</h2><h3 id="病态问题ill-conditioned-problem">病态问题（Ill-conditionedProblem）</h3><ul><li>问题解对条件非常敏感，即使微小的变化也会导致解的大幅变化。</li><li>解决方案：正则化技术、数据预处理等。</li></ul><h3 id="局部最小值问题local-minima">局部最小值问题（Local Minima）</h3><ul><li>优化过程中可能陷入局部最小值，而不是全局最优值。</li><li>解决方案：使用不同的优化算法，如随机梯度下降（SGD）、Adam 等。</li></ul><h3 id="鞍点问题saddle-points">鞍点问题（Saddle Points）</h3><ul><li>损失函数在某些点的曲率为零，但不是全局最优点。</li><li>解决方案：减少模型复杂度、增加训练数据、使用随机初始化等。</li></ul><h3 id="悬崖问题cliffs">悬崖问题（Cliffs）</h3><ul><li>多层神经网络中的损失函数可能存在陡峭的区域，导致梯度更新大幅改变参数值。</li><li>解决方案：梯度裁剪（Gradient Clipping）以控制梯度大小。</li></ul><h3id="长期依赖问题long-term-dependency-problem">长期依赖问题（Long-termDependency Problem）</h3><ul><li>深层网络结构使得模型难以学习到先前的信息，导致梯度消失或爆炸。</li><li>解决方案：使用 LSTM 或 GRU 等特殊的循环神经网络结构</li></ul><h2 id="总结">总结</h2><p>​优化算法是深度学习模型训练中的核心工具，两者有密切的联系但也有显著的区别。最优化理论关注的是<strong>训练误差</strong>，而深度学习关注的是<strong>泛化误差</strong>。深度学习通过 <strong>最小化经验风险</strong>来尽量减少<strong>泛化误差</strong>。优化过程中面临的挑战包括病态问题、局部最小值、鞍点、悬崖和长期依赖问题，这些问题需要通过不同的优化算法和策略来解决。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;深度学习中的优化算法探讨&quot;&gt;深度学习中的优化算法探讨&lt;/h1&gt;
&lt;p&gt;​ 在深度学习的过程中，&lt;strong&gt;优化算法&lt;/strong&gt;
扮演着至关重要的角色。训练神经网络通常需要投入大量的时间和资源，而优化算法的选择和应用直接影响模型的训练效率和效果。数值优化是一个庞大的数学学科，本篇文章将探讨与深度学习，特别是训练过程密切相关的优化算法。&lt;/p&gt;
&lt;h2
id=&quot;最优化理论和深度学习优化算法的区别&quot;&gt;最优化理论和深度学习优化算法的区别&lt;/h2&gt;
&lt;h3 id=&quot;度量和损失函数&quot;&gt;度量和损失函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最优化理论&lt;/strong&gt;：研究如何找到函数的
&lt;strong&gt;最优解&lt;/strong&gt;，即最大值或最小值，通常有明确的度量标准。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深度学习&lt;/strong&gt;：使用代理损失函数（如负对数似然或交叉熵）来进行优化，通过
&lt;strong&gt;最小化代理损失函数&lt;/strong&gt; 来最大化原始度量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据关注点&quot;&gt;数据关注点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最优化理论&lt;/strong&gt;：只关心现有数据的最优解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深度学习&lt;/strong&gt;：关注模型的泛化能力，即模型
&lt;strong&gt;在测试集&lt;/strong&gt; 上的表现，避免过拟合现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;研究内容&quot;&gt;研究内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最优化理论&lt;/strong&gt;：注重算法本身的研究。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深度学习&lt;/strong&gt;：关注实现细节，包括神经网络的结构、参数调整等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="优化算法" scheme="https://luyicui.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
